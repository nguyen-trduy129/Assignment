
AssignmentProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de4  08004de4  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004de4  08004de4  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004de4  08004de4  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000cc  08004eb8  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004eb8  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001848a  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003004  00000000  00000000  0003857f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0003b588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  0003c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fed  00000000  00000000  0003d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012691  00000000  00000000  00056fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b204  00000000  00000000  0006967e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000f48d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d64 	.word	0x08004d64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08004d64 	.word	0x08004d64

0800014c <isButton1Pressed>:

int KeyReg3[4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int timeForKeyPressed[4] = {300/TICK, 300/TICK, 300/TICK, 300/TICK};

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag ==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000e8 	.word	0x200000e8

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag ==1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ec 	.word	0x200000ec

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag ==1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000f0 	.word	0x200000f0

080001b8 <isButtonPedesPressed>:

int isButtonPedesPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if (buttonPedes_flag ==1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButtonPedesPressed+0x16>
		buttonPedes_flag =0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButtonPedesPressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000f4 	.word	0x200000f4

080001dc <doProcess>:

void doProcess(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d81a      	bhi.n	8000220 <doProcess+0x44>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <doProcess+0x14>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000201 	.word	0x08000201
 80001f4:	08000209 	.word	0x08000209
 80001f8:	08000211 	.word	0x08000211
 80001fc:	08000219 	.word	0x08000219
	switch (i){
	case 0:
		button1_flag =1;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <doProcess+0x50>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
		break;
 8000206:	e00c      	b.n	8000222 <doProcess+0x46>
	case 1:
		button2_flag =1;
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <doProcess+0x54>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
		break;
 800020e:	e008      	b.n	8000222 <doProcess+0x46>
	case 2:
		button3_flag =1;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <doProcess+0x58>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
		break;
 8000216:	e004      	b.n	8000222 <doProcess+0x46>
	case 3:
		buttonPedes_flag =1;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <doProcess+0x5c>)
 800021a:	2201      	movs	r2, #1
 800021c:	601a      	str	r2, [r3, #0]
		break;
 800021e:	e000      	b.n	8000222 <doProcess+0x46>
	default:
		break;
 8000220:	bf00      	nop
	}
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	200000e8 	.word	0x200000e8
 8000230:	200000ec 	.word	0x200000ec
 8000234:	200000f0 	.word	0x200000f0
 8000238:	200000f4 	.word	0x200000f4

0800023c <readPin>:


int readPin(int i){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d822      	bhi.n	8000290 <readPin+0x54>
 800024a:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <readPin+0x14>)
 800024c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000250:	08000261 	.word	0x08000261
 8000254:	0800026d 	.word	0x0800026d
 8000258:	08000279 	.word	0x08000279
 800025c:	08000285 	.word	0x08000285
	switch(i){
	case 0:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON1_Pin);
 8000260:	2102      	movs	r1, #2
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <readPin+0x60>)
 8000264:	f002 f87a 	bl	800235c <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	e012      	b.n	8000292 <readPin+0x56>
		break;
	case 1:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON2_Pin);
 800026c:	2110      	movs	r1, #16
 800026e:	480b      	ldr	r0, [pc, #44]	; (800029c <readPin+0x60>)
 8000270:	f002 f874 	bl	800235c <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	e00c      	b.n	8000292 <readPin+0x56>
		break;
	case 2:
		return HAL_GPIO_ReadPin(GPIOB, BUTTON3_Pin);
 8000278:	2101      	movs	r1, #1
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <readPin+0x64>)
 800027c:	f002 f86e 	bl	800235c <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	e006      	b.n	8000292 <readPin+0x56>
		break;
	case 3:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON_PEDES_Pin);
 8000284:	2101      	movs	r1, #1
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <readPin+0x60>)
 8000288:	f002 f868 	bl	800235c <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	e000      	b.n	8000292 <readPin+0x56>
		break;
	default:
		return GPIO_PIN_RESET;
 8000290:	2300      	movs	r3, #0
		break;
	}
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <getKeyInput>:


void getKeyInput(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	for (int i =0; i<4; i++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e068      	b.n	8000382 <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 80002b0:	4a38      	ldr	r2, [pc, #224]	; (8000394 <getKeyInput+0xf0>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	4937      	ldr	r1, [pc, #220]	; (8000398 <getKeyInput+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80002c0:	4a36      	ldr	r2, [pc, #216]	; (800039c <getKeyInput+0xf8>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c8:	4932      	ldr	r1, [pc, #200]	; (8000394 <getKeyInput+0xf0>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = readPin(i);
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f7ff ffb3 	bl	800023c <readPin>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4930      	ldr	r1, [pc, #192]	; (800039c <getKeyInput+0xf8>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 80002e0:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <getKeyInput+0xf4>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e8:	492a      	ldr	r1, [pc, #168]	; (8000394 <getKeyInput+0xf0>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d143      	bne.n	800037c <getKeyInput+0xd8>
 80002f4:	4a27      	ldr	r2, [pc, #156]	; (8000394 <getKeyInput+0xf0>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fc:	4927      	ldr	r1, [pc, #156]	; (800039c <getKeyInput+0xf8>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000304:	429a      	cmp	r2, r3
 8000306:	d139      	bne.n	800037c <getKeyInput+0xd8>
			if (KeyReg2[i] != KeyReg3[i]){
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <getKeyInput+0xf8>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4923      	ldr	r1, [pc, #140]	; (80003a0 <getKeyInput+0xfc>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d016      	beq.n	800034a <getKeyInput+0xa6>
				KeyReg3[i] = KeyReg2[i];
 800031c:	4a1f      	ldr	r2, [pc, #124]	; (800039c <getKeyInput+0xf8>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	491e      	ldr	r1, [pc, #120]	; (80003a0 <getKeyInput+0xfc>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <getKeyInput+0xf8>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d121      	bne.n	800037c <getKeyInput+0xd8>
					timeForKeyPressed[i] = 300/TICK;
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <getKeyInput+0x100>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	211e      	movs	r1, #30
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					doProcess(i);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff4a 	bl	80001dc <doProcess>
 8000348:	e018      	b.n	800037c <getKeyInput+0xd8>
				}
			}else {
				timeForKeyPressed[i]--;
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <getKeyInput+0x100>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4913      	ldr	r1, [pc, #76]	; (80003a4 <getKeyInput+0x100>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeForKeyPressed[i] ==0){
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <getKeyInput+0x100>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d109      	bne.n	800037c <getKeyInput+0xd8>
					KeyReg3[i] =NORMAL_STATE;
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <getKeyInput+0xfc>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2101      	movs	r1, #1
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeForKeyPressed[i] = 300/TICK;
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <getKeyInput+0x100>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	211e      	movs	r1, #30
 8000378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0; i<4; i++){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b03      	cmp	r3, #3
 8000386:	dd93      	ble.n	80002b0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000010 	.word	0x20000010
 8000398:	20000000 	.word	0x20000000
 800039c:	20000020 	.word	0x20000020
 80003a0:	20000030 	.word	0x20000030
 80003a4:	20000040 	.word	0x20000040

080003a8 <buzzerRun>:

TIM_HandleTypeDef htim3;

int buzzer_flag =0;

void buzzerRun(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	switch (buzzer_flag){
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <buzzerRun+0x74>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <buzzerRun+0x12>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d00b      	beq.n	80003d0 <buzzerRun+0x28>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
			setTimer7(250);
		}
		break;
	default:
		break;
 80003b8:	e02d      	b.n	8000416 <buzzerRun+0x6e>
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <buzzerRun+0x78>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2200      	movs	r2, #0
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(10);
 80003c2:	200a      	movs	r0, #10
 80003c4:	f000 fd26 	bl	8000e14 <setTimer6>
		setTimer7(50);
 80003c8:	2032      	movs	r0, #50	; 0x32
 80003ca:	f000 fd3f 	bl	8000e4c <setTimer7>
		break;
 80003ce:	e022      	b.n	8000416 <buzzerRun+0x6e>
		if (timer6_flag == 1){
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <buzzerRun+0x7c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d112      	bne.n	80003fe <buzzerRun+0x56>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, (100 /(get_timer4_counter()/1000 +1)));
 80003d8:	f000 fd7e 	bl	8000ed8 <get_timer4_counter>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <buzzerRun+0x80>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	1192      	asrs	r2, r2, #6
 80003e6:	17db      	asrs	r3, r3, #31
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	3301      	adds	r3, #1
 80003ec:	2264      	movs	r2, #100	; 0x64
 80003ee:	fb92 f2f3 	sdiv	r2, r2, r3
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <buzzerRun+0x78>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer6(250);
 80003f8:	20fa      	movs	r0, #250	; 0xfa
 80003fa:	f000 fd0b 	bl	8000e14 <setTimer6>
		if (timer7_flag ==1){
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <buzzerRun+0x84>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d106      	bne.n	8000414 <buzzerRun+0x6c>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <buzzerRun+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer7(250);
 800040e:	20fa      	movs	r0, #250	; 0xfa
 8000410:	f000 fd1c 	bl	8000e4c <setTimer7>
		break;
 8000414:	bf00      	nop
	}
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000f8 	.word	0x200000f8
 8000420:	20000158 	.word	0x20000158
 8000424:	20000134 	.word	0x20000134
 8000428:	10624dd3 	.word	0x10624dd3
 800042c:	2000013c 	.word	0x2000013c

08000430 <modeRun>:
 */


#include "fsm_mode.h"

void modeRun(){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	switch(mode){
 8000434:	4baf      	ldr	r3, [pc, #700]	; (80006f4 <modeRun+0x2c4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b03      	cmp	r3, #3
 800043a:	f200 818c 	bhi.w	8000756 <modeRun+0x326>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <modeRun+0x14>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000455 	.word	0x08000455
 8000448:	0800045d 	.word	0x0800045d
 800044c:	08000471 	.word	0x08000471
 8000450:	080005bf 	.word	0x080005bf
	case INIT_MODE:
		mode = MODE_1;
 8000454:	4ba7      	ldr	r3, [pc, #668]	; (80006f4 <modeRun+0x2c4>)
 8000456:	2201      	movs	r2, #1
 8000458:	601a      	str	r2, [r3, #0]
		break;
 800045a:	e17c      	b.n	8000756 <modeRun+0x326>
	case MODE_1:
		if (isButton1Pressed()){
 800045c:	f7ff fe76 	bl	800014c <isButton1Pressed>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	f000 8172 	beq.w	800074c <modeRun+0x31c>
			mode = MODE_2;
 8000468:	4ba2      	ldr	r3, [pc, #648]	; (80006f4 <modeRun+0x2c4>)
 800046a:	2202      	movs	r2, #2
 800046c:	601a      	str	r2, [r3, #0]
		}
		break;
 800046e:	e16d      	b.n	800074c <modeRun+0x31c>
	case MODE_2:
		if (isButton1Pressed()){
 8000470:	f7ff fe6c 	bl	800014c <isButton1Pressed>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <modeRun+0x50>
			mode = MODE_3;
 800047a:	4b9e      	ldr	r3, [pc, #632]	; (80006f4 <modeRun+0x2c4>)
 800047c:	2203      	movs	r2, #3
 800047e:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 8000480:	f7ff fe76 	bl	8000170 <isButton2Pressed>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d046      	beq.n	8000518 <modeRun+0xe8>
			switch(state_1){
 800048a:	4b9b      	ldr	r3, [pc, #620]	; (80006f8 <modeRun+0x2c8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b0d      	cmp	r3, #13
 8000490:	d00e      	beq.n	80004b0 <modeRun+0x80>
 8000492:	2b0d      	cmp	r3, #13
 8000494:	dc1c      	bgt.n	80004d0 <modeRun+0xa0>
 8000496:	2b0b      	cmp	r3, #11
 8000498:	d002      	beq.n	80004a0 <modeRun+0x70>
 800049a:	2b0c      	cmp	r3, #12
 800049c:	d010      	beq.n	80004c0 <modeRun+0x90>
			case MAN_AMBER:
				state_1= MAN_RED;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 800049e:	e017      	b.n	80004d0 <modeRun+0xa0>
				state_1= MAN_GREEN;
 80004a0:	4b95      	ldr	r3, [pc, #596]	; (80006f8 <modeRun+0x2c8>)
 80004a2:	220d      	movs	r2, #13
 80004a4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004aa:	f000 fc43 	bl	8000d34 <setTimer2>
				break;
 80004ae:	e010      	b.n	80004d2 <modeRun+0xa2>
				state_1= MAN_AMBER;
 80004b0:	4b91      	ldr	r3, [pc, #580]	; (80006f8 <modeRun+0x2c8>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ba:	f000 fc3b 	bl	8000d34 <setTimer2>
				break;
 80004be:	e008      	b.n	80004d2 <modeRun+0xa2>
				state_1= MAN_RED;
 80004c0:	4b8d      	ldr	r3, [pc, #564]	; (80006f8 <modeRun+0x2c8>)
 80004c2:	220b      	movs	r2, #11
 80004c4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ca:	f000 fc33 	bl	8000d34 <setTimer2>
				break;
 80004ce:	e000      	b.n	80004d2 <modeRun+0xa2>
				break;
 80004d0:	bf00      	nop
			}

			switch(state_2){
 80004d2:	4b8a      	ldr	r3, [pc, #552]	; (80006fc <modeRun+0x2cc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b0d      	cmp	r3, #13
 80004d8:	d00e      	beq.n	80004f8 <modeRun+0xc8>
 80004da:	2b0d      	cmp	r3, #13
 80004dc:	dc1e      	bgt.n	800051c <modeRun+0xec>
 80004de:	2b0b      	cmp	r3, #11
 80004e0:	d002      	beq.n	80004e8 <modeRun+0xb8>
 80004e2:	2b0c      	cmp	r3, #12
 80004e4:	d010      	beq.n	8000508 <modeRun+0xd8>
			case MAN_AMBER:
				state_2= MAN_RED;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 80004e6:	e019      	b.n	800051c <modeRun+0xec>
				state_2= MAN_GREEN;
 80004e8:	4b84      	ldr	r3, [pc, #528]	; (80006fc <modeRun+0x2cc>)
 80004ea:	220d      	movs	r2, #13
 80004ec:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80004ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80004f2:	f000 fc3b 	bl	8000d6c <setTimer3>
				break;
 80004f6:	e012      	b.n	800051e <modeRun+0xee>
				state_2= MAN_AMBER;
 80004f8:	4b80      	ldr	r3, [pc, #512]	; (80006fc <modeRun+0x2cc>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80004fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000502:	f000 fc33 	bl	8000d6c <setTimer3>
				break;
 8000506:	e00a      	b.n	800051e <modeRun+0xee>
				state_2= MAN_RED;
 8000508:	4b7c      	ldr	r3, [pc, #496]	; (80006fc <modeRun+0x2cc>)
 800050a:	220b      	movs	r2, #11
 800050c:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800050e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000512:	f000 fc2b 	bl	8000d6c <setTimer3>
				break;
 8000516:	e002      	b.n	800051e <modeRun+0xee>
			}
		}
 8000518:	bf00      	nop
 800051a:	e000      	b.n	800051e <modeRun+0xee>
				break;
 800051c:	bf00      	nop

		if (isButton3Pressed()){
 800051e:	f7ff fe39 	bl	8000194 <isButton3Pressed>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d046      	beq.n	80005b6 <modeRun+0x186>
			switch(state_1){
 8000528:	4b73      	ldr	r3, [pc, #460]	; (80006f8 <modeRun+0x2c8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b0d      	cmp	r3, #13
 800052e:	d00e      	beq.n	800054e <modeRun+0x11e>
 8000530:	2b0d      	cmp	r3, #13
 8000532:	dc1c      	bgt.n	800056e <modeRun+0x13e>
 8000534:	2b0b      	cmp	r3, #11
 8000536:	d002      	beq.n	800053e <modeRun+0x10e>
 8000538:	2b0c      	cmp	r3, #12
 800053a:	d010      	beq.n	800055e <modeRun+0x12e>
			case MAN_AMBER:
				state_1=MAN_GREEN;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 800053c:	e017      	b.n	800056e <modeRun+0x13e>
				state_1=MAN_AMBER;
 800053e:	4b6e      	ldr	r3, [pc, #440]	; (80006f8 <modeRun+0x2c8>)
 8000540:	220c      	movs	r2, #12
 8000542:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000544:	f242 7010 	movw	r0, #10000	; 0x2710
 8000548:	f000 fbf4 	bl	8000d34 <setTimer2>
				break;
 800054c:	e010      	b.n	8000570 <modeRun+0x140>
				state_1=MAN_RED;
 800054e:	4b6a      	ldr	r3, [pc, #424]	; (80006f8 <modeRun+0x2c8>)
 8000550:	220b      	movs	r2, #11
 8000552:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000554:	f242 7010 	movw	r0, #10000	; 0x2710
 8000558:	f000 fbec 	bl	8000d34 <setTimer2>
				break;
 800055c:	e008      	b.n	8000570 <modeRun+0x140>
				state_1=MAN_GREEN;
 800055e:	4b66      	ldr	r3, [pc, #408]	; (80006f8 <modeRun+0x2c8>)
 8000560:	220d      	movs	r2, #13
 8000562:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000564:	f242 7010 	movw	r0, #10000	; 0x2710
 8000568:	f000 fbe4 	bl	8000d34 <setTimer2>
				break;
 800056c:	e000      	b.n	8000570 <modeRun+0x140>
				break;
 800056e:	bf00      	nop
			}

			switch(state_2){
 8000570:	4b62      	ldr	r3, [pc, #392]	; (80006fc <modeRun+0x2cc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b0d      	cmp	r3, #13
 8000576:	d00e      	beq.n	8000596 <modeRun+0x166>
 8000578:	2b0d      	cmp	r3, #13
 800057a:	dc1e      	bgt.n	80005ba <modeRun+0x18a>
 800057c:	2b0b      	cmp	r3, #11
 800057e:	d002      	beq.n	8000586 <modeRun+0x156>
 8000580:	2b0c      	cmp	r3, #12
 8000582:	d010      	beq.n	80005a6 <modeRun+0x176>
			case MAN_AMBER:
				state_2=MAN_GREEN;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 8000584:	e019      	b.n	80005ba <modeRun+0x18a>
				state_2=MAN_AMBER;
 8000586:	4b5d      	ldr	r3, [pc, #372]	; (80006fc <modeRun+0x2cc>)
 8000588:	220c      	movs	r2, #12
 800058a:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800058c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000590:	f000 fbec 	bl	8000d6c <setTimer3>
				break;
 8000594:	e012      	b.n	80005bc <modeRun+0x18c>
				state_2=MAN_RED;
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <modeRun+0x2cc>)
 8000598:	220b      	movs	r2, #11
 800059a:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800059c:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a0:	f000 fbe4 	bl	8000d6c <setTimer3>
				break;
 80005a4:	e00a      	b.n	80005bc <modeRun+0x18c>
				state_2=MAN_GREEN;
 80005a6:	4b55      	ldr	r3, [pc, #340]	; (80006fc <modeRun+0x2cc>)
 80005a8:	220d      	movs	r2, #13
 80005aa:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80005ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80005b0:	f000 fbdc 	bl	8000d6c <setTimer3>
				break;
 80005b4:	e002      	b.n	80005bc <modeRun+0x18c>
			}
		}
 80005b6:	bf00      	nop
 80005b8:	e0cd      	b.n	8000756 <modeRun+0x326>
				break;
 80005ba:	bf00      	nop
		break;
 80005bc:	e0cb      	b.n	8000756 <modeRun+0x326>
	case MODE_3:
		if (isButton1Pressed()){
 80005be:	f7ff fdc5 	bl	800014c <isButton1Pressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <modeRun+0x19e>
			mode = MODE_1;
 80005c8:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <modeRun+0x2c4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 80005ce:	f7ff fdcf 	bl	8000170 <isButton2Pressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d06a      	beq.n	80006ae <modeRun+0x27e>
			switch(state_1){
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <modeRun+0x2c8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b17      	cmp	r3, #23
 80005de:	d013      	beq.n	8000608 <modeRun+0x1d8>
 80005e0:	2b17      	cmp	r3, #23
 80005e2:	dc2f      	bgt.n	8000644 <modeRun+0x214>
 80005e4:	2b15      	cmp	r3, #21
 80005e6:	d002      	beq.n	80005ee <modeRun+0x1be>
 80005e8:	2b16      	cmp	r3, #22
 80005ea:	d01f      	beq.n	800062c <modeRun+0x1fc>
				state_1 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
				setTimer2(250);
				break;
			default:
				break;
 80005ec:	e02a      	b.n	8000644 <modeRun+0x214>
				state_1 =TUN_GREEN;
 80005ee:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <modeRun+0x2c8>)
 80005f0:	2217      	movs	r2, #23
 80005f2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <modeRun+0x2d0>)
 80005fc:	f001 fec5 	bl	800238a <HAL_GPIO_WritePin>
				setTimer2(250);
 8000600:	20fa      	movs	r0, #250	; 0xfa
 8000602:	f000 fb97 	bl	8000d34 <setTimer2>
				break;
 8000606:	e01e      	b.n	8000646 <modeRun+0x216>
				state_1 =TUN_AMBER;
 8000608:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <modeRun+0x2c8>)
 800060a:	2216      	movs	r2, #22
 800060c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	483a      	ldr	r0, [pc, #232]	; (8000700 <modeRun+0x2d0>)
 8000616:	f001 feb8 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2108      	movs	r1, #8
 800061e:	4839      	ldr	r0, [pc, #228]	; (8000704 <modeRun+0x2d4>)
 8000620:	f001 feb3 	bl	800238a <HAL_GPIO_WritePin>
				setTimer2(250);
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 fb85 	bl	8000d34 <setTimer2>
				break;
 800062a:	e00c      	b.n	8000646 <modeRun+0x216>
				state_1 =TUN_RED;
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <modeRun+0x2c8>)
 800062e:	2215      	movs	r2, #21
 8000630:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2108      	movs	r1, #8
 8000636:	4833      	ldr	r0, [pc, #204]	; (8000704 <modeRun+0x2d4>)
 8000638:	f001 fea7 	bl	800238a <HAL_GPIO_WritePin>
				setTimer2(250);
 800063c:	20fa      	movs	r0, #250	; 0xfa
 800063e:	f000 fb79 	bl	8000d34 <setTimer2>
				break;
 8000642:	e000      	b.n	8000646 <modeRun+0x216>
				break;
 8000644:	bf00      	nop
			}

			switch(state_2){
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <modeRun+0x2cc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b17      	cmp	r3, #23
 800064c:	d012      	beq.n	8000674 <modeRun+0x244>
 800064e:	2b17      	cmp	r3, #23
 8000650:	dc2f      	bgt.n	80006b2 <modeRun+0x282>
 8000652:	2b15      	cmp	r3, #21
 8000654:	d002      	beq.n	800065c <modeRun+0x22c>
 8000656:	2b16      	cmp	r3, #22
 8000658:	d01d      	beq.n	8000696 <modeRun+0x266>
				state_2 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
				setTimer3(250);
				break;
			default:
				break;
 800065a:	e02a      	b.n	80006b2 <modeRun+0x282>
				state_2 =TUN_GREEN;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <modeRun+0x2cc>)
 800065e:	2217      	movs	r2, #23
 8000660:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4827      	ldr	r0, [pc, #156]	; (8000704 <modeRun+0x2d4>)
 8000668:	f001 fe8f 	bl	800238a <HAL_GPIO_WritePin>
				setTimer3(250);
 800066c:	20fa      	movs	r0, #250	; 0xfa
 800066e:	f000 fb7d 	bl	8000d6c <setTimer3>
				break;
 8000672:	e01f      	b.n	80006b4 <modeRun+0x284>
				state_2 =TUN_AMBER;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <modeRun+0x2cc>)
 8000676:	2216      	movs	r2, #22
 8000678:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <modeRun+0x2d4>)
 8000680:	f001 fe83 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	481e      	ldr	r0, [pc, #120]	; (8000704 <modeRun+0x2d4>)
 800068a:	f001 fe7e 	bl	800238a <HAL_GPIO_WritePin>
				setTimer3(250);
 800068e:	20fa      	movs	r0, #250	; 0xfa
 8000690:	f000 fb6c 	bl	8000d6c <setTimer3>
				break;
 8000694:	e00e      	b.n	80006b4 <modeRun+0x284>
				state_2 =TUN_RED;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <modeRun+0x2cc>)
 8000698:	2215      	movs	r2, #21
 800069a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <modeRun+0x2d4>)
 80006a2:	f001 fe72 	bl	800238a <HAL_GPIO_WritePin>
				setTimer3(250);
 80006a6:	20fa      	movs	r0, #250	; 0xfa
 80006a8:	f000 fb60 	bl	8000d6c <setTimer3>
				break;
 80006ac:	e002      	b.n	80006b4 <modeRun+0x284>
			}
		}
 80006ae:	bf00      	nop
 80006b0:	e000      	b.n	80006b4 <modeRun+0x284>
				break;
 80006b2:	bf00      	nop

		if (isButton3Pressed()){
 80006b4:	f7ff fd6e 	bl	8000194 <isButton3Pressed>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d048      	beq.n	8000750 <modeRun+0x320>
			switch (state_1){
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <modeRun+0x2c8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b17      	cmp	r3, #23
 80006c4:	d006      	beq.n	80006d4 <modeRun+0x2a4>
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	dc44      	bgt.n	8000754 <modeRun+0x324>
 80006ca:	2b15      	cmp	r3, #21
 80006cc:	d02e      	beq.n	800072c <modeRun+0x2fc>
 80006ce:	2b16      	cmp	r3, #22
 80006d0:	d01c      	beq.n	800070c <modeRun+0x2dc>
				if (redTime <99) redTime++;
				else redTime =1;
				uartRun();
				break;
			default:
				break;
 80006d2:	e03f      	b.n	8000754 <modeRun+0x324>
				if (greenTime <99) greenTime++;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <modeRun+0x2d8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b62      	cmp	r3, #98	; 0x62
 80006da:	dc05      	bgt.n	80006e8 <modeRun+0x2b8>
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <modeRun+0x2d8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a09      	ldr	r2, [pc, #36]	; (8000708 <modeRun+0x2d8>)
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e002      	b.n	80006ee <modeRun+0x2be>
				else greenTime =1;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <modeRun+0x2d8>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
				uartRun();
 80006ee:	f001 f9d1 	bl	8001a94 <uartRun>
				break;
 80006f2:	e030      	b.n	8000756 <modeRun+0x326>
 80006f4:	20000104 	.word	0x20000104
 80006f8:	200000fc 	.word	0x200000fc
 80006fc:	20000100 	.word	0x20000100
 8000700:	40010800 	.word	0x40010800
 8000704:	40010c00 	.word	0x40010c00
 8000708:	20000058 	.word	0x20000058
				if (amberTime <99) amberTime++;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <modeRun+0x32c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b62      	cmp	r3, #98	; 0x62
 8000712:	dc05      	bgt.n	8000720 <modeRun+0x2f0>
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <modeRun+0x32c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <modeRun+0x32c>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	e002      	b.n	8000726 <modeRun+0x2f6>
				else amberTime =1;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <modeRun+0x32c>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
				uartRun();
 8000726:	f001 f9b5 	bl	8001a94 <uartRun>
				break;
 800072a:	e014      	b.n	8000756 <modeRun+0x326>
				if (redTime <99) redTime++;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <modeRun+0x330>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b62      	cmp	r3, #98	; 0x62
 8000732:	dc05      	bgt.n	8000740 <modeRun+0x310>
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <modeRun+0x330>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <modeRun+0x330>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	e002      	b.n	8000746 <modeRun+0x316>
				else redTime =1;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <modeRun+0x330>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
				uartRun();
 8000746:	f001 f9a5 	bl	8001a94 <uartRun>
				break;
 800074a:	e004      	b.n	8000756 <modeRun+0x326>
		break;
 800074c:	bf00      	nop
 800074e:	e002      	b.n	8000756 <modeRun+0x326>
			}
		}
 8000750:	bf00      	nop
 8000752:	e000      	b.n	8000756 <modeRun+0x326>
				break;
 8000754:	bf00      	nop
	}
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000054 	.word	0x20000054
 8000760:	20000050 	.word	0x20000050

08000764 <ledBlink>:
int mode = 0;
int redTime = 5;
int amberTime = 2;
int greenTime = 3;

void ledBlink(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if (timer1_flag ==1){
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <ledBlink+0x20>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d106      	bne.n	800077e <ledBlink+0x1a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000770:	2120      	movs	r1, #32
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <ledBlink+0x24>)
 8000774:	f001 fe21 	bl	80023ba <HAL_GPIO_TogglePin>
		setTimer1(250);
 8000778:	20fa      	movs	r0, #250	; 0xfa
 800077a:	f000 fabf 	bl	8000cfc <setTimer1>
	}
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000010c 	.word	0x2000010c
 8000788:	40010800 	.word	0x40010800

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f001 fa40 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f82a 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f956 	bl	8000a48 <MX_GPIO_Init>
  MX_TIM2_Init();
 800079c:	f000 f868 	bl	8000870 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 f928 	bl	80009f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007a4:	f000 f8b0 	bl	8000908 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <main+0x58>)
 80007aa:	f002 fa89 	bl	8002cc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ae:	2100      	movs	r1, #0
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <main+0x5c>)
 80007b2:	f002 fb2f 	bl	8002e14 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timerInit();
 80007b6:	f000 fb9d 	bl	8000ef4 <timerInit>
  while (1)
  {
	  ledBlink();
 80007ba:	f7ff ffd3 	bl	8000764 <ledBlink>
	  modeRun();
 80007be:	f7ff fe37 	bl	8000430 <modeRun>
	  pedes_light_fsm();
 80007c2:	f000 f9c1 	bl	8000b48 <pedes_light_fsm>
	  fsm_automatic_run1();
 80007c6:	f000 fdbb 	bl	8001340 <fsm_automatic_run1>
	  fsm_automatic_run2();
 80007ca:	f000 fe67 	bl	800149c <fsm_automatic_run2>
	  fsm_manual_run1();
 80007ce:	f000 ff0f 	bl	80015f0 <fsm_manual_run1>
	  fsm_manual_run2();
 80007d2:	f000 ffc3 	bl	800175c <fsm_manual_run2>
	  fsm_tuning_run1();
 80007d6:	f001 f869 	bl	80018ac <fsm_tuning_run1>
	  fsm_tuning_run2();
 80007da:	f001 f8e3 	bl	80019a4 <fsm_tuning_run2>
	  buzzerRun();
 80007de:	f7ff fde3 	bl	80003a8 <buzzerRun>
	  ledBlink();
 80007e2:	e7ea      	b.n	80007ba <main+0x2e>
 80007e4:	200001a0 	.word	0x200001a0
 80007e8:	20000158 	.word	0x20000158

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	; 0x40
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fe70 	bl	80044e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800081e:	2300      	movs	r3, #0
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000822:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fddd 	bl	80023ec <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000838:	f000 f980 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f848 	bl	80028ec <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000862:	f000 f96b 	bl	8000b3c <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3740      	adds	r7, #64	; 0x40
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_TIM2_Init+0x94>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_TIM2_Init+0x94>)
 8000896:	f242 720f 	movw	r2, #9999	; 0x270f
 800089a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_TIM2_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM2_Init+0x94>)
 80008a4:	223f      	movs	r2, #63	; 0x3f
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_TIM2_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b6:	f002 f9b3 	bl	8002c20 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c0:	f000 f93c 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM2_Init+0x94>)
 80008d2:	f002 fd07 	bl	80032e4 <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f92e 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM2_Init+0x94>)
 80008ee:	f003 f885 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f920 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200001a0 	.word	0x200001a0

08000908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <MX_TIM3_Init+0xe4>)
 800093a:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <MX_TIM3_Init+0xe8>)
 800093c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000940:	223f      	movs	r2, #63	; 0x3f
 8000942:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_TIM3_Init+0xe4>)
 800094c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_TIM3_Init+0xe4>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800095e:	4823      	ldr	r0, [pc, #140]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000960:	f002 f95e 	bl	8002c20 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800096a:	f000 f8e7 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000978:	4619      	mov	r1, r3
 800097a:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_TIM3_Init+0xe4>)
 800097c:	f002 fcb2 	bl	80032e4 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000986:	f000 f8d9 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098a:	4818      	ldr	r0, [pc, #96]	; (80009ec <MX_TIM3_Init+0xe4>)
 800098c:	f002 f9ea 	bl	8002d64 <HAL_TIM_PWM_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000996:	f000 f8d1 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	4619      	mov	r1, r3
 80009a8:	4810      	ldr	r0, [pc, #64]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009aa:	f003 f827 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009b4:	f000 f8c2 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b8:	2360      	movs	r3, #96	; 0x60
 80009ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009d0:	f002 fbca 	bl	8003168 <HAL_TIM_PWM_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009da:	f000 f8af 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009e0:	f000 fbb2 	bl	8001148 <HAL_TIM_MspPostInit>

}
 80009e4:	bf00      	nop
 80009e6:	3738      	adds	r7, #56	; 0x38
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000158 	.word	0x20000158
 80009f0:	40000400 	.word	0x40000400

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f003 f856 	bl	8003adc <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f881 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001f4 	.word	0x200001f4
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000a92:	4822      	ldr	r0, [pc, #136]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000a94:	f001 fc79 	bl	800238a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a9e:	4820      	ldr	r0, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000aa0:	f001 fc73 	bl	800238a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDES_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDES_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000aa4:	2313      	movs	r3, #19
 8000aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000ab8:	f001 facc 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin PLED_GREEN_Pin TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin;
 8000abc:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000ad6:	f001 fabd 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000ada:	2301      	movs	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000aee:	f001 fab1 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLED_RED_Pin TRAFFIC1_0_Pin TRAFFIC2_0_Pin TRAFFIC2_1_Pin */
  GPIO_InitStruct.Pin = PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin;
 8000af2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000b0c:	f001 faa2 	bl	8002054 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000b2c:	f000 f9fc 	bl	8000f28 <timerRun>
	getKeyInput();
 8000b30:	f7ff fbb8 	bl	80002a4 <getKeyInput>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <pedes_light_fsm>:
#include "pedestrian_light.h"

int pedes_state = PEDES_INIT;
int pedes_flag =0;

void pedes_light_fsm(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	switch(pedes_state){
 8000b4c:	4b61      	ldr	r3, [pc, #388]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	f200 80b5 	bhi.w	8000cc0 <pedes_light_fsm+0x178>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <pedes_light_fsm+0x14>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000c73 	.word	0x08000c73
 8000b68:	08000c1f 	.word	0x08000c1f
	case PEDES_INIT:
		pedes_state = PEDES_OFF;
 8000b6c:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

		break;
 8000b72:	e0ac      	b.n	8000cce <pedes_light_fsm+0x186>
	case PEDES_OFF:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	4857      	ldr	r0, [pc, #348]	; (8000cd8 <pedes_light_fsm+0x190>)
 8000b7c:	f001 fc05 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	4855      	ldr	r0, [pc, #340]	; (8000cdc <pedes_light_fsm+0x194>)
 8000b88:	f001 fbff 	bl	800238a <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_OFF;
 8000b8c:	4b54      	ldr	r3, [pc, #336]	; (8000ce0 <pedes_light_fsm+0x198>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]

		if (isButtonPedesPressed()){
 8000b92:	f7ff fb11 	bl	80001b8 <isButtonPedesPressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 8093 	beq.w	8000cc4 <pedes_light_fsm+0x17c>
			if (state_1 == AUTO_RED){
 8000b9e:	4b51      	ldr	r3, [pc, #324]	; (8000ce4 <pedes_light_fsm+0x19c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d109      	bne.n	8000bba <pedes_light_fsm+0x72>
				setTimer4(get_timer2_counter());
 8000ba6:	f000 f989 	bl	8000ebc <get_timer2_counter>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f8f9 	bl	8000da4 <setTimer4>
				pedes_state = PEDES_GREEN;
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e021      	b.n	8000bfe <pedes_light_fsm+0xb6>
			}else if (state_1 == AUTO_GREEN){
 8000bba:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <pedes_light_fsm+0x19c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d110      	bne.n	8000be4 <pedes_light_fsm+0x9c>
				setTimer4(get_timer2_counter() + amberTime*1000);
 8000bc2:	f000 f97b 	bl	8000ebc <get_timer2_counter>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <pedes_light_fsm+0x1a0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd0:	fb01 f303 	mul.w	r3, r1, r3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f8e4 	bl	8000da4 <setTimer4>
				pedes_state = PEDES_RED;
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e00c      	b.n	8000bfe <pedes_light_fsm+0xb6>
			}else if (state_1 == AUTO_AMBER){
 8000be4:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <pedes_light_fsm+0x19c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d108      	bne.n	8000bfe <pedes_light_fsm+0xb6>
				setTimer4(get_timer2_counter());
 8000bec:	f000 f966 	bl	8000ebc <get_timer2_counter>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f8d6 	bl	8000da4 <setTimer4>
				pedes_state = PEDES_RED;
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	601a      	str	r2, [r3, #0]
			}

			setTimer5((redTime + amberTime + greenTime) *2000);
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <pedes_light_fsm+0x1a4>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <pedes_light_fsm+0x1a0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	441a      	add	r2, r3
 8000c08:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c12:	fb02 f303 	mul.w	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f8e0 	bl	8000ddc <setTimer5>
		}
		break;
 8000c1c:	e052      	b.n	8000cc4 <pedes_light_fsm+0x17c>
	case PEDES_GREEN:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <pedes_light_fsm+0x190>)
 8000c26:	f001 fbb0 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	482a      	ldr	r0, [pc, #168]	; (8000cdc <pedes_light_fsm+0x194>)
 8000c32:	f001 fbaa 	bl	800238a <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_ON;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <pedes_light_fsm+0x198>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

		if (timer4_flag ==1){
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <pedes_light_fsm+0x1ac>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10e      	bne.n	8000c62 <pedes_light_fsm+0x11a>
			pedes_state = PEDES_RED;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	601a      	str	r2, [r3, #0]
			setTimer4((greenTime +amberTime) *1000);
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <pedes_light_fsm+0x1a0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f8a1 	bl	8000da4 <setTimer4>
		}
		if (timer5_flag ==1){
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <pedes_light_fsm+0x1b0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d12e      	bne.n	8000cc8 <pedes_light_fsm+0x180>
			pedes_state = PEDES_OFF;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c70:	e02a      	b.n	8000cc8 <pedes_light_fsm+0x180>
	case PEDES_RED:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <pedes_light_fsm+0x190>)
 8000c7a:	f001 fb86 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <pedes_light_fsm+0x194>)
 8000c86:	f001 fb80 	bl	800238a <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_OFF;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <pedes_light_fsm+0x198>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]

		if (timer4_flag ==1){
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <pedes_light_fsm+0x1ac>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10b      	bne.n	8000cb0 <pedes_light_fsm+0x168>
			pedes_state = PEDES_GREEN;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	601a      	str	r2, [r3, #0]
			setTimer4(redTime *1000);
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <pedes_light_fsm+0x1a4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f87a 	bl	8000da4 <setTimer4>
		}
		if (timer5_flag ==1){
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <pedes_light_fsm+0x1b0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d109      	bne.n	8000ccc <pedes_light_fsm+0x184>
			pedes_state = PEDES_OFF;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
		}
		break;
 8000cbe:	e005      	b.n	8000ccc <pedes_light_fsm+0x184>
	default:
		break;
 8000cc0:	bf00      	nop
 8000cc2:	e004      	b.n	8000cce <pedes_light_fsm+0x186>
		break;
 8000cc4:	bf00      	nop
 8000cc6:	e002      	b.n	8000cce <pedes_light_fsm+0x186>
		break;
 8000cc8:	bf00      	nop
 8000cca:	e000      	b.n	8000cce <pedes_light_fsm+0x186>
		break;
 8000ccc:	bf00      	nop
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000108 	.word	0x20000108
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	200000f8 	.word	0x200000f8
 8000ce4:	200000fc 	.word	0x200000fc
 8000ce8:	20000054 	.word	0x20000054
 8000cec:	20000050 	.word	0x20000050
 8000cf0:	20000058 	.word	0x20000058
 8000cf4:	20000124 	.word	0x20000124
 8000cf8:	2000012c 	.word	0x2000012c

08000cfc <setTimer1>:
int timer7_counter =0;

int timer8_flag =0;
int timer8_counter =0;

void setTimer1(int duration){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <setTimer1+0x2c>)
 8000d08:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0c:	1092      	asrs	r2, r2, #2
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <setTimer1+0x30>)
 8000d14:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <setTimer1+0x34>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	66666667 	.word	0x66666667
 8000d2c:	20000110 	.word	0x20000110
 8000d30:	2000010c 	.word	0x2000010c

08000d34 <setTimer2>:

void setTimer2(int duration){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <setTimer2+0x2c>)
 8000d40:	fb82 1203 	smull	r1, r2, r2, r3
 8000d44:	1092      	asrs	r2, r2, #2
 8000d46:	17db      	asrs	r3, r3, #31
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <setTimer2+0x30>)
 8000d4c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <setTimer2+0x34>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	66666667 	.word	0x66666667
 8000d64:	20000118 	.word	0x20000118
 8000d68:	20000114 	.word	0x20000114

08000d6c <setTimer3>:
void setTimer3(int duration){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <setTimer3+0x2c>)
 8000d78:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7c:	1092      	asrs	r2, r2, #2
 8000d7e:	17db      	asrs	r3, r3, #31
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <setTimer3+0x30>)
 8000d84:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <setTimer3+0x34>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	66666667 	.word	0x66666667
 8000d9c:	20000120 	.word	0x20000120
 8000da0:	2000011c 	.word	0x2000011c

08000da4 <setTimer4>:
void setTimer4(int duration){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <setTimer4+0x2c>)
 8000db0:	fb82 1203 	smull	r1, r2, r2, r3
 8000db4:	1092      	asrs	r2, r2, #2
 8000db6:	17db      	asrs	r3, r3, #31
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <setTimer4+0x30>)
 8000dbc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <setTimer4+0x34>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	66666667 	.word	0x66666667
 8000dd4:	20000128 	.word	0x20000128
 8000dd8:	20000124 	.word	0x20000124

08000ddc <setTimer5>:
void setTimer5(int duration){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <setTimer5+0x2c>)
 8000de8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dec:	1092      	asrs	r2, r2, #2
 8000dee:	17db      	asrs	r3, r3, #31
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <setTimer5+0x30>)
 8000df4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <setTimer5+0x34>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	66666667 	.word	0x66666667
 8000e0c:	20000130 	.word	0x20000130
 8000e10:	2000012c 	.word	0x2000012c

08000e14 <setTimer6>:
void setTimer6(int duration){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <setTimer6+0x2c>)
 8000e20:	fb82 1203 	smull	r1, r2, r2, r3
 8000e24:	1092      	asrs	r2, r2, #2
 8000e26:	17db      	asrs	r3, r3, #31
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <setTimer6+0x30>)
 8000e2c:	6013      	str	r3, [r2, #0]
	timer6_flag =0;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <setTimer6+0x34>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	66666667 	.word	0x66666667
 8000e44:	20000138 	.word	0x20000138
 8000e48:	20000134 	.word	0x20000134

08000e4c <setTimer7>:
void setTimer7(int duration){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <setTimer7+0x2c>)
 8000e58:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5c:	1092      	asrs	r2, r2, #2
 8000e5e:	17db      	asrs	r3, r3, #31
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <setTimer7+0x30>)
 8000e64:	6013      	str	r3, [r2, #0]
	timer7_flag =0;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <setTimer7+0x34>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	66666667 	.word	0x66666667
 8000e7c:	20000140 	.word	0x20000140
 8000e80:	2000013c 	.word	0x2000013c

08000e84 <setTimer8>:

void setTimer8(int duration){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <setTimer8+0x2c>)
 8000e90:	fb82 1203 	smull	r1, r2, r2, r3
 8000e94:	1092      	asrs	r2, r2, #2
 8000e96:	17db      	asrs	r3, r3, #31
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <setTimer8+0x30>)
 8000e9c:	6013      	str	r3, [r2, #0]
	timer8_flag =0;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <setTimer8+0x34>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667
 8000eb4:	20000148 	.word	0x20000148
 8000eb8:	20000144 	.word	0x20000144

08000ebc <get_timer2_counter>:
int get_timer2_counter(){
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	return timer2_counter*TICK;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <get_timer2_counter+0x18>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	20000118 	.word	0x20000118

08000ed8 <get_timer4_counter>:

int get_timer4_counter(){
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	return timer4_counter*TICK;
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <get_timer4_counter+0x18>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000128 	.word	0x20000128

08000ef4 <timerInit>:

void timerInit(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	setTimer1(30);
 8000ef8:	201e      	movs	r0, #30
 8000efa:	f7ff feff 	bl	8000cfc <setTimer1>
	setTimer2(50);
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f7ff ff18 	bl	8000d34 <setTimer2>
	setTimer3(70);
 8000f04:	2046      	movs	r0, #70	; 0x46
 8000f06:	f7ff ff31 	bl	8000d6c <setTimer3>
	setTimer4(110);
 8000f0a:	206e      	movs	r0, #110	; 0x6e
 8000f0c:	f7ff ff4a 	bl	8000da4 <setTimer4>
	setTimer5(130);
 8000f10:	2082      	movs	r0, #130	; 0x82
 8000f12:	f7ff ff63 	bl	8000ddc <setTimer5>
	setTimer6(170);
 8000f16:	20aa      	movs	r0, #170	; 0xaa
 8000f18:	f7ff ff7c 	bl	8000e14 <setTimer6>
	setTimer7(190);
 8000f1c:	20be      	movs	r0, #190	; 0xbe
 8000f1e:	f7ff ff95 	bl	8000e4c <setTimer7>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <timerRun>:

void timerRun(){
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <timerRun+0x10c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dd0b      	ble.n	8000f4c <timerRun+0x24>
		timer1_counter--;
 8000f34:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <timerRun+0x10c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4a3e      	ldr	r2, [pc, #248]	; (8001034 <timerRun+0x10c>)
 8000f3c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <timerRun+0x10c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	dc02      	bgt.n	8000f4c <timerRun+0x24>
			timer1_flag = 1;
 8000f46:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <timerRun+0x110>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <timerRun+0x114>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd0b      	ble.n	8000f6c <timerRun+0x44>
		timer2_counter--;
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <timerRun+0x114>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a38      	ldr	r2, [pc, #224]	; (800103c <timerRun+0x114>)
 8000f5c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <timerRun+0x114>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	dc02      	bgt.n	8000f6c <timerRun+0x44>
			timer2_flag = 1;
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <timerRun+0x118>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <timerRun+0x11c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd0b      	ble.n	8000f8c <timerRun+0x64>
		timer3_counter--;
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <timerRun+0x11c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <timerRun+0x11c>)
 8000f7c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <timerRun+0x11c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	dc02      	bgt.n	8000f8c <timerRun+0x64>
			timer3_flag = 1;
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <timerRun+0x120>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <timerRun+0x124>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd0b      	ble.n	8000fac <timerRun+0x84>
		timer4_counter--;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <timerRun+0x124>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	4a2c      	ldr	r2, [pc, #176]	; (800104c <timerRun+0x124>)
 8000f9c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <timerRun+0x124>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	dc02      	bgt.n	8000fac <timerRun+0x84>
			timer4_flag = 1;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <timerRun+0x128>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <timerRun+0x12c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd0b      	ble.n	8000fcc <timerRun+0xa4>
		timer5_counter--;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <timerRun+0x12c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	4a26      	ldr	r2, [pc, #152]	; (8001054 <timerRun+0x12c>)
 8000fbc:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <timerRun+0x12c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dc02      	bgt.n	8000fcc <timerRun+0xa4>
			timer5_flag = 1;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <timerRun+0x130>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <timerRun+0x134>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	dd0b      	ble.n	8000fec <timerRun+0xc4>
		timer6_counter--;
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <timerRun+0x134>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4a20      	ldr	r2, [pc, #128]	; (800105c <timerRun+0x134>)
 8000fdc:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <timerRun+0x134>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	dc02      	bgt.n	8000fec <timerRun+0xc4>
			timer6_flag = 1;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <timerRun+0x138>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0){
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <timerRun+0x13c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dd0b      	ble.n	800100c <timerRun+0xe4>
		timer7_counter--;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <timerRun+0x13c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <timerRun+0x13c>)
 8000ffc:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0){
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <timerRun+0x13c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	dc02      	bgt.n	800100c <timerRun+0xe4>
			timer7_flag = 1;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <timerRun+0x140>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer8_counter > 0){
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <timerRun+0x144>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dd0b      	ble.n	800102c <timerRun+0x104>
			timer8_counter--;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <timerRun+0x144>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <timerRun+0x144>)
 800101c:	6013      	str	r3, [r2, #0]
			if(timer8_counter <= 0){
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <timerRun+0x144>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dc02      	bgt.n	800102c <timerRun+0x104>
				timer8_flag = 1;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <timerRun+0x148>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
			}
	}
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	20000110 	.word	0x20000110
 8001038:	2000010c 	.word	0x2000010c
 800103c:	20000118 	.word	0x20000118
 8001040:	20000114 	.word	0x20000114
 8001044:	20000120 	.word	0x20000120
 8001048:	2000011c 	.word	0x2000011c
 800104c:	20000128 	.word	0x20000128
 8001050:	20000124 	.word	0x20000124
 8001054:	20000130 	.word	0x20000130
 8001058:	2000012c 	.word	0x2000012c
 800105c:	20000138 	.word	0x20000138
 8001060:	20000134 	.word	0x20000134
 8001064:	20000140 	.word	0x20000140
 8001068:	2000013c 	.word	0x2000013c
 800106c:	20000148 	.word	0x20000148
 8001070:	20000144 	.word	0x20000144

08001074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_MspInit+0x5c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_MspInit+0x5c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_MspInit+0x5c>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_MspInit+0x60>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_MspInit+0x60>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d114      	bne.n	8001114 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_TIM_Base_MspInit+0x68>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_TIM_Base_MspInit+0x68>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_TIM_Base_MspInit+0x68>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	201c      	movs	r0, #28
 8001108:	f000 febd 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800110c:	201c      	movs	r0, #28
 800110e:	f000 fed6 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001112:	e010      	b.n	8001136 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_TIM_Base_MspInit+0x6c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10b      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_TIM_Base_MspInit+0x68>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_TIM_Base_MspInit+0x68>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_TIM_Base_MspInit+0x68>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	40000400 	.word	0x40000400

08001148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_TIM_MspPostInit+0x58>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d117      	bne.n	8001198 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_TIM_MspPostInit+0x5c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_TIM_MspPostInit+0x5c>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_TIM_MspPostInit+0x5c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2302      	movs	r3, #2
 800118a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_TIM_MspPostInit+0x60>)
 8001194:	f000 ff5e 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40000400 	.word	0x40000400
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010800 	.word	0x40010800

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_UART_MspInit+0x98>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d137      	bne.n	800123c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_UART_MspInit+0x9c>)
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_UART_MspInit+0x9c>)
 80011d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d6:	61d3      	str	r3, [r2, #28]
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_UART_MspInit+0x9c>)
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_UART_MspInit+0x9c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a17      	ldr	r2, [pc, #92]	; (8001248 <HAL_UART_MspInit+0x9c>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_UART_MspInit+0x9c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011fc:	2304      	movs	r3, #4
 80011fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <HAL_UART_MspInit+0xa0>)
 8001210:	f000 ff20 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001214:	2308      	movs	r3, #8
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <HAL_UART_MspInit+0xa0>)
 8001228:	f000 ff14 	bl	8002054 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2026      	movs	r0, #38	; 0x26
 8001232:	f000 fe28 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001236:	2026      	movs	r0, #38	; 0x26
 8001238:	f000 fe41 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40004400 	.word	0x40004400
 8001248:	40021000 	.word	0x40021000
 800124c:	40010800 	.word	0x40010800

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001296:	f000 fd03 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM2_IRQHandler+0x10>)
 80012a6:	f001 fe57 	bl	8002f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200001a0 	.word	0x200001a0

080012b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <USART2_IRQHandler+0x10>)
 80012ba:	f002 fcef 	bl	8003c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200001f4 	.word	0x200001f4

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f003 f8c8 	bl	800448c <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20005000 	.word	0x20005000
 8001328:	00000400 	.word	0x00000400
 800132c:	2000014c 	.word	0x2000014c
 8001330:	20000250 	.word	0x20000250

08001334 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <fsm_automatic_run1>:
 *      Author: duyvt
 */

#include "traffic_automatic.h"

void fsm_automatic_run1(){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	switch(state_1){
 8001344:	4b4d      	ldr	r3, [pc, #308]	; (800147c <fsm_automatic_run1+0x13c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b03      	cmp	r3, #3
 800134a:	f200 808d 	bhi.w	8001468 <fsm_automatic_run1+0x128>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <fsm_automatic_run1+0x14>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001365 	.word	0x08001365
 8001358:	0800137f 	.word	0x0800137f
 800135c:	0800141b 	.word	0x0800141b
 8001360:	080013cd 	.word	0x080013cd
	case INIT:
		state_1 = AUTO_RED;
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <fsm_automatic_run1+0x13c>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
		setTimer2(redTime*1000);
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <fsm_automatic_run1+0x140>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fcdc 	bl	8000d34 <setTimer2>
		break;
 800137c:	e07b      	b.n	8001476 <fsm_automatic_run1+0x136>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800137e:	2201      	movs	r2, #1
 8001380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001384:	483f      	ldr	r0, [pc, #252]	; (8001484 <fsm_automatic_run1+0x144>)
 8001386:	f001 f800 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2108      	movs	r1, #8
 800138e:	483e      	ldr	r0, [pc, #248]	; (8001488 <fsm_automatic_run1+0x148>)
 8001390:	f000 fffb 	bl	800238a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001394:	4b3d      	ldr	r3, [pc, #244]	; (800148c <fsm_automatic_run1+0x14c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10b      	bne.n	80013b4 <fsm_automatic_run1+0x74>
			state_1 = AUTO_GREEN;
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <fsm_automatic_run1+0x13c>)
 800139e:	2203      	movs	r2, #3
 80013a0:	601a      	str	r2, [r3, #0]
			setTimer2(greenTime*1000);
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <fsm_automatic_run1+0x150>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fcc0 	bl	8000d34 <setTimer2>
		}

		if (mode == MODE_2){
 80013b4:	4b37      	ldr	r3, [pc, #220]	; (8001494 <fsm_automatic_run1+0x154>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d157      	bne.n	800146c <fsm_automatic_run1+0x12c>
			state_1 = MAN_RED;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <fsm_automatic_run1+0x13c>)
 80013be:	220b      	movs	r2, #11
 80013c0:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 80013c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80013c6:	f7ff fcb5 	bl	8000d34 <setTimer2>
		}
		break;
 80013ca:	e04f      	b.n	800146c <fsm_automatic_run1+0x12c>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d2:	482c      	ldr	r0, [pc, #176]	; (8001484 <fsm_automatic_run1+0x144>)
 80013d4:	f000 ffd9 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	2108      	movs	r1, #8
 80013dc:	482a      	ldr	r0, [pc, #168]	; (8001488 <fsm_automatic_run1+0x148>)
 80013de:	f000 ffd4 	bl	800238a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <fsm_automatic_run1+0x14c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10b      	bne.n	8001402 <fsm_automatic_run1+0xc2>
			state_1 = AUTO_AMBER;
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <fsm_automatic_run1+0x13c>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	601a      	str	r2, [r3, #0]
			setTimer2(amberTime*1000);
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <fsm_automatic_run1+0x158>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fc99 	bl	8000d34 <setTimer2>
		}

		if (mode == MODE_2){
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <fsm_automatic_run1+0x154>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d132      	bne.n	8001470 <fsm_automatic_run1+0x130>
			state_1 = MAN_RED;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <fsm_automatic_run1+0x13c>)
 800140c:	220b      	movs	r2, #11
 800140e:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8001410:	f242 7010 	movw	r0, #10000	; 0x2710
 8001414:	f7ff fc8e 	bl	8000d34 <setTimer2>
		}
		break;
 8001418:	e02a      	b.n	8001470 <fsm_automatic_run1+0x130>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001420:	4818      	ldr	r0, [pc, #96]	; (8001484 <fsm_automatic_run1+0x144>)
 8001422:	f000 ffb2 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 8001426:	2201      	movs	r2, #1
 8001428:	2108      	movs	r1, #8
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <fsm_automatic_run1+0x148>)
 800142c:	f000 ffad 	bl	800238a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <fsm_automatic_run1+0x14c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10b      	bne.n	8001450 <fsm_automatic_run1+0x110>
			state_1 = AUTO_RED;
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <fsm_automatic_run1+0x13c>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <fsm_automatic_run1+0x140>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc72 	bl	8000d34 <setTimer2>
		}

		if (mode == MODE_2){
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <fsm_automatic_run1+0x154>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d10d      	bne.n	8001474 <fsm_automatic_run1+0x134>
			state_1 = MAN_RED;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <fsm_automatic_run1+0x13c>)
 800145a:	220b      	movs	r2, #11
 800145c:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 800145e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001462:	f7ff fc67 	bl	8000d34 <setTimer2>
		}
		break;
 8001466:	e005      	b.n	8001474 <fsm_automatic_run1+0x134>
	default:
		break;
 8001468:	bf00      	nop
 800146a:	e004      	b.n	8001476 <fsm_automatic_run1+0x136>
		break;
 800146c:	bf00      	nop
 800146e:	e002      	b.n	8001476 <fsm_automatic_run1+0x136>
		break;
 8001470:	bf00      	nop
 8001472:	e000      	b.n	8001476 <fsm_automatic_run1+0x136>
		break;
 8001474:	bf00      	nop
	}
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000fc 	.word	0x200000fc
 8001480:	20000050 	.word	0x20000050
 8001484:	40010800 	.word	0x40010800
 8001488:	40010c00 	.word	0x40010c00
 800148c:	20000114 	.word	0x20000114
 8001490:	20000058 	.word	0x20000058
 8001494:	20000104 	.word	0x20000104
 8001498:	20000054 	.word	0x20000054

0800149c <fsm_automatic_run2>:

void fsm_automatic_run2(){
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	switch(state_2){
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <fsm_automatic_run2+0x138>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	f200 808c 	bhi.w	80015c2 <fsm_automatic_run2+0x126>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <fsm_automatic_run2+0x14>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	08001577 	.word	0x08001577
 80014b8:	0800152b 	.word	0x0800152b
 80014bc:	080014db 	.word	0x080014db
	case INIT:
		state_2 = AUTO_GREEN;
 80014c0:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <fsm_automatic_run2+0x138>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	601a      	str	r2, [r3, #0]
		setTimer3(greenTime*1000);
 80014c6:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <fsm_automatic_run2+0x13c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc4a 	bl	8000d6c <setTimer3>
		break;
 80014d8:	e07a      	b.n	80015d0 <fsm_automatic_run2+0x134>
	case AUTO_GREEN:
		ledBlink();
 80014da:	f7ff f943 	bl	8000764 <ledBlink>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2120      	movs	r1, #32
 80014e2:	483e      	ldr	r0, [pc, #248]	; (80015dc <fsm_automatic_run2+0x140>)
 80014e4:	f000 ff51 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2110      	movs	r1, #16
 80014ec:	483b      	ldr	r0, [pc, #236]	; (80015dc <fsm_automatic_run2+0x140>)
 80014ee:	f000 ff4c 	bl	800238a <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <fsm_automatic_run2+0x144>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d10b      	bne.n	8001512 <fsm_automatic_run2+0x76>
			state_2 = AUTO_AMBER;
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <fsm_automatic_run2+0x138>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	601a      	str	r2, [r3, #0]
			setTimer3(amberTime*1000);
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <fsm_automatic_run2+0x148>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc2d 	bl	8000d6c <setTimer3>
		}

		if (mode == MODE_2){
 8001512:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <fsm_automatic_run2+0x14c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d155      	bne.n	80015c6 <fsm_automatic_run2+0x12a>
			state_2 = MAN_GREEN;
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <fsm_automatic_run2+0x138>)
 800151c:	220d      	movs	r2, #13
 800151e:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8001520:	f242 7010 	movw	r0, #10000	; 0x2710
 8001524:	f7ff fc22 	bl	8000d6c <setTimer3>
		}
		break;
 8001528:	e04d      	b.n	80015c6 <fsm_automatic_run2+0x12a>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 800152a:	2201      	movs	r2, #1
 800152c:	2110      	movs	r1, #16
 800152e:	482b      	ldr	r0, [pc, #172]	; (80015dc <fsm_automatic_run2+0x140>)
 8001530:	f000 ff2b 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001534:	2201      	movs	r2, #1
 8001536:	2120      	movs	r1, #32
 8001538:	4828      	ldr	r0, [pc, #160]	; (80015dc <fsm_automatic_run2+0x140>)
 800153a:	f000 ff26 	bl	800238a <HAL_GPIO_WritePin>
		if(timer3_flag ==1){
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <fsm_automatic_run2+0x144>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10b      	bne.n	800155e <fsm_automatic_run2+0xc2>
			state_2 = AUTO_RED;
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <fsm_automatic_run2+0x138>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
			setTimer3(redTime*1000);
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <fsm_automatic_run2+0x150>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fc07 	bl	8000d6c <setTimer3>
		}

		if (mode == MODE_2){
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <fsm_automatic_run2+0x14c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d131      	bne.n	80015ca <fsm_automatic_run2+0x12e>
			state_2 = MAN_GREEN;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <fsm_automatic_run2+0x138>)
 8001568:	220d      	movs	r2, #13
 800156a:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 800156c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001570:	f7ff fbfc 	bl	8000d6c <setTimer3>
		}
		break;
 8001574:	e029      	b.n	80015ca <fsm_automatic_run2+0x12e>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001576:	2201      	movs	r2, #1
 8001578:	2120      	movs	r1, #32
 800157a:	4818      	ldr	r0, [pc, #96]	; (80015dc <fsm_automatic_run2+0x140>)
 800157c:	f000 ff05 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	4815      	ldr	r0, [pc, #84]	; (80015dc <fsm_automatic_run2+0x140>)
 8001586:	f000 ff00 	bl	800238a <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <fsm_automatic_run2+0x144>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10b      	bne.n	80015aa <fsm_automatic_run2+0x10e>
			state_2 = AUTO_GREEN;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <fsm_automatic_run2+0x138>)
 8001594:	2203      	movs	r2, #3
 8001596:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <fsm_automatic_run2+0x13c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fbe1 	bl	8000d6c <setTimer3>
		}

		if (mode == MODE_2){
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <fsm_automatic_run2+0x14c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d10d      	bne.n	80015ce <fsm_automatic_run2+0x132>
			state_2 = MAN_GREEN;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <fsm_automatic_run2+0x138>)
 80015b4:	220d      	movs	r2, #13
 80015b6:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 80015b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80015bc:	f7ff fbd6 	bl	8000d6c <setTimer3>
		}
		break;
 80015c0:	e005      	b.n	80015ce <fsm_automatic_run2+0x132>
	default:
		break;
 80015c2:	bf00      	nop
 80015c4:	e004      	b.n	80015d0 <fsm_automatic_run2+0x134>
		break;
 80015c6:	bf00      	nop
 80015c8:	e002      	b.n	80015d0 <fsm_automatic_run2+0x134>
		break;
 80015ca:	bf00      	nop
 80015cc:	e000      	b.n	80015d0 <fsm_automatic_run2+0x134>
		break;
 80015ce:	bf00      	nop
	}
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000100 	.word	0x20000100
 80015d8:	20000058 	.word	0x20000058
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	2000011c 	.word	0x2000011c
 80015e4:	20000054 	.word	0x20000054
 80015e8:	20000104 	.word	0x20000104
 80015ec:	20000050 	.word	0x20000050

080015f0 <fsm_manual_run1>:
 */


#include "traffic_manual.h"

void fsm_manual_run1(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	switch (state_1){
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <fsm_manual_run1+0x154>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b0d      	cmp	r3, #13
 80015fa:	d038      	beq.n	800166e <fsm_manual_run1+0x7e>
 80015fc:	2b0d      	cmp	r3, #13
 80015fe:	f300 8098 	bgt.w	8001732 <fsm_manual_run1+0x142>
 8001602:	2b0b      	cmp	r3, #11
 8001604:	d002      	beq.n	800160c <fsm_manual_run1+0x1c>
 8001606:	2b0c      	cmp	r3, #12
 8001608:	d062      	beq.n	80016d0 <fsm_manual_run1+0xe0>
			state_1=AUTO_RED;
			setTimer2(redTime*1000);
		}
		break;
	default:
		break;
 800160a:	e092      	b.n	8001732 <fsm_manual_run1+0x142>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001612:	484d      	ldr	r0, [pc, #308]	; (8001748 <fsm_manual_run1+0x158>)
 8001614:	f000 feb9 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2108      	movs	r1, #8
 800161c:	484b      	ldr	r0, [pc, #300]	; (800174c <fsm_manual_run1+0x15c>)
 800161e:	f000 feb4 	bl	800238a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <fsm_manual_run1+0x160>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d10d      	bne.n	8001646 <fsm_manual_run1+0x56>
			state_1= TUN_GREEN;
 800162a:	4b46      	ldr	r3, [pc, #280]	; (8001744 <fsm_manual_run1+0x154>)
 800162c:	2217      	movs	r2, #23
 800162e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001636:	4844      	ldr	r0, [pc, #272]	; (8001748 <fsm_manual_run1+0x158>)
 8001638:	f000 fea7 	bl	800238a <HAL_GPIO_WritePin>
			uartRun();
 800163c:	f000 fa2a 	bl	8001a94 <uartRun>
			setTimer2(250);
 8001640:	20fa      	movs	r0, #250	; 0xfa
 8001642:	f7ff fb77 	bl	8000d34 <setTimer2>
		if (timer2_flag ==1){
 8001646:	4b43      	ldr	r3, [pc, #268]	; (8001754 <fsm_manual_run1+0x164>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d173      	bne.n	8001736 <fsm_manual_run1+0x146>
			mode = MODE_1;
 800164e:	4b40      	ldr	r3, [pc, #256]	; (8001750 <fsm_manual_run1+0x160>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 8001654:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <fsm_manual_run1+0x154>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <fsm_manual_run1+0x168>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fb64 	bl	8000d34 <setTimer2>
		break;
 800166c:	e063      	b.n	8001736 <fsm_manual_run1+0x146>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001674:	4834      	ldr	r0, [pc, #208]	; (8001748 <fsm_manual_run1+0x158>)
 8001676:	f000 fe88 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2108      	movs	r1, #8
 800167e:	4833      	ldr	r0, [pc, #204]	; (800174c <fsm_manual_run1+0x15c>)
 8001680:	f000 fe83 	bl	800238a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001684:	4b32      	ldr	r3, [pc, #200]	; (8001750 <fsm_manual_run1+0x160>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d10d      	bne.n	80016a8 <fsm_manual_run1+0xb8>
			state_1= TUN_GREEN;
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <fsm_manual_run1+0x154>)
 800168e:	2217      	movs	r2, #23
 8001690:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	482b      	ldr	r0, [pc, #172]	; (8001748 <fsm_manual_run1+0x158>)
 800169a:	f000 fe76 	bl	800238a <HAL_GPIO_WritePin>
			uartRun();
 800169e:	f000 f9f9 	bl	8001a94 <uartRun>
			setTimer2(250);
 80016a2:	20fa      	movs	r0, #250	; 0xfa
 80016a4:	f7ff fb46 	bl	8000d34 <setTimer2>
		if (timer2_flag ==1){
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <fsm_manual_run1+0x164>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d144      	bne.n	800173a <fsm_manual_run1+0x14a>
			mode = MODE_1;
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <fsm_manual_run1+0x160>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <fsm_manual_run1+0x154>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <fsm_manual_run1+0x168>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fb33 	bl	8000d34 <setTimer2>
		break;
 80016ce:	e034      	b.n	800173a <fsm_manual_run1+0x14a>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016d6:	481c      	ldr	r0, [pc, #112]	; (8001748 <fsm_manual_run1+0x158>)
 80016d8:	f000 fe57 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	2108      	movs	r1, #8
 80016e0:	481a      	ldr	r0, [pc, #104]	; (800174c <fsm_manual_run1+0x15c>)
 80016e2:	f000 fe52 	bl	800238a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <fsm_manual_run1+0x160>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d10d      	bne.n	800170a <fsm_manual_run1+0x11a>
			state_1= TUN_GREEN;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <fsm_manual_run1+0x154>)
 80016f0:	2217      	movs	r2, #23
 80016f2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fa:	4813      	ldr	r0, [pc, #76]	; (8001748 <fsm_manual_run1+0x158>)
 80016fc:	f000 fe45 	bl	800238a <HAL_GPIO_WritePin>
			uartRun();
 8001700:	f000 f9c8 	bl	8001a94 <uartRun>
			setTimer2(250);
 8001704:	20fa      	movs	r0, #250	; 0xfa
 8001706:	f7ff fb15 	bl	8000d34 <setTimer2>
		if (timer2_flag ==1){
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <fsm_manual_run1+0x164>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d115      	bne.n	800173e <fsm_manual_run1+0x14e>
			mode = MODE_1;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <fsm_manual_run1+0x160>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <fsm_manual_run1+0x154>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <fsm_manual_run1+0x168>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fb02 	bl	8000d34 <setTimer2>
		break;
 8001730:	e005      	b.n	800173e <fsm_manual_run1+0x14e>
		break;
 8001732:	bf00      	nop
 8001734:	e004      	b.n	8001740 <fsm_manual_run1+0x150>
		break;
 8001736:	bf00      	nop
 8001738:	e002      	b.n	8001740 <fsm_manual_run1+0x150>
		break;
 800173a:	bf00      	nop
 800173c:	e000      	b.n	8001740 <fsm_manual_run1+0x150>
		break;
 800173e:	bf00      	nop
	}
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000fc 	.word	0x200000fc
 8001748:	40010800 	.word	0x40010800
 800174c:	40010c00 	.word	0x40010c00
 8001750:	20000104 	.word	0x20000104
 8001754:	20000114 	.word	0x20000114
 8001758:	20000050 	.word	0x20000050

0800175c <fsm_manual_run2>:

void fsm_manual_run2(){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	switch (state_2){
 8001760:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <fsm_manual_run2+0x13c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b0d      	cmp	r3, #13
 8001766:	d007      	beq.n	8001778 <fsm_manual_run2+0x1c>
 8001768:	2b0d      	cmp	r3, #13
 800176a:	f300 808c 	bgt.w	8001886 <fsm_manual_run2+0x12a>
 800176e:	2b0b      	cmp	r3, #11
 8001770:	d05c      	beq.n	800182c <fsm_manual_run2+0xd0>
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d02d      	beq.n	80017d2 <fsm_manual_run2+0x76>
			state_2=AUTO_GREEN;
			setTimer3(greenTime*1000);
		}
		break;
	default:
		break;
 8001776:	e086      	b.n	8001886 <fsm_manual_run2+0x12a>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2120      	movs	r1, #32
 800177c:	4847      	ldr	r0, [pc, #284]	; (800189c <fsm_manual_run2+0x140>)
 800177e:	f000 fe04 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 8001782:	2201      	movs	r2, #1
 8001784:	2110      	movs	r1, #16
 8001786:	4845      	ldr	r0, [pc, #276]	; (800189c <fsm_manual_run2+0x140>)
 8001788:	f000 fdff 	bl	800238a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 800178c:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <fsm_manual_run2+0x144>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d10a      	bne.n	80017aa <fsm_manual_run2+0x4e>
			state_2= TUN_GREEN;
 8001794:	4b40      	ldr	r3, [pc, #256]	; (8001898 <fsm_manual_run2+0x13c>)
 8001796:	2217      	movs	r2, #23
 8001798:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	483f      	ldr	r0, [pc, #252]	; (800189c <fsm_manual_run2+0x140>)
 80017a0:	f000 fdf3 	bl	800238a <HAL_GPIO_WritePin>
			setTimer3(250);
 80017a4:	20fa      	movs	r0, #250	; 0xfa
 80017a6:	f7ff fae1 	bl	8000d6c <setTimer3>
		if (timer3_flag ==1){
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <fsm_manual_run2+0x148>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d16b      	bne.n	800188a <fsm_manual_run2+0x12e>
			mode = MODE_1;
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <fsm_manual_run2+0x144>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 80017b8:	4b37      	ldr	r3, [pc, #220]	; (8001898 <fsm_manual_run2+0x13c>)
 80017ba:	2203      	movs	r2, #3
 80017bc:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <fsm_manual_run2+0x14c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff face 	bl	8000d6c <setTimer3>
		break;
 80017d0:	e05b      	b.n	800188a <fsm_manual_run2+0x12e>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2110      	movs	r1, #16
 80017d6:	4831      	ldr	r0, [pc, #196]	; (800189c <fsm_manual_run2+0x140>)
 80017d8:	f000 fdd7 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 80017dc:	2201      	movs	r2, #1
 80017de:	2120      	movs	r1, #32
 80017e0:	482e      	ldr	r0, [pc, #184]	; (800189c <fsm_manual_run2+0x140>)
 80017e2:	f000 fdd2 	bl	800238a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <fsm_manual_run2+0x144>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d10a      	bne.n	8001804 <fsm_manual_run2+0xa8>
			state_2= TUN_GREEN;
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <fsm_manual_run2+0x13c>)
 80017f0:	2217      	movs	r2, #23
 80017f2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2120      	movs	r1, #32
 80017f8:	4828      	ldr	r0, [pc, #160]	; (800189c <fsm_manual_run2+0x140>)
 80017fa:	f000 fdc6 	bl	800238a <HAL_GPIO_WritePin>
			setTimer3(250);
 80017fe:	20fa      	movs	r0, #250	; 0xfa
 8001800:	f7ff fab4 	bl	8000d6c <setTimer3>
		if (timer3_flag ==1){
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <fsm_manual_run2+0x148>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d140      	bne.n	800188e <fsm_manual_run2+0x132>
			mode = MODE_1;
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <fsm_manual_run2+0x144>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <fsm_manual_run2+0x13c>)
 8001814:	2203      	movs	r2, #3
 8001816:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <fsm_manual_run2+0x14c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff faa1 	bl	8000d6c <setTimer3>
		break;
 800182a:	e030      	b.n	800188e <fsm_manual_run2+0x132>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 800182c:	2201      	movs	r2, #1
 800182e:	2120      	movs	r1, #32
 8001830:	481a      	ldr	r0, [pc, #104]	; (800189c <fsm_manual_run2+0x140>)
 8001832:	f000 fdaa 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2110      	movs	r1, #16
 800183a:	4818      	ldr	r0, [pc, #96]	; (800189c <fsm_manual_run2+0x140>)
 800183c:	f000 fda5 	bl	800238a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <fsm_manual_run2+0x144>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d10a      	bne.n	800185e <fsm_manual_run2+0x102>
			state_2= TUN_GREEN;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <fsm_manual_run2+0x13c>)
 800184a:	2217      	movs	r2, #23
 800184c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2120      	movs	r1, #32
 8001852:	4812      	ldr	r0, [pc, #72]	; (800189c <fsm_manual_run2+0x140>)
 8001854:	f000 fd99 	bl	800238a <HAL_GPIO_WritePin>
			setTimer3(250);
 8001858:	20fa      	movs	r0, #250	; 0xfa
 800185a:	f7ff fa87 	bl	8000d6c <setTimer3>
		if (timer3_flag ==1){
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <fsm_manual_run2+0x148>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d115      	bne.n	8001892 <fsm_manual_run2+0x136>
			mode = MODE_1;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <fsm_manual_run2+0x144>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <fsm_manual_run2+0x13c>)
 800186e:	2203      	movs	r2, #3
 8001870:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <fsm_manual_run2+0x14c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fa74 	bl	8000d6c <setTimer3>
		break;
 8001884:	e005      	b.n	8001892 <fsm_manual_run2+0x136>
		break;
 8001886:	bf00      	nop
 8001888:	e004      	b.n	8001894 <fsm_manual_run2+0x138>
		break;
 800188a:	bf00      	nop
 800188c:	e002      	b.n	8001894 <fsm_manual_run2+0x138>
		break;
 800188e:	bf00      	nop
 8001890:	e000      	b.n	8001894 <fsm_manual_run2+0x138>
		break;
 8001892:	bf00      	nop
	}
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000100 	.word	0x20000100
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	20000104 	.word	0x20000104
 80018a4:	2000011c 	.word	0x2000011c
 80018a8:	20000058 	.word	0x20000058

080018ac <fsm_tuning_run1>:
 *      Author: duyvt
 */

#include "traffic_tuning.h"

void fsm_tuning_run1(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	switch(state_1){
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <fsm_tuning_run1+0xe0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b17      	cmp	r3, #23
 80018b6:	d006      	beq.n	80018c6 <fsm_tuning_run1+0x1a>
 80018b8:	2b17      	cmp	r3, #23
 80018ba:	dc5e      	bgt.n	800197a <fsm_tuning_run1+0xce>
 80018bc:	2b15      	cmp	r3, #21
 80018be:	d03f      	beq.n	8001940 <fsm_tuning_run1+0x94>
 80018c0:	2b16      	cmp	r3, #22
 80018c2:	d01c      	beq.n	80018fe <fsm_tuning_run1+0x52>
			setTimer2(redTime*1000);
		}

		break;
	default:
		break;
 80018c4:	e059      	b.n	800197a <fsm_tuning_run1+0xce>
		if (timer2_flag ==1){
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <fsm_tuning_run1+0xe4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d106      	bne.n	80018dc <fsm_tuning_run1+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 80018ce:	2108      	movs	r1, #8
 80018d0:	4830      	ldr	r0, [pc, #192]	; (8001994 <fsm_tuning_run1+0xe8>)
 80018d2:	f000 fd72 	bl	80023ba <HAL_GPIO_TogglePin>
			setTimer2(250);
 80018d6:	20fa      	movs	r0, #250	; 0xfa
 80018d8:	f7ff fa2c 	bl	8000d34 <setTimer2>
		if(mode == MODE_1){
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <fsm_tuning_run1+0xec>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d14c      	bne.n	800197e <fsm_tuning_run1+0xd2>
			state_1 = AUTO_RED;
 80018e4:	4b29      	ldr	r3, [pc, #164]	; (800198c <fsm_tuning_run1+0xe0>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80018ea:	4b2c      	ldr	r3, [pc, #176]	; (800199c <fsm_tuning_run1+0xf0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa1c 	bl	8000d34 <setTimer2>
		break;
 80018fc:	e03f      	b.n	800197e <fsm_tuning_run1+0xd2>
		if (timer2_flag ==1){
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <fsm_tuning_run1+0xe4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10b      	bne.n	800191e <fsm_tuning_run1+0x72>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 8001906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190a:	4825      	ldr	r0, [pc, #148]	; (80019a0 <fsm_tuning_run1+0xf4>)
 800190c:	f000 fd55 	bl	80023ba <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 8001910:	2108      	movs	r1, #8
 8001912:	4820      	ldr	r0, [pc, #128]	; (8001994 <fsm_tuning_run1+0xe8>)
 8001914:	f000 fd51 	bl	80023ba <HAL_GPIO_TogglePin>
			setTimer2(250);
 8001918:	20fa      	movs	r0, #250	; 0xfa
 800191a:	f7ff fa0b 	bl	8000d34 <setTimer2>
		if(mode == MODE_1){
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <fsm_tuning_run1+0xec>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d12d      	bne.n	8001982 <fsm_tuning_run1+0xd6>
			state_1 = AUTO_RED;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <fsm_tuning_run1+0xe0>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <fsm_tuning_run1+0xf0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f9fb 	bl	8000d34 <setTimer2>
		break;
 800193e:	e020      	b.n	8001982 <fsm_tuning_run1+0xd6>
		if (timer2_flag ==1){
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <fsm_tuning_run1+0xe4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d107      	bne.n	8001958 <fsm_tuning_run1+0xac>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 8001948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800194c:	4814      	ldr	r0, [pc, #80]	; (80019a0 <fsm_tuning_run1+0xf4>)
 800194e:	f000 fd34 	bl	80023ba <HAL_GPIO_TogglePin>
			setTimer2(250);
 8001952:	20fa      	movs	r0, #250	; 0xfa
 8001954:	f7ff f9ee 	bl	8000d34 <setTimer2>
		if(mode == MODE_1){
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <fsm_tuning_run1+0xec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d112      	bne.n	8001986 <fsm_tuning_run1+0xda>
			state_1 = AUTO_RED;
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <fsm_tuning_run1+0xe0>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <fsm_tuning_run1+0xf0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f9de 	bl	8000d34 <setTimer2>
		break;
 8001978:	e005      	b.n	8001986 <fsm_tuning_run1+0xda>
		break;
 800197a:	bf00      	nop
 800197c:	e004      	b.n	8001988 <fsm_tuning_run1+0xdc>
		break;
 800197e:	bf00      	nop
 8001980:	e002      	b.n	8001988 <fsm_tuning_run1+0xdc>
		break;
 8001982:	bf00      	nop
 8001984:	e000      	b.n	8001988 <fsm_tuning_run1+0xdc>
		break;
 8001986:	bf00      	nop
	}
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200000fc 	.word	0x200000fc
 8001990:	20000114 	.word	0x20000114
 8001994:	40010c00 	.word	0x40010c00
 8001998:	20000104 	.word	0x20000104
 800199c:	20000050 	.word	0x20000050
 80019a0:	40010800 	.word	0x40010800

080019a4 <fsm_tuning_run2>:

void fsm_tuning_run2(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	switch(state_2){
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <fsm_tuning_run2+0xdc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b17      	cmp	r3, #23
 80019ae:	d006      	beq.n	80019be <fsm_tuning_run2+0x1a>
 80019b0:	2b17      	cmp	r3, #23
 80019b2:	dc5c      	bgt.n	8001a6e <fsm_tuning_run2+0xca>
 80019b4:	2b15      	cmp	r3, #21
 80019b6:	d03e      	beq.n	8001a36 <fsm_tuning_run2+0x92>
 80019b8:	2b16      	cmp	r3, #22
 80019ba:	d01c      	beq.n	80019f6 <fsm_tuning_run2+0x52>
			setTimer3(greenTime*1000);
		}

		break;
	default:
		break;
 80019bc:	e057      	b.n	8001a6e <fsm_tuning_run2+0xca>
		if (timer3_flag ==1){
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <fsm_tuning_run2+0xe0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d106      	bne.n	80019d4 <fsm_tuning_run2+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 80019c6:	2110      	movs	r1, #16
 80019c8:	482f      	ldr	r0, [pc, #188]	; (8001a88 <fsm_tuning_run2+0xe4>)
 80019ca:	f000 fcf6 	bl	80023ba <HAL_GPIO_TogglePin>
			setTimer3(250);
 80019ce:	20fa      	movs	r0, #250	; 0xfa
 80019d0:	f7ff f9cc 	bl	8000d6c <setTimer3>
		if(mode == MODE_1){
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <fsm_tuning_run2+0xe8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d14a      	bne.n	8001a72 <fsm_tuning_run2+0xce>
			state_2 = AUTO_GREEN;
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <fsm_tuning_run2+0xdc>)
 80019de:	2203      	movs	r2, #3
 80019e0:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <fsm_tuning_run2+0xec>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9bc 	bl	8000d6c <setTimer3>
		break;
 80019f4:	e03d      	b.n	8001a72 <fsm_tuning_run2+0xce>
		if (timer3_flag ==1){
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <fsm_tuning_run2+0xe0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10a      	bne.n	8001a14 <fsm_tuning_run2+0x70>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 80019fe:	2120      	movs	r1, #32
 8001a00:	4821      	ldr	r0, [pc, #132]	; (8001a88 <fsm_tuning_run2+0xe4>)
 8001a02:	f000 fcda 	bl	80023ba <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 8001a06:	2110      	movs	r1, #16
 8001a08:	481f      	ldr	r0, [pc, #124]	; (8001a88 <fsm_tuning_run2+0xe4>)
 8001a0a:	f000 fcd6 	bl	80023ba <HAL_GPIO_TogglePin>
			setTimer3(250);
 8001a0e:	20fa      	movs	r0, #250	; 0xfa
 8001a10:	f7ff f9ac 	bl	8000d6c <setTimer3>
		if(mode == MODE_1){
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <fsm_tuning_run2+0xe8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d12c      	bne.n	8001a76 <fsm_tuning_run2+0xd2>
			state_2 = AUTO_GREEN;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <fsm_tuning_run2+0xdc>)
 8001a1e:	2203      	movs	r2, #3
 8001a20:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <fsm_tuning_run2+0xec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f99c 	bl	8000d6c <setTimer3>
		break;
 8001a34:	e01f      	b.n	8001a76 <fsm_tuning_run2+0xd2>
		if (timer3_flag ==1){
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <fsm_tuning_run2+0xe0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d106      	bne.n	8001a4c <fsm_tuning_run2+0xa8>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 8001a3e:	2120      	movs	r1, #32
 8001a40:	4811      	ldr	r0, [pc, #68]	; (8001a88 <fsm_tuning_run2+0xe4>)
 8001a42:	f000 fcba 	bl	80023ba <HAL_GPIO_TogglePin>
			setTimer3(250);
 8001a46:	20fa      	movs	r0, #250	; 0xfa
 8001a48:	f7ff f990 	bl	8000d6c <setTimer3>
		if(mode == MODE_1){
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <fsm_tuning_run2+0xe8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d112      	bne.n	8001a7a <fsm_tuning_run2+0xd6>
			state_2 = AUTO_GREEN;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <fsm_tuning_run2+0xdc>)
 8001a56:	2203      	movs	r2, #3
 8001a58:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <fsm_tuning_run2+0xec>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f980 	bl	8000d6c <setTimer3>
		break;
 8001a6c:	e005      	b.n	8001a7a <fsm_tuning_run2+0xd6>
		break;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <fsm_tuning_run2+0xd8>
		break;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <fsm_tuning_run2+0xd8>
		break;
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <fsm_tuning_run2+0xd8>
		break;
 8001a7a:	bf00      	nop
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000100 	.word	0x20000100
 8001a84:	2000011c 	.word	0x2000011c
 8001a88:	40010c00 	.word	0x40010c00
 8001a8c:	20000104 	.word	0x20000104
 8001a90:	20000058 	.word	0x20000058

08001a94 <uartRun>:
#include "uart.h"
UART_HandleTypeDef huart2;
char str1[10];

void uartRun(){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	if (mode == MODE_1){
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <uartRun+0x10c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d11d      	bne.n	8001adc <uartRun+0x48>
		if (timer8_flag ==1){
 8001aa0:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <uartRun+0x110>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d119      	bne.n	8001adc <uartRun+0x48>
			HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", (get_timer2_counter()/1000)), 500);
 8001aa8:	f7ff fa08 	bl	8000ebc <get_timer2_counter>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4a3e      	ldr	r2, [pc, #248]	; (8001ba8 <uartRun+0x114>)
 8001ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab4:	1192      	asrs	r2, r2, #6
 8001ab6:	17db      	asrs	r3, r3, #31
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	493b      	ldr	r1, [pc, #236]	; (8001bac <uartRun+0x118>)
 8001abe:	483c      	ldr	r0, [pc, #240]	; (8001bb0 <uartRun+0x11c>)
 8001ac0:	f002 fd16 	bl	80044f0 <siprintf>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001acc:	4938      	ldr	r1, [pc, #224]	; (8001bb0 <uartRun+0x11c>)
 8001ace:	4839      	ldr	r0, [pc, #228]	; (8001bb4 <uartRun+0x120>)
 8001ad0:	f002 f851 	bl	8003b76 <HAL_UART_Transmit>
			setTimer8(500);
 8001ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad8:	f7ff f9d4 	bl	8000e84 <setTimer8>
		}
	}

	if (mode == MODE_3){
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <uartRun+0x10c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d152      	bne.n	8001b8a <uartRun+0xf6>
		switch(state_1){
 8001ae4:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <uartRun+0x124>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b17      	cmp	r3, #23
 8001aea:	d01e      	beq.n	8001b2a <uartRun+0x96>
 8001aec:	2b17      	cmp	r3, #23
 8001aee:	dc4e      	bgt.n	8001b8e <uartRun+0xfa>
 8001af0:	2b15      	cmp	r3, #21
 8001af2:	d002      	beq.n	8001afa <uartRun+0x66>
 8001af4:	2b16      	cmp	r3, #22
 8001af6:	d030      	beq.n	8001b5a <uartRun+0xc6>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", amberTime), 500);
				setTimer8(500);
			}
			break;
		default:
			break;
 8001af8:	e049      	b.n	8001b8e <uartRun+0xfa>
			if (timer8_flag ==1){
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <uartRun+0x110>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d147      	bne.n	8001b92 <uartRun+0xfe>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", redTime), 500);
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <uartRun+0x128>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4928      	ldr	r1, [pc, #160]	; (8001bac <uartRun+0x118>)
 8001b0a:	4829      	ldr	r0, [pc, #164]	; (8001bb0 <uartRun+0x11c>)
 8001b0c:	f002 fcf0 	bl	80044f0 <siprintf>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b18:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <uartRun+0x11c>)
 8001b1a:	4826      	ldr	r0, [pc, #152]	; (8001bb4 <uartRun+0x120>)
 8001b1c:	f002 f82b 	bl	8003b76 <HAL_UART_Transmit>
				setTimer8(500);
 8001b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b24:	f7ff f9ae 	bl	8000e84 <setTimer8>
			break;
 8001b28:	e033      	b.n	8001b92 <uartRun+0xfe>
			if (timer8_flag ==1){
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <uartRun+0x110>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d131      	bne.n	8001b96 <uartRun+0x102>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", greenTime), 500);
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <uartRun+0x12c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	491c      	ldr	r1, [pc, #112]	; (8001bac <uartRun+0x118>)
 8001b3a:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <uartRun+0x11c>)
 8001b3c:	f002 fcd8 	bl	80044f0 <siprintf>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b48:	4919      	ldr	r1, [pc, #100]	; (8001bb0 <uartRun+0x11c>)
 8001b4a:	481a      	ldr	r0, [pc, #104]	; (8001bb4 <uartRun+0x120>)
 8001b4c:	f002 f813 	bl	8003b76 <HAL_UART_Transmit>
				setTimer8(500);
 8001b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b54:	f7ff f996 	bl	8000e84 <setTimer8>
			break;
 8001b58:	e01d      	b.n	8001b96 <uartRun+0x102>
			if (timer8_flag ==1){
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <uartRun+0x110>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d11b      	bne.n	8001b9a <uartRun+0x106>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", amberTime), 500);
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <uartRun+0x130>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4910      	ldr	r1, [pc, #64]	; (8001bac <uartRun+0x118>)
 8001b6a:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <uartRun+0x11c>)
 8001b6c:	f002 fcc0 	bl	80044f0 <siprintf>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b78:	490d      	ldr	r1, [pc, #52]	; (8001bb0 <uartRun+0x11c>)
 8001b7a:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <uartRun+0x120>)
 8001b7c:	f001 fffb 	bl	8003b76 <HAL_UART_Transmit>
				setTimer8(500);
 8001b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b84:	f7ff f97e 	bl	8000e84 <setTimer8>
			break;
 8001b88:	e007      	b.n	8001b9a <uartRun+0x106>
		}
	}
 8001b8a:	bf00      	nop
 8001b8c:	e006      	b.n	8001b9c <uartRun+0x108>
			break;
 8001b8e:	bf00      	nop
 8001b90:	e004      	b.n	8001b9c <uartRun+0x108>
			break;
 8001b92:	bf00      	nop
 8001b94:	e002      	b.n	8001b9c <uartRun+0x108>
			break;
 8001b96:	bf00      	nop
 8001b98:	e000      	b.n	8001b9c <uartRun+0x108>
			break;
 8001b9a:	bf00      	nop
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000104 	.word	0x20000104
 8001ba4:	20000144 	.word	0x20000144
 8001ba8:	10624dd3 	.word	0x10624dd3
 8001bac:	08004d7c 	.word	0x08004d7c
 8001bb0:	200001e8 	.word	0x200001e8
 8001bb4:	200001f4 	.word	0x200001f4
 8001bb8:	200000fc 	.word	0x200000fc
 8001bbc:	20000050 	.word	0x20000050
 8001bc0:	20000058 	.word	0x20000058
 8001bc4:	20000054 	.word	0x20000054

08001bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	; (8001c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bee:	f7ff fba1 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f002 fc51 	bl	8004498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7fe fdc9 	bl	800078c <main>
  bx lr
 8001bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001c04:	08004dec 	.word	0x08004dec
  ldr r2, =_sbss
 8001c08:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001c0c:	2000024c 	.word	0x2000024c

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x28>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f923 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fa20 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f93b 	bl	8001eda <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f903 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000005c 	.word	0x2000005c
 8001c98:	20000064 	.word	0x20000064
 8001c9c:	20000060 	.word	0x20000060

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000064 	.word	0x20000064
 8001cc0:	20000238 	.word	0x20000238

08001cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_GetTick+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000238 	.word	0x20000238

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4906      	ldr	r1, [pc, #24]	; (8001d70 <__NVIC_EnableIRQ+0x34>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff90 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff2d 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff42 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff90 	bl	8001dc8 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5f 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff35 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d008      	beq.n	8001f1a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e020      	b.n	8001f5c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 020e 	bic.w	r2, r2, #14
 8001f28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d005      	beq.n	8001f8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2204      	movs	r2, #4
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e051      	b.n	800202e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 020e 	bic.w	r2, r2, #14
 8001f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a22      	ldr	r2, [pc, #136]	; (8002038 <HAL_DMA_Abort_IT+0xd0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d029      	beq.n	8002008 <HAL_DMA_Abort_IT+0xa0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_DMA_Abort_IT+0xd4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d022      	beq.n	8002004 <HAL_DMA_Abort_IT+0x9c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_DMA_Abort_IT+0xd8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d01a      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x96>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_DMA_Abort_IT+0xdc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d012      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0x90>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_DMA_Abort_IT+0xe0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00a      	beq.n	8001ff2 <HAL_DMA_Abort_IT+0x8a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_DMA_Abort_IT+0xe4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d102      	bne.n	8001fec <HAL_DMA_Abort_IT+0x84>
 8001fe6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fea:	e00e      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8001fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ff0:	e00b      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8001ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff6:	e008      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8001ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffc:	e005      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8001ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002002:	e002      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8002004:	2310      	movs	r3, #16
 8002006:	e000      	b.n	800200a <HAL_DMA_Abort_IT+0xa2>
 8002008:	2301      	movs	r3, #1
 800200a:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_DMA_Abort_IT+0xe8>)
 800200c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
    } 
  }
  return status;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40020008 	.word	0x40020008
 800203c:	4002001c 	.word	0x4002001c
 8002040:	40020030 	.word	0x40020030
 8002044:	40020044 	.word	0x40020044
 8002048:	40020058 	.word	0x40020058
 800204c:	4002006c 	.word	0x4002006c
 8002050:	40020000 	.word	0x40020000

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b08b      	sub	sp, #44	; 0x2c
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	e169      	b.n	800233c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002068:	2201      	movs	r2, #1
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 8158 	bne.w	8002336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a9a      	ldr	r2, [pc, #616]	; (80022f4 <HAL_GPIO_Init+0x2a0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d05e      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 8002090:	4a98      	ldr	r2, [pc, #608]	; (80022f4 <HAL_GPIO_Init+0x2a0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d875      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 8002096:	4a98      	ldr	r2, [pc, #608]	; (80022f8 <HAL_GPIO_Init+0x2a4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d058      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 800209c:	4a96      	ldr	r2, [pc, #600]	; (80022f8 <HAL_GPIO_Init+0x2a4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d86f      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020a2:	4a96      	ldr	r2, [pc, #600]	; (80022fc <HAL_GPIO_Init+0x2a8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d052      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020a8:	4a94      	ldr	r2, [pc, #592]	; (80022fc <HAL_GPIO_Init+0x2a8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d869      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ae:	4a94      	ldr	r2, [pc, #592]	; (8002300 <HAL_GPIO_Init+0x2ac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d04c      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020b4:	4a92      	ldr	r2, [pc, #584]	; (8002300 <HAL_GPIO_Init+0x2ac>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d863      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ba:	4a92      	ldr	r2, [pc, #584]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d046      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020c0:	4a90      	ldr	r2, [pc, #576]	; (8002304 <HAL_GPIO_Init+0x2b0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d85d      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d82a      	bhi.n	8002120 <HAL_GPIO_Init+0xcc>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d859      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <HAL_GPIO_Init+0x80>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	0800214f 	.word	0x0800214f
 80020d8:	08002129 	.word	0x08002129
 80020dc:	0800213b 	.word	0x0800213b
 80020e0:	0800217d 	.word	0x0800217d
 80020e4:	08002183 	.word	0x08002183
 80020e8:	08002183 	.word	0x08002183
 80020ec:	08002183 	.word	0x08002183
 80020f0:	08002183 	.word	0x08002183
 80020f4:	08002183 	.word	0x08002183
 80020f8:	08002183 	.word	0x08002183
 80020fc:	08002183 	.word	0x08002183
 8002100:	08002183 	.word	0x08002183
 8002104:	08002183 	.word	0x08002183
 8002108:	08002183 	.word	0x08002183
 800210c:	08002183 	.word	0x08002183
 8002110:	08002183 	.word	0x08002183
 8002114:	08002183 	.word	0x08002183
 8002118:	08002131 	.word	0x08002131
 800211c:	08002145 	.word	0x08002145
 8002120:	4a79      	ldr	r2, [pc, #484]	; (8002308 <HAL_GPIO_Init+0x2b4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002126:	e02c      	b.n	8002182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	623b      	str	r3, [r7, #32]
          break;
 800212e:	e029      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	623b      	str	r3, [r7, #32]
          break;
 8002138:	e024      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	3308      	adds	r3, #8
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e01f      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	330c      	adds	r3, #12
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e01a      	b.n	8002184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002156:	2304      	movs	r3, #4
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e013      	b.n	8002184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002164:	2308      	movs	r3, #8
 8002166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	611a      	str	r2, [r3, #16]
          break;
 800216e:	e009      	b.n	8002184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002170:	2308      	movs	r3, #8
 8002172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	615a      	str	r2, [r3, #20]
          break;
 800217a:	e003      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e000      	b.n	8002184 <HAL_GPIO_Init+0x130>
          break;
 8002182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d801      	bhi.n	800218e <HAL_GPIO_Init+0x13a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	e001      	b.n	8002192 <HAL_GPIO_Init+0x13e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2bff      	cmp	r3, #255	; 0xff
 8002198:	d802      	bhi.n	80021a0 <HAL_GPIO_Init+0x14c>
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0x152>
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	3b08      	subs	r3, #8
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	210f      	movs	r1, #15
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	6a39      	ldr	r1, [r7, #32]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	431a      	orrs	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80b1 	beq.w	8002336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d4:	4b4d      	ldr	r3, [pc, #308]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_GPIO_Init+0x2b8>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ec:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_GPIO_Init+0x2bc>)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a40      	ldr	r2, [pc, #256]	; (8002314 <HAL_GPIO_Init+0x2c0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_GPIO_Init+0x1ec>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <HAL_GPIO_Init+0x2c4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x1e8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3e      	ldr	r2, [pc, #248]	; (800231c <HAL_GPIO_Init+0x2c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x1e4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <HAL_GPIO_Init+0x2cc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x1e0>
 8002230:	2303      	movs	r3, #3
 8002232:	e006      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002234:	2304      	movs	r3, #4
 8002236:	e004      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002238:	2302      	movs	r3, #2
 800223a:	e002      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002240:	2300      	movs	r3, #0
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	f002 0203 	and.w	r2, r2, #3
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4093      	lsls	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002252:	492f      	ldr	r1, [pc, #188]	; (8002310 <HAL_GPIO_Init+0x2bc>)
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	492c      	ldr	r1, [pc, #176]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	4928      	ldr	r1, [pc, #160]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002284:	4013      	ands	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4922      	ldr	r1, [pc, #136]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	491e      	ldr	r1, [pc, #120]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	4918      	ldr	r1, [pc, #96]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4914      	ldr	r1, [pc, #80]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d021      	beq.n	8002328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	490e      	ldr	r1, [pc, #56]	; (8002324 <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e021      	b.n	8002336 <HAL_GPIO_Init+0x2e2>
 80022f2:	bf00      	nop
 80022f4:	10320000 	.word	0x10320000
 80022f8:	10310000 	.word	0x10310000
 80022fc:	10220000 	.word	0x10220000
 8002300:	10210000 	.word	0x10210000
 8002304:	10120000 	.word	0x10120000
 8002308:	10110000 	.word	0x10110000
 800230c:	40021000 	.word	0x40021000
 8002310:	40010000 	.word	0x40010000
 8002314:	40010800 	.word	0x40010800
 8002318:	40010c00 	.word	0x40010c00
 800231c:	40011000 	.word	0x40011000
 8002320:	40011400 	.word	0x40011400
 8002324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_GPIO_Init+0x304>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	43db      	mvns	r3, r3
 8002330:	4909      	ldr	r1, [pc, #36]	; (8002358 <HAL_GPIO_Init+0x304>)
 8002332:	4013      	ands	r3, r2
 8002334:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	f47f ae8e 	bne.w	8002068 <HAL_GPIO_Init+0x14>
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	372c      	adds	r7, #44	; 0x2c
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e001      	b.n	800237e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	807b      	strh	r3, [r7, #2]
 8002396:	4613      	mov	r3, r2
 8002398:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800239a:	787b      	ldrb	r3, [r7, #1]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023a6:	e003      	b.n	80023b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	041a      	lsls	r2, r3, #16
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023cc:	887a      	ldrh	r2, [r7, #2]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4013      	ands	r3, r2
 80023d2:	041a      	lsls	r2, r3, #16
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	887b      	ldrh	r3, [r7, #2]
 80023da:	400b      	ands	r3, r1
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e26c      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8087 	beq.w	800251a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800240c:	4b92      	ldr	r3, [pc, #584]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b04      	cmp	r3, #4
 8002416:	d00c      	beq.n	8002432 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002418:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d112      	bne.n	800244a <HAL_RCC_OscConfig+0x5e>
 8002424:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d10b      	bne.n	800244a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002432:	4b89      	ldr	r3, [pc, #548]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d06c      	beq.n	8002518 <HAL_RCC_OscConfig+0x12c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d168      	bne.n	8002518 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e246      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x76>
 8002454:	4b80      	ldr	r3, [pc, #512]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a7f      	ldr	r2, [pc, #508]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e02e      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x98>
 800246a:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7a      	ldr	r2, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b78      	ldr	r3, [pc, #480]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a77      	ldr	r2, [pc, #476]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0xbc>
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a71      	ldr	r2, [pc, #452]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6e      	ldr	r2, [pc, #440]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 80024a8:	4b6b      	ldr	r3, [pc, #428]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6a      	ldr	r2, [pc, #424]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b68      	ldr	r3, [pc, #416]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a67      	ldr	r2, [pc, #412]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fbfc 	bl	8001cc4 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fbf8 	bl	8001cc4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1fa      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe4>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff fbe8 	bl	8001cc4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fbe4 	bl	8001cc4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1e6      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x10c>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x18c>
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x176>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1ba      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4939      	ldr	r1, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e03a      	b.n	80025ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7ff fb9d 	bl	8001cc4 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258e:	f7ff fb99 	bl	8001cc4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e19b      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4927      	ldr	r1, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fb7c 	bl	8001cc4 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d0:	f7ff fb78 	bl	8001cc4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e17a      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d03a      	beq.n	8002670 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d019      	beq.n	8002636 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7ff fb5c 	bl	8001cc4 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff fb58 	bl	8001cc4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e15a      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800262e:	2001      	movs	r0, #1
 8002630:	f000 fad8 	bl	8002be4 <RCC_Delay>
 8002634:	e01c      	b.n	8002670 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7ff fb42 	bl	8001cc4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002642:	e00f      	b.n	8002664 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002644:	f7ff fb3e 	bl	8001cc4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d908      	bls.n	8002664 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e140      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	42420000 	.word	0x42420000
 8002660:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e9      	bne.n	8002644 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a6 	beq.w	80027ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b97      	ldr	r3, [pc, #604]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10d      	bne.n	80026aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b94      	ldr	r3, [pc, #592]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a93      	ldr	r2, [pc, #588]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	61d3      	str	r3, [r2, #28]
 800269a:	4b91      	ldr	r3, [pc, #580]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b8e      	ldr	r3, [pc, #568]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b8b      	ldr	r3, [pc, #556]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a8a      	ldr	r2, [pc, #552]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7ff faff 	bl	8001cc4 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7ff fafb 	bl	8001cc4 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0fd      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b81      	ldr	r3, [pc, #516]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x312>
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	e02d      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x334>
 8002706:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a75      	ldr	r2, [pc, #468]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a72      	ldr	r2, [pc, #456]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	e01c      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0x356>
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a6c      	ldr	r2, [pc, #432]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a69      	ldr	r2, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6213      	str	r3, [r2, #32]
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a66      	ldr	r2, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7ff faaf 	bl	8001cc4 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7ff faab 	bl	8001cc4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0ab      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ee      	beq.n	800276a <HAL_RCC_OscConfig+0x37e>
 800278c:	e014      	b.n	80027b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7ff fa99 	bl	8001cc4 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7ff fa95 	bl	8001cc4 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e095      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ee      	bne.n	8002796 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4a47      	ldr	r2, [pc, #284]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8081 	beq.w	80028d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d061      	beq.n	80028a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d146      	bne.n	8002876 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7ff fa69 	bl	8001cc4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7ff fa65 	bl	8001cc4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e067      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d108      	bne.n	8002830 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800281e:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	492d      	ldr	r1, [pc, #180]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a19      	ldr	r1, [r3, #32]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	430b      	orrs	r3, r1
 8002842:	4927      	ldr	r1, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7ff fa39 	bl	8001cc4 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff fa35 	bl	8001cc4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e037      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x46a>
 8002874:	e02f      	b.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff fa22 	bl	8001cc4 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7ff fa1e 	bl	8001cc4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e020      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x498>
 80028a2:	e018      	b.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e013      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42420060 	.word	0x42420060

080028ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0d0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	4965      	ldr	r1, [pc, #404]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0b8      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d020      	beq.n	800297e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002952:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800296a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	494d      	ldr	r1, [pc, #308]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d040      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d115      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07f      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e073      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06b      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4936      	ldr	r1, [pc, #216]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029dc:	f7ff f972 	bl	8001cc4 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7ff f96e 	bl	8001cc4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e053      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d210      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 0207 	bic.w	r2, r3, #7
 8002a22:	4922      	ldr	r1, [pc, #136]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e032      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4916      	ldr	r1, [pc, #88]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7a:	f000 f821 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	490a      	ldr	r1, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	5ccb      	ldrb	r3, [r1, r3]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1d0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f8d0 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08004d98 	.word	0x08004d98
 8002ab8:	2000005c 	.word	0x2000005c
 8002abc:	20000060 	.word	0x20000060

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b490      	push	{r4, r7}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac8:	1d3c      	adds	r4, r7, #4
 8002aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ad0:	f240 2301 	movw	r3, #513	; 0x201
 8002ad4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d002      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x40>
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x46>
 8002afe:	e02d      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b02:	623b      	str	r3, [r7, #32]
      break;
 8002b04:	e02d      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	0c9b      	lsrs	r3, r3, #18
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b12:	4413      	add	r3, r2
 8002b14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0c5b      	lsrs	r3, r3, #17
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b32:	4413      	add	r3, r2
 8002b34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3e:	fb02 f203 	mul.w	r2, r2, r3
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	e004      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	623b      	str	r3, [r7, #32]
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5e:	623b      	str	r3, [r7, #32]
      break;
 8002b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b62:	6a3b      	ldr	r3, [r7, #32]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc90      	pop	{r4, r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	08004d88 	.word	0x08004d88
 8002b74:	40021000 	.word	0x40021000
 8002b78:	007a1200 	.word	0x007a1200
 8002b7c:	003d0900 	.word	0x003d0900

08002b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b02      	ldr	r3, [pc, #8]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	2000005c 	.word	0x2000005c

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b98:	f7ff fff2 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08004da8 	.word	0x08004da8

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc0:	f7ff ffde 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0adb      	lsrs	r3, r3, #11
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08004da8 	.word	0x08004da8

08002be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <RCC_Delay+0x34>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <RCC_Delay+0x38>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0a5b      	lsrs	r3, r3, #9
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c00:	bf00      	nop
  }
  while (Delay --);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1e5a      	subs	r2, r3, #1
 8002c06:	60fa      	str	r2, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f9      	bne.n	8002c00 <RCC_Delay+0x1c>
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	2000005c 	.word	0x2000005c
 8002c1c:	10624dd3 	.word	0x10624dd3

08002c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e041      	b.n	8002cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fa46 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f000 fc28 	bl	80034b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d001      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e03a      	b.n	8002d4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_TIM_Base_Start_IT+0x98>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00e      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x58>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d02:	d009      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x58>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x58>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d111      	bne.n	8002d3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d010      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3a:	e007      	b.n	8002d4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800

08002d64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e041      	b.n	8002dfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f839 	bl	8002e02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 fb86 	bl	80034b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_TIM_PWM_Start+0x24>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e022      	b.n	8002e7e <HAL_TIM_PWM_Start+0x6a>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d109      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x3e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	bf14      	ite	ne
 8002e4a:	2301      	movne	r3, #1
 8002e4c:	2300      	moveq	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	e015      	b.n	8002e7e <HAL_TIM_PWM_Start+0x6a>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d109      	bne.n	8002e6c <HAL_TIM_PWM_Start+0x58>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e008      	b.n	8002e7e <HAL_TIM_PWM_Start+0x6a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e05e      	b.n	8002f44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_PWM_Start+0x82>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	e013      	b.n	8002ebe <HAL_TIM_PWM_Start+0xaa>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d104      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0x92>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea4:	e00b      	b.n	8002ebe <HAL_TIM_PWM_Start+0xaa>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0xa2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb4:	e003      	b.n	8002ebe <HAL_TIM_PWM_Start+0xaa>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fd74 	bl	80039b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <HAL_TIM_PWM_Start+0x138>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d107      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <HAL_TIM_PWM_Start+0x138>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_TIM_PWM_Start+0xfa>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d009      	beq.n	8002f0e <HAL_TIM_PWM_Start+0xfa>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_TIM_PWM_Start+0x13c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_TIM_PWM_Start+0xfa>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <HAL_TIM_PWM_Start+0x140>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d111      	bne.n	8002f32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d010      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	e007      	b.n	8002f42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800

08002f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0202 	mvn.w	r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa6f 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa62 	bl	800346c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fa71 	bl	8003490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0204 	mvn.w	r2, #4
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa45 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa38 	bl	800346c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fa47 	bl	8003490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b08      	cmp	r3, #8
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b08      	cmp	r3, #8
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0208 	mvn.w	r2, #8
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa1b 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa0e 	bl	800346c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fa1d 	bl	8003490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b10      	cmp	r3, #16
 8003068:	d122      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b10      	cmp	r3, #16
 8003076:	d11b      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0210 	mvn.w	r2, #16
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2208      	movs	r2, #8
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f9f1 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9e4 	bl	800346c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f9f3 	bl	8003490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10e      	bne.n	80030dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0201 	mvn.w	r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fd24 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b80      	cmp	r3, #128	; 0x80
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d107      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fce1 	bl	8003aca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d10e      	bne.n	8003134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d107      	bne.n	8003134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f9b7 	bl	80034a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b20      	cmp	r3, #32
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b20      	cmp	r3, #32
 800314e:	d107      	bne.n	8003160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0220 	mvn.w	r2, #32
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fcac 	bl	8003ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800317e:	2302      	movs	r3, #2
 8003180:	e0ac      	b.n	80032dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b0c      	cmp	r3, #12
 800318e:	f200 809f 	bhi.w	80032d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003192:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031cd 	.word	0x080031cd
 800319c:	080032d1 	.word	0x080032d1
 80031a0:	080032d1 	.word	0x080032d1
 80031a4:	080032d1 	.word	0x080032d1
 80031a8:	0800320d 	.word	0x0800320d
 80031ac:	080032d1 	.word	0x080032d1
 80031b0:	080032d1 	.word	0x080032d1
 80031b4:	080032d1 	.word	0x080032d1
 80031b8:	0800324f 	.word	0x0800324f
 80031bc:	080032d1 	.word	0x080032d1
 80031c0:	080032d1 	.word	0x080032d1
 80031c4:	080032d1 	.word	0x080032d1
 80031c8:	0800328f 	.word	0x0800328f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f9d0 	bl	8003578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0204 	bic.w	r2, r2, #4
 80031f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6999      	ldr	r1, [r3, #24]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	619a      	str	r2, [r3, #24]
      break;
 800320a:	e062      	b.n	80032d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fa16 	bl	8003644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6999      	ldr	r1, [r3, #24]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	021a      	lsls	r2, r3, #8
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	619a      	str	r2, [r3, #24]
      break;
 800324c:	e041      	b.n	80032d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fa5f 	bl	8003718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0208 	orr.w	r2, r2, #8
 8003268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0204 	bic.w	r2, r2, #4
 8003278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69d9      	ldr	r1, [r3, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	61da      	str	r2, [r3, #28]
      break;
 800328c:	e021      	b.n	80032d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 faa9 	bl	80037ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69d9      	ldr	r1, [r3, #28]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	021a      	lsls	r2, r3, #8
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	61da      	str	r2, [r3, #28]
      break;
 80032ce:	e000      	b.n	80032d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_TIM_ConfigClockSource+0x18>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e0b3      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x180>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800331a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003322:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003334:	d03e      	beq.n	80033b4 <HAL_TIM_ConfigClockSource+0xd0>
 8003336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333a:	f200 8087 	bhi.w	800344c <HAL_TIM_ConfigClockSource+0x168>
 800333e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003342:	f000 8085 	beq.w	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	d87f      	bhi.n	800344c <HAL_TIM_ConfigClockSource+0x168>
 800334c:	2b70      	cmp	r3, #112	; 0x70
 800334e:	d01a      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0xa2>
 8003350:	2b70      	cmp	r3, #112	; 0x70
 8003352:	d87b      	bhi.n	800344c <HAL_TIM_ConfigClockSource+0x168>
 8003354:	2b60      	cmp	r3, #96	; 0x60
 8003356:	d050      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x116>
 8003358:	2b60      	cmp	r3, #96	; 0x60
 800335a:	d877      	bhi.n	800344c <HAL_TIM_ConfigClockSource+0x168>
 800335c:	2b50      	cmp	r3, #80	; 0x50
 800335e:	d03c      	beq.n	80033da <HAL_TIM_ConfigClockSource+0xf6>
 8003360:	2b50      	cmp	r3, #80	; 0x50
 8003362:	d873      	bhi.n	800344c <HAL_TIM_ConfigClockSource+0x168>
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d058      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x136>
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d86f      	bhi.n	800344c <HAL_TIM_ConfigClockSource+0x168>
 800336c:	2b30      	cmp	r3, #48	; 0x30
 800336e:	d064      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x156>
 8003370:	2b30      	cmp	r3, #48	; 0x30
 8003372:	d86b      	bhi.n	800344c <HAL_TIM_ConfigClockSource+0x168>
 8003374:	2b20      	cmp	r3, #32
 8003376:	d060      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x156>
 8003378:	2b20      	cmp	r3, #32
 800337a:	d867      	bhi.n	800344c <HAL_TIM_ConfigClockSource+0x168>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d05c      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x156>
 8003380:	2b10      	cmp	r3, #16
 8003382:	d05a      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003384:	e062      	b.n	800344c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f000 faee 	bl	8003976 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	609a      	str	r2, [r3, #8]
      break;
 80033b2:	e04e      	b.n	8003452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6899      	ldr	r1, [r3, #8]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f000 fad7 	bl	8003976 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d6:	609a      	str	r2, [r3, #8]
      break;
 80033d8:	e03b      	b.n	8003452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 fa4e 	bl	8003888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2150      	movs	r1, #80	; 0x50
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 faa5 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 80033f8:	e02b      	b.n	8003452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	461a      	mov	r2, r3
 8003408:	f000 fa6c 	bl	80038e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2160      	movs	r1, #96	; 0x60
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fa95 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 8003418:	e01b      	b.n	8003452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	461a      	mov	r2, r3
 8003428:	f000 fa2e 	bl	8003888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2140      	movs	r1, #64	; 0x40
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fa85 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 8003438:	e00b      	b.n	8003452 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f000 fa7c 	bl	8003942 <TIM_ITRx_SetConfig>
        break;
 800344a:	e002      	b.n	8003452 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800344c:	bf00      	nop
 800344e:	e000      	b.n	8003452 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003450:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a29      	ldr	r2, [pc, #164]	; (800356c <TIM_Base_SetConfig+0xb8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x30>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x30>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a26      	ldr	r2, [pc, #152]	; (8003570 <TIM_Base_SetConfig+0xbc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x30>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a25      	ldr	r2, [pc, #148]	; (8003574 <TIM_Base_SetConfig+0xc0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1c      	ldr	r2, [pc, #112]	; (800356c <TIM_Base_SetConfig+0xb8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00b      	beq.n	8003516 <TIM_Base_SetConfig+0x62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d007      	beq.n	8003516 <TIM_Base_SetConfig+0x62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a19      	ldr	r2, [pc, #100]	; (8003570 <TIM_Base_SetConfig+0xbc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_Base_SetConfig+0x62>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <TIM_Base_SetConfig+0xc0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a07      	ldr	r2, [pc, #28]	; (800356c <TIM_Base_SetConfig+0xb8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	615a      	str	r2, [r3, #20]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800

08003578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f023 0201 	bic.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 0302 	bic.w	r3, r3, #2
 80035c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <TIM_OC1_SetConfig+0xc8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10c      	bne.n	80035ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f023 0308 	bic.w	r3, r3, #8
 80035da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <TIM_OC1_SetConfig+0xc8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d111      	bne.n	800361a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40012c00 	.word	0x40012c00

08003644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0210 	bic.w	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0320 	bic.w	r3, r3, #32
 800368e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <TIM_OC2_SetConfig+0xd0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10d      	bne.n	80036c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a14      	ldr	r2, [pc, #80]	; (8003714 <TIM_OC2_SetConfig+0xd0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d113      	bne.n	80036f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00

08003718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <TIM_OC3_SetConfig+0xd0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10d      	bne.n	8003792 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800377c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <TIM_OC3_SetConfig+0xd0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d113      	bne.n	80037c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40012c00 	.word	0x40012c00

080037ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	031b      	lsls	r3, r3, #12
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <TIM_OC4_SetConfig+0x98>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d109      	bne.n	8003860 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003852:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	019b      	lsls	r3, r3, #6
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40012c00 	.word	0x40012c00

08003888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0201 	bic.w	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 030a 	bic.w	r3, r3, #10
 80038c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f023 0210 	bic.w	r2, r3, #16
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800390e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	031b      	lsls	r3, r3, #12
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003920:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	621a      	str	r2, [r3, #32]
}
 8003938:	bf00      	nop
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	f043 0307 	orr.w	r3, r3, #7
 8003964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003976:	b480      	push	{r7}
 8003978:	b087      	sub	sp, #28
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003990:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	021a      	lsls	r2, r3, #8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	431a      	orrs	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4313      	orrs	r3, r2
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	609a      	str	r2, [r3, #8]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2201      	movs	r2, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e046      	b.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00e      	beq.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d009      	beq.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10c      	bne.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800

08003ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e03f      	b.n	8003b6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd fb52 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2224      	movs	r2, #36	; 0x24
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fc25 	bl	8004370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b08a      	sub	sp, #40	; 0x28
 8003b7a:	af02      	add	r7, sp, #8
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d17c      	bne.n	8003c90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_UART_Transmit+0x2c>
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e075      	b.n	8003c92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_UART_Transmit+0x3e>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e06e      	b.n	8003c92 <HAL_UART_Transmit+0x11c>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2221      	movs	r2, #33	; 0x21
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bca:	f7fe f87b 	bl	8001cc4 <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	88fa      	ldrh	r2, [r7, #6]
 8003bda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be4:	d108      	bne.n	8003bf8 <HAL_UART_Transmit+0x82>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	e003      	b.n	8003c00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c08:	e02a      	b.n	8003c60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2200      	movs	r2, #0
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fa11 	bl	800403c <UART_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e036      	b.n	8003c92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	e007      	b.n	8003c52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1cf      	bne.n	8003c0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2200      	movs	r2, #0
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f9e1 	bl	800403c <UART_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e006      	b.n	8003c92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_UART_IRQHandler+0x52>
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa99 	bl	800421e <UART_Receive_IT>
      return;
 8003cec:	e17b      	b.n	8003fe6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80b1 	beq.w	8003e58 <HAL_UART_IRQHandler+0x1bc>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <HAL_UART_IRQHandler+0x70>
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80a6 	beq.w	8003e58 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_UART_IRQHandler+0x90>
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_UART_IRQHandler+0xb0>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0202 	orr.w	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_UART_IRQHandler+0xd0>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f043 0204 	orr.w	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00f      	beq.n	8003d96 <HAL_UART_IRQHandler+0xfa>
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <HAL_UART_IRQHandler+0xee>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f043 0208 	orr.w	r2, r3, #8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 811e 	beq.w	8003fdc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_UART_IRQHandler+0x11e>
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fa32 	bl	800421e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <HAL_UART_IRQHandler+0x146>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d031      	beq.n	8003e46 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f974 	bl	80040d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d023      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e04:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d013      	beq.n	8003e36 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	4a76      	ldr	r2, [pc, #472]	; (8003fec <HAL_UART_IRQHandler+0x350>)
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe f8a4 	bl	8001f68 <HAL_DMA_Abort_IT>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e30:	4610      	mov	r0, r2
 8003e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	e00e      	b.n	8003e54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8ec 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	e00a      	b.n	8003e54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8e8 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	e006      	b.n	8003e54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f8e4 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e52:	e0c3      	b.n	8003fdc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	bf00      	nop
    return;
 8003e56:	e0c1      	b.n	8003fdc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 80a1 	bne.w	8003fa4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 809b 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8095 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d04e      	beq.n	8003f3c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ea8:	8a3b      	ldrh	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8098 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eb4:	8a3a      	ldrh	r2, [r7, #16]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	f080 8092 	bcs.w	8003fe0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8a3a      	ldrh	r2, [r7, #16]
 8003ec0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d02b      	beq.n	8003f24 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eda:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0210 	bic.w	r2, r2, #16
 8003f18:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd ffe7 	bl	8001ef2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f876 	bl	8004026 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f3a:	e051      	b.n	8003fe0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d047      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f54:	8a7b      	ldrh	r3, [r7, #18]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d044      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f68:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0210 	bic.w	r2, r2, #16
 8003f96:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f98:	8a7b      	ldrh	r3, [r7, #18]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f842 	bl	8004026 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fa2:	e01f      	b.n	8003fe4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x324>
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f8c9 	bl	8004150 <UART_Transmit_IT>
    return;
 8003fbe:	e012      	b.n	8003fe6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x34a>
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f90a 	bl	80041ee <UART_EndTransmit_IT>
    return;
 8003fda:	e004      	b.n	8003fe6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003fdc:	bf00      	nop
 8003fde:	e002      	b.n	8003fe6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003fe4:	bf00      	nop
  }
}
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	08004129 	.word	0x08004129

08003ff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404c:	e02c      	b.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d028      	beq.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <UART_WaitOnFlagUntilTimeout+0x30>
 800405c:	f7fd fe32 	bl	8001cc4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	429a      	cmp	r2, r3
 800406a:	d21d      	bcs.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800407a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e00f      	b.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d0c3      	beq.n	800404e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0210 	bic.w	r2, r2, #16
 800410e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff ff66 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b21      	cmp	r3, #33	; 0x21
 8004162:	d13e      	bne.n	80041e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	d114      	bne.n	8004198 <UART_Transmit_IT+0x48>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d110      	bne.n	8004198 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800418a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]
 8004196:	e008      	b.n	80041aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	1c59      	adds	r1, r3, #1
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6211      	str	r1, [r2, #32]
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4619      	mov	r1, r3
 80041b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff feee 	bl	8003ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b22      	cmp	r3, #34	; 0x22
 8004230:	f040 8099 	bne.w	8004366 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d117      	bne.n	800426e <UART_Receive_IT+0x50>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b29b      	uxth	r3, r3
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	b29a      	uxth	r2, r3
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
 800426c:	e026      	b.n	80042bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d007      	beq.n	8004292 <UART_Receive_IT+0x74>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <UART_Receive_IT+0x82>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e008      	b.n	80042b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4619      	mov	r1, r3
 80042ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d148      	bne.n	8004362 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0220 	bic.w	r2, r2, #32
 80042de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	2b01      	cmp	r3, #1
 800430e:	d123      	bne.n	8004358 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0210 	bic.w	r2, r2, #16
 8004324:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b10      	cmp	r3, #16
 8004332:	d10a      	bne.n	800434a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fe68 	bl	8004026 <HAL_UARTEx_RxEventCallback>
 8004356:	e002      	b.n	800435e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff fe52 	bl	8004002 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e002      	b.n	8004368 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043aa:	f023 030c 	bic.w	r3, r3, #12
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2c      	ldr	r2, [pc, #176]	; (8004484 <UART_SetConfig+0x114>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043d8:	f7fe fbf0 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	e002      	b.n	80043e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043e0:	f7fe fbd8 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 80043e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	4a22      	ldr	r2, [pc, #136]	; (8004488 <UART_SetConfig+0x118>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	0119      	lsls	r1, r3, #4
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009a      	lsls	r2, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fbb2 f2f3 	udiv	r2, r2, r3
 800441c:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <UART_SetConfig+0x118>)
 800441e:	fba3 0302 	umull	r0, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2064      	movs	r0, #100	; 0x64
 8004426:	fb00 f303 	mul.w	r3, r0, r3
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	3332      	adds	r3, #50	; 0x32
 8004430:	4a15      	ldr	r2, [pc, #84]	; (8004488 <UART_SetConfig+0x118>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443c:	4419      	add	r1, r3
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009a      	lsls	r2, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fbb2 f2f3 	udiv	r2, r2, r3
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <UART_SetConfig+0x118>)
 8004456:	fba3 0302 	umull	r0, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2064      	movs	r0, #100	; 0x64
 800445e:	fb00 f303 	mul.w	r3, r0, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	3332      	adds	r3, #50	; 0x32
 8004468:	4a07      	ldr	r2, [pc, #28]	; (8004488 <UART_SetConfig+0x118>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	440a      	add	r2, r1
 800447a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40013800 	.word	0x40013800
 8004488:	51eb851f 	.word	0x51eb851f

0800448c <__errno>:
 800448c:	4b01      	ldr	r3, [pc, #4]	; (8004494 <__errno+0x8>)
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000068 	.word	0x20000068

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	2600      	movs	r6, #0
 800449c:	4d0c      	ldr	r5, [pc, #48]	; (80044d0 <__libc_init_array+0x38>)
 800449e:	4c0d      	ldr	r4, [pc, #52]	; (80044d4 <__libc_init_array+0x3c>)
 80044a0:	1b64      	subs	r4, r4, r5
 80044a2:	10a4      	asrs	r4, r4, #2
 80044a4:	42a6      	cmp	r6, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	f000 fc5c 	bl	8004d64 <_init>
 80044ac:	2600      	movs	r6, #0
 80044ae:	4d0a      	ldr	r5, [pc, #40]	; (80044d8 <__libc_init_array+0x40>)
 80044b0:	4c0a      	ldr	r4, [pc, #40]	; (80044dc <__libc_init_array+0x44>)
 80044b2:	1b64      	subs	r4, r4, r5
 80044b4:	10a4      	asrs	r4, r4, #2
 80044b6:	42a6      	cmp	r6, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c0:	4798      	blx	r3
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ca:	4798      	blx	r3
 80044cc:	3601      	adds	r6, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	08004de4 	.word	0x08004de4
 80044d4:	08004de4 	.word	0x08004de4
 80044d8:	08004de4 	.word	0x08004de4
 80044dc:	08004de8 	.word	0x08004de8

080044e0 <memset>:
 80044e0:	4603      	mov	r3, r0
 80044e2:	4402      	add	r2, r0
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d100      	bne.n	80044ea <memset+0xa>
 80044e8:	4770      	bx	lr
 80044ea:	f803 1b01 	strb.w	r1, [r3], #1
 80044ee:	e7f9      	b.n	80044e4 <memset+0x4>

080044f0 <siprintf>:
 80044f0:	b40e      	push	{r1, r2, r3}
 80044f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044f6:	b500      	push	{lr}
 80044f8:	b09c      	sub	sp, #112	; 0x70
 80044fa:	ab1d      	add	r3, sp, #116	; 0x74
 80044fc:	9002      	str	r0, [sp, #8]
 80044fe:	9006      	str	r0, [sp, #24]
 8004500:	9107      	str	r1, [sp, #28]
 8004502:	9104      	str	r1, [sp, #16]
 8004504:	4808      	ldr	r0, [pc, #32]	; (8004528 <siprintf+0x38>)
 8004506:	4909      	ldr	r1, [pc, #36]	; (800452c <siprintf+0x3c>)
 8004508:	f853 2b04 	ldr.w	r2, [r3], #4
 800450c:	9105      	str	r1, [sp, #20]
 800450e:	6800      	ldr	r0, [r0, #0]
 8004510:	a902      	add	r1, sp, #8
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	f000 f868 	bl	80045e8 <_svfiprintf_r>
 8004518:	2200      	movs	r2, #0
 800451a:	9b02      	ldr	r3, [sp, #8]
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	b01c      	add	sp, #112	; 0x70
 8004520:	f85d eb04 	ldr.w	lr, [sp], #4
 8004524:	b003      	add	sp, #12
 8004526:	4770      	bx	lr
 8004528:	20000068 	.word	0x20000068
 800452c:	ffff0208 	.word	0xffff0208

08004530 <__ssputs_r>:
 8004530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004534:	688e      	ldr	r6, [r1, #8]
 8004536:	4682      	mov	sl, r0
 8004538:	429e      	cmp	r6, r3
 800453a:	460c      	mov	r4, r1
 800453c:	4690      	mov	r8, r2
 800453e:	461f      	mov	r7, r3
 8004540:	d838      	bhi.n	80045b4 <__ssputs_r+0x84>
 8004542:	898a      	ldrh	r2, [r1, #12]
 8004544:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004548:	d032      	beq.n	80045b0 <__ssputs_r+0x80>
 800454a:	6825      	ldr	r5, [r4, #0]
 800454c:	6909      	ldr	r1, [r1, #16]
 800454e:	3301      	adds	r3, #1
 8004550:	eba5 0901 	sub.w	r9, r5, r1
 8004554:	6965      	ldr	r5, [r4, #20]
 8004556:	444b      	add	r3, r9
 8004558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800455c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004560:	106d      	asrs	r5, r5, #1
 8004562:	429d      	cmp	r5, r3
 8004564:	bf38      	it	cc
 8004566:	461d      	movcc	r5, r3
 8004568:	0553      	lsls	r3, r2, #21
 800456a:	d531      	bpl.n	80045d0 <__ssputs_r+0xa0>
 800456c:	4629      	mov	r1, r5
 800456e:	f000 fb53 	bl	8004c18 <_malloc_r>
 8004572:	4606      	mov	r6, r0
 8004574:	b950      	cbnz	r0, 800458c <__ssputs_r+0x5c>
 8004576:	230c      	movs	r3, #12
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f8ca 3000 	str.w	r3, [sl]
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458c:	464a      	mov	r2, r9
 800458e:	6921      	ldr	r1, [r4, #16]
 8004590:	f000 face 	bl	8004b30 <memcpy>
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800459a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	6126      	str	r6, [r4, #16]
 80045a2:	444e      	add	r6, r9
 80045a4:	6026      	str	r6, [r4, #0]
 80045a6:	463e      	mov	r6, r7
 80045a8:	6165      	str	r5, [r4, #20]
 80045aa:	eba5 0509 	sub.w	r5, r5, r9
 80045ae:	60a5      	str	r5, [r4, #8]
 80045b0:	42be      	cmp	r6, r7
 80045b2:	d900      	bls.n	80045b6 <__ssputs_r+0x86>
 80045b4:	463e      	mov	r6, r7
 80045b6:	4632      	mov	r2, r6
 80045b8:	4641      	mov	r1, r8
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	f000 fac6 	bl	8004b4c <memmove>
 80045c0:	68a3      	ldr	r3, [r4, #8]
 80045c2:	6822      	ldr	r2, [r4, #0]
 80045c4:	1b9b      	subs	r3, r3, r6
 80045c6:	4432      	add	r2, r6
 80045c8:	2000      	movs	r0, #0
 80045ca:	60a3      	str	r3, [r4, #8]
 80045cc:	6022      	str	r2, [r4, #0]
 80045ce:	e7db      	b.n	8004588 <__ssputs_r+0x58>
 80045d0:	462a      	mov	r2, r5
 80045d2:	f000 fb7b 	bl	8004ccc <_realloc_r>
 80045d6:	4606      	mov	r6, r0
 80045d8:	2800      	cmp	r0, #0
 80045da:	d1e1      	bne.n	80045a0 <__ssputs_r+0x70>
 80045dc:	4650      	mov	r0, sl
 80045de:	6921      	ldr	r1, [r4, #16]
 80045e0:	f000 face 	bl	8004b80 <_free_r>
 80045e4:	e7c7      	b.n	8004576 <__ssputs_r+0x46>
	...

080045e8 <_svfiprintf_r>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	4698      	mov	r8, r3
 80045ee:	898b      	ldrh	r3, [r1, #12]
 80045f0:	4607      	mov	r7, r0
 80045f2:	061b      	lsls	r3, r3, #24
 80045f4:	460d      	mov	r5, r1
 80045f6:	4614      	mov	r4, r2
 80045f8:	b09d      	sub	sp, #116	; 0x74
 80045fa:	d50e      	bpl.n	800461a <_svfiprintf_r+0x32>
 80045fc:	690b      	ldr	r3, [r1, #16]
 80045fe:	b963      	cbnz	r3, 800461a <_svfiprintf_r+0x32>
 8004600:	2140      	movs	r1, #64	; 0x40
 8004602:	f000 fb09 	bl	8004c18 <_malloc_r>
 8004606:	6028      	str	r0, [r5, #0]
 8004608:	6128      	str	r0, [r5, #16]
 800460a:	b920      	cbnz	r0, 8004616 <_svfiprintf_r+0x2e>
 800460c:	230c      	movs	r3, #12
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	e0d1      	b.n	80047ba <_svfiprintf_r+0x1d2>
 8004616:	2340      	movs	r3, #64	; 0x40
 8004618:	616b      	str	r3, [r5, #20]
 800461a:	2300      	movs	r3, #0
 800461c:	9309      	str	r3, [sp, #36]	; 0x24
 800461e:	2320      	movs	r3, #32
 8004620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004624:	2330      	movs	r3, #48	; 0x30
 8004626:	f04f 0901 	mov.w	r9, #1
 800462a:	f8cd 800c 	str.w	r8, [sp, #12]
 800462e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047d4 <_svfiprintf_r+0x1ec>
 8004632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004636:	4623      	mov	r3, r4
 8004638:	469a      	mov	sl, r3
 800463a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800463e:	b10a      	cbz	r2, 8004644 <_svfiprintf_r+0x5c>
 8004640:	2a25      	cmp	r2, #37	; 0x25
 8004642:	d1f9      	bne.n	8004638 <_svfiprintf_r+0x50>
 8004644:	ebba 0b04 	subs.w	fp, sl, r4
 8004648:	d00b      	beq.n	8004662 <_svfiprintf_r+0x7a>
 800464a:	465b      	mov	r3, fp
 800464c:	4622      	mov	r2, r4
 800464e:	4629      	mov	r1, r5
 8004650:	4638      	mov	r0, r7
 8004652:	f7ff ff6d 	bl	8004530 <__ssputs_r>
 8004656:	3001      	adds	r0, #1
 8004658:	f000 80aa 	beq.w	80047b0 <_svfiprintf_r+0x1c8>
 800465c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800465e:	445a      	add	r2, fp
 8004660:	9209      	str	r2, [sp, #36]	; 0x24
 8004662:	f89a 3000 	ldrb.w	r3, [sl]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80a2 	beq.w	80047b0 <_svfiprintf_r+0x1c8>
 800466c:	2300      	movs	r3, #0
 800466e:	f04f 32ff 	mov.w	r2, #4294967295
 8004672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004676:	f10a 0a01 	add.w	sl, sl, #1
 800467a:	9304      	str	r3, [sp, #16]
 800467c:	9307      	str	r3, [sp, #28]
 800467e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004682:	931a      	str	r3, [sp, #104]	; 0x68
 8004684:	4654      	mov	r4, sl
 8004686:	2205      	movs	r2, #5
 8004688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468c:	4851      	ldr	r0, [pc, #324]	; (80047d4 <_svfiprintf_r+0x1ec>)
 800468e:	f000 fa41 	bl	8004b14 <memchr>
 8004692:	9a04      	ldr	r2, [sp, #16]
 8004694:	b9d8      	cbnz	r0, 80046ce <_svfiprintf_r+0xe6>
 8004696:	06d0      	lsls	r0, r2, #27
 8004698:	bf44      	itt	mi
 800469a:	2320      	movmi	r3, #32
 800469c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046a0:	0711      	lsls	r1, r2, #28
 80046a2:	bf44      	itt	mi
 80046a4:	232b      	movmi	r3, #43	; 0x2b
 80046a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046aa:	f89a 3000 	ldrb.w	r3, [sl]
 80046ae:	2b2a      	cmp	r3, #42	; 0x2a
 80046b0:	d015      	beq.n	80046de <_svfiprintf_r+0xf6>
 80046b2:	4654      	mov	r4, sl
 80046b4:	2000      	movs	r0, #0
 80046b6:	f04f 0c0a 	mov.w	ip, #10
 80046ba:	9a07      	ldr	r2, [sp, #28]
 80046bc:	4621      	mov	r1, r4
 80046be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046c2:	3b30      	subs	r3, #48	; 0x30
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	d94e      	bls.n	8004766 <_svfiprintf_r+0x17e>
 80046c8:	b1b0      	cbz	r0, 80046f8 <_svfiprintf_r+0x110>
 80046ca:	9207      	str	r2, [sp, #28]
 80046cc:	e014      	b.n	80046f8 <_svfiprintf_r+0x110>
 80046ce:	eba0 0308 	sub.w	r3, r0, r8
 80046d2:	fa09 f303 	lsl.w	r3, r9, r3
 80046d6:	4313      	orrs	r3, r2
 80046d8:	46a2      	mov	sl, r4
 80046da:	9304      	str	r3, [sp, #16]
 80046dc:	e7d2      	b.n	8004684 <_svfiprintf_r+0x9c>
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	1d19      	adds	r1, r3, #4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	9103      	str	r1, [sp, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bfbb      	ittet	lt
 80046ea:	425b      	neglt	r3, r3
 80046ec:	f042 0202 	orrlt.w	r2, r2, #2
 80046f0:	9307      	strge	r3, [sp, #28]
 80046f2:	9307      	strlt	r3, [sp, #28]
 80046f4:	bfb8      	it	lt
 80046f6:	9204      	strlt	r2, [sp, #16]
 80046f8:	7823      	ldrb	r3, [r4, #0]
 80046fa:	2b2e      	cmp	r3, #46	; 0x2e
 80046fc:	d10c      	bne.n	8004718 <_svfiprintf_r+0x130>
 80046fe:	7863      	ldrb	r3, [r4, #1]
 8004700:	2b2a      	cmp	r3, #42	; 0x2a
 8004702:	d135      	bne.n	8004770 <_svfiprintf_r+0x188>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	3402      	adds	r4, #2
 8004708:	1d1a      	adds	r2, r3, #4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	9203      	str	r2, [sp, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	bfb8      	it	lt
 8004712:	f04f 33ff 	movlt.w	r3, #4294967295
 8004716:	9305      	str	r3, [sp, #20]
 8004718:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047e4 <_svfiprintf_r+0x1fc>
 800471c:	2203      	movs	r2, #3
 800471e:	4650      	mov	r0, sl
 8004720:	7821      	ldrb	r1, [r4, #0]
 8004722:	f000 f9f7 	bl	8004b14 <memchr>
 8004726:	b140      	cbz	r0, 800473a <_svfiprintf_r+0x152>
 8004728:	2340      	movs	r3, #64	; 0x40
 800472a:	eba0 000a 	sub.w	r0, r0, sl
 800472e:	fa03 f000 	lsl.w	r0, r3, r0
 8004732:	9b04      	ldr	r3, [sp, #16]
 8004734:	3401      	adds	r4, #1
 8004736:	4303      	orrs	r3, r0
 8004738:	9304      	str	r3, [sp, #16]
 800473a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473e:	2206      	movs	r2, #6
 8004740:	4825      	ldr	r0, [pc, #148]	; (80047d8 <_svfiprintf_r+0x1f0>)
 8004742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004746:	f000 f9e5 	bl	8004b14 <memchr>
 800474a:	2800      	cmp	r0, #0
 800474c:	d038      	beq.n	80047c0 <_svfiprintf_r+0x1d8>
 800474e:	4b23      	ldr	r3, [pc, #140]	; (80047dc <_svfiprintf_r+0x1f4>)
 8004750:	bb1b      	cbnz	r3, 800479a <_svfiprintf_r+0x1b2>
 8004752:	9b03      	ldr	r3, [sp, #12]
 8004754:	3307      	adds	r3, #7
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	3308      	adds	r3, #8
 800475c:	9303      	str	r3, [sp, #12]
 800475e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004760:	4433      	add	r3, r6
 8004762:	9309      	str	r3, [sp, #36]	; 0x24
 8004764:	e767      	b.n	8004636 <_svfiprintf_r+0x4e>
 8004766:	460c      	mov	r4, r1
 8004768:	2001      	movs	r0, #1
 800476a:	fb0c 3202 	mla	r2, ip, r2, r3
 800476e:	e7a5      	b.n	80046bc <_svfiprintf_r+0xd4>
 8004770:	2300      	movs	r3, #0
 8004772:	f04f 0c0a 	mov.w	ip, #10
 8004776:	4619      	mov	r1, r3
 8004778:	3401      	adds	r4, #1
 800477a:	9305      	str	r3, [sp, #20]
 800477c:	4620      	mov	r0, r4
 800477e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004782:	3a30      	subs	r2, #48	; 0x30
 8004784:	2a09      	cmp	r2, #9
 8004786:	d903      	bls.n	8004790 <_svfiprintf_r+0x1a8>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0c5      	beq.n	8004718 <_svfiprintf_r+0x130>
 800478c:	9105      	str	r1, [sp, #20]
 800478e:	e7c3      	b.n	8004718 <_svfiprintf_r+0x130>
 8004790:	4604      	mov	r4, r0
 8004792:	2301      	movs	r3, #1
 8004794:	fb0c 2101 	mla	r1, ip, r1, r2
 8004798:	e7f0      	b.n	800477c <_svfiprintf_r+0x194>
 800479a:	ab03      	add	r3, sp, #12
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	462a      	mov	r2, r5
 80047a0:	4638      	mov	r0, r7
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <_svfiprintf_r+0x1f8>)
 80047a4:	a904      	add	r1, sp, #16
 80047a6:	f3af 8000 	nop.w
 80047aa:	1c42      	adds	r2, r0, #1
 80047ac:	4606      	mov	r6, r0
 80047ae:	d1d6      	bne.n	800475e <_svfiprintf_r+0x176>
 80047b0:	89ab      	ldrh	r3, [r5, #12]
 80047b2:	065b      	lsls	r3, r3, #25
 80047b4:	f53f af2c 	bmi.w	8004610 <_svfiprintf_r+0x28>
 80047b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ba:	b01d      	add	sp, #116	; 0x74
 80047bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c0:	ab03      	add	r3, sp, #12
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	462a      	mov	r2, r5
 80047c6:	4638      	mov	r0, r7
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <_svfiprintf_r+0x1f8>)
 80047ca:	a904      	add	r1, sp, #16
 80047cc:	f000 f87c 	bl	80048c8 <_printf_i>
 80047d0:	e7eb      	b.n	80047aa <_svfiprintf_r+0x1c2>
 80047d2:	bf00      	nop
 80047d4:	08004db0 	.word	0x08004db0
 80047d8:	08004dba 	.word	0x08004dba
 80047dc:	00000000 	.word	0x00000000
 80047e0:	08004531 	.word	0x08004531
 80047e4:	08004db6 	.word	0x08004db6

080047e8 <_printf_common>:
 80047e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ec:	4616      	mov	r6, r2
 80047ee:	4699      	mov	r9, r3
 80047f0:	688a      	ldr	r2, [r1, #8]
 80047f2:	690b      	ldr	r3, [r1, #16]
 80047f4:	4607      	mov	r7, r0
 80047f6:	4293      	cmp	r3, r2
 80047f8:	bfb8      	it	lt
 80047fa:	4613      	movlt	r3, r2
 80047fc:	6033      	str	r3, [r6, #0]
 80047fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004802:	460c      	mov	r4, r1
 8004804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004808:	b10a      	cbz	r2, 800480e <_printf_common+0x26>
 800480a:	3301      	adds	r3, #1
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	0699      	lsls	r1, r3, #26
 8004812:	bf42      	ittt	mi
 8004814:	6833      	ldrmi	r3, [r6, #0]
 8004816:	3302      	addmi	r3, #2
 8004818:	6033      	strmi	r3, [r6, #0]
 800481a:	6825      	ldr	r5, [r4, #0]
 800481c:	f015 0506 	ands.w	r5, r5, #6
 8004820:	d106      	bne.n	8004830 <_printf_common+0x48>
 8004822:	f104 0a19 	add.w	sl, r4, #25
 8004826:	68e3      	ldr	r3, [r4, #12]
 8004828:	6832      	ldr	r2, [r6, #0]
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	42ab      	cmp	r3, r5
 800482e:	dc28      	bgt.n	8004882 <_printf_common+0x9a>
 8004830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004834:	1e13      	subs	r3, r2, #0
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	bf18      	it	ne
 800483a:	2301      	movne	r3, #1
 800483c:	0692      	lsls	r2, r2, #26
 800483e:	d42d      	bmi.n	800489c <_printf_common+0xb4>
 8004840:	4649      	mov	r1, r9
 8004842:	4638      	mov	r0, r7
 8004844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004848:	47c0      	blx	r8
 800484a:	3001      	adds	r0, #1
 800484c:	d020      	beq.n	8004890 <_printf_common+0xa8>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	68e5      	ldr	r5, [r4, #12]
 8004852:	f003 0306 	and.w	r3, r3, #6
 8004856:	2b04      	cmp	r3, #4
 8004858:	bf18      	it	ne
 800485a:	2500      	movne	r5, #0
 800485c:	6832      	ldr	r2, [r6, #0]
 800485e:	f04f 0600 	mov.w	r6, #0
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	bf08      	it	eq
 8004866:	1aad      	subeq	r5, r5, r2
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	bf08      	it	eq
 800486c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004870:	4293      	cmp	r3, r2
 8004872:	bfc4      	itt	gt
 8004874:	1a9b      	subgt	r3, r3, r2
 8004876:	18ed      	addgt	r5, r5, r3
 8004878:	341a      	adds	r4, #26
 800487a:	42b5      	cmp	r5, r6
 800487c:	d11a      	bne.n	80048b4 <_printf_common+0xcc>
 800487e:	2000      	movs	r0, #0
 8004880:	e008      	b.n	8004894 <_printf_common+0xac>
 8004882:	2301      	movs	r3, #1
 8004884:	4652      	mov	r2, sl
 8004886:	4649      	mov	r1, r9
 8004888:	4638      	mov	r0, r7
 800488a:	47c0      	blx	r8
 800488c:	3001      	adds	r0, #1
 800488e:	d103      	bne.n	8004898 <_printf_common+0xb0>
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004898:	3501      	adds	r5, #1
 800489a:	e7c4      	b.n	8004826 <_printf_common+0x3e>
 800489c:	2030      	movs	r0, #48	; 0x30
 800489e:	18e1      	adds	r1, r4, r3
 80048a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048aa:	4422      	add	r2, r4
 80048ac:	3302      	adds	r3, #2
 80048ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b2:	e7c5      	b.n	8004840 <_printf_common+0x58>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4622      	mov	r2, r4
 80048b8:	4649      	mov	r1, r9
 80048ba:	4638      	mov	r0, r7
 80048bc:	47c0      	blx	r8
 80048be:	3001      	adds	r0, #1
 80048c0:	d0e6      	beq.n	8004890 <_printf_common+0xa8>
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7d9      	b.n	800487a <_printf_common+0x92>
	...

080048c8 <_printf_i>:
 80048c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	460c      	mov	r4, r1
 80048ce:	7e27      	ldrb	r7, [r4, #24]
 80048d0:	4691      	mov	r9, r2
 80048d2:	2f78      	cmp	r7, #120	; 0x78
 80048d4:	4680      	mov	r8, r0
 80048d6:	469a      	mov	sl, r3
 80048d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048de:	d807      	bhi.n	80048f0 <_printf_i+0x28>
 80048e0:	2f62      	cmp	r7, #98	; 0x62
 80048e2:	d80a      	bhi.n	80048fa <_printf_i+0x32>
 80048e4:	2f00      	cmp	r7, #0
 80048e6:	f000 80d9 	beq.w	8004a9c <_printf_i+0x1d4>
 80048ea:	2f58      	cmp	r7, #88	; 0x58
 80048ec:	f000 80a4 	beq.w	8004a38 <_printf_i+0x170>
 80048f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048f8:	e03a      	b.n	8004970 <_printf_i+0xa8>
 80048fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048fe:	2b15      	cmp	r3, #21
 8004900:	d8f6      	bhi.n	80048f0 <_printf_i+0x28>
 8004902:	a001      	add	r0, pc, #4	; (adr r0, 8004908 <_printf_i+0x40>)
 8004904:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004908:	08004961 	.word	0x08004961
 800490c:	08004975 	.word	0x08004975
 8004910:	080048f1 	.word	0x080048f1
 8004914:	080048f1 	.word	0x080048f1
 8004918:	080048f1 	.word	0x080048f1
 800491c:	080048f1 	.word	0x080048f1
 8004920:	08004975 	.word	0x08004975
 8004924:	080048f1 	.word	0x080048f1
 8004928:	080048f1 	.word	0x080048f1
 800492c:	080048f1 	.word	0x080048f1
 8004930:	080048f1 	.word	0x080048f1
 8004934:	08004a83 	.word	0x08004a83
 8004938:	080049a5 	.word	0x080049a5
 800493c:	08004a65 	.word	0x08004a65
 8004940:	080048f1 	.word	0x080048f1
 8004944:	080048f1 	.word	0x080048f1
 8004948:	08004aa5 	.word	0x08004aa5
 800494c:	080048f1 	.word	0x080048f1
 8004950:	080049a5 	.word	0x080049a5
 8004954:	080048f1 	.word	0x080048f1
 8004958:	080048f1 	.word	0x080048f1
 800495c:	08004a6d 	.word	0x08004a6d
 8004960:	680b      	ldr	r3, [r1, #0]
 8004962:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	600a      	str	r2, [r1, #0]
 800496c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004970:	2301      	movs	r3, #1
 8004972:	e0a4      	b.n	8004abe <_printf_i+0x1f6>
 8004974:	6825      	ldr	r5, [r4, #0]
 8004976:	6808      	ldr	r0, [r1, #0]
 8004978:	062e      	lsls	r6, r5, #24
 800497a:	f100 0304 	add.w	r3, r0, #4
 800497e:	d50a      	bpl.n	8004996 <_printf_i+0xce>
 8004980:	6805      	ldr	r5, [r0, #0]
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	2d00      	cmp	r5, #0
 8004986:	da03      	bge.n	8004990 <_printf_i+0xc8>
 8004988:	232d      	movs	r3, #45	; 0x2d
 800498a:	426d      	negs	r5, r5
 800498c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004990:	230a      	movs	r3, #10
 8004992:	485e      	ldr	r0, [pc, #376]	; (8004b0c <_printf_i+0x244>)
 8004994:	e019      	b.n	80049ca <_printf_i+0x102>
 8004996:	f015 0f40 	tst.w	r5, #64	; 0x40
 800499a:	6805      	ldr	r5, [r0, #0]
 800499c:	600b      	str	r3, [r1, #0]
 800499e:	bf18      	it	ne
 80049a0:	b22d      	sxthne	r5, r5
 80049a2:	e7ef      	b.n	8004984 <_printf_i+0xbc>
 80049a4:	680b      	ldr	r3, [r1, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	1d18      	adds	r0, r3, #4
 80049aa:	6008      	str	r0, [r1, #0]
 80049ac:	0628      	lsls	r0, r5, #24
 80049ae:	d501      	bpl.n	80049b4 <_printf_i+0xec>
 80049b0:	681d      	ldr	r5, [r3, #0]
 80049b2:	e002      	b.n	80049ba <_printf_i+0xf2>
 80049b4:	0669      	lsls	r1, r5, #25
 80049b6:	d5fb      	bpl.n	80049b0 <_printf_i+0xe8>
 80049b8:	881d      	ldrh	r5, [r3, #0]
 80049ba:	2f6f      	cmp	r7, #111	; 0x6f
 80049bc:	bf0c      	ite	eq
 80049be:	2308      	moveq	r3, #8
 80049c0:	230a      	movne	r3, #10
 80049c2:	4852      	ldr	r0, [pc, #328]	; (8004b0c <_printf_i+0x244>)
 80049c4:	2100      	movs	r1, #0
 80049c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ca:	6866      	ldr	r6, [r4, #4]
 80049cc:	2e00      	cmp	r6, #0
 80049ce:	bfa8      	it	ge
 80049d0:	6821      	ldrge	r1, [r4, #0]
 80049d2:	60a6      	str	r6, [r4, #8]
 80049d4:	bfa4      	itt	ge
 80049d6:	f021 0104 	bicge.w	r1, r1, #4
 80049da:	6021      	strge	r1, [r4, #0]
 80049dc:	b90d      	cbnz	r5, 80049e2 <_printf_i+0x11a>
 80049de:	2e00      	cmp	r6, #0
 80049e0:	d04d      	beq.n	8004a7e <_printf_i+0x1b6>
 80049e2:	4616      	mov	r6, r2
 80049e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049e8:	fb03 5711 	mls	r7, r3, r1, r5
 80049ec:	5dc7      	ldrb	r7, [r0, r7]
 80049ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049f2:	462f      	mov	r7, r5
 80049f4:	42bb      	cmp	r3, r7
 80049f6:	460d      	mov	r5, r1
 80049f8:	d9f4      	bls.n	80049e4 <_printf_i+0x11c>
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d10b      	bne.n	8004a16 <_printf_i+0x14e>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	07df      	lsls	r7, r3, #31
 8004a02:	d508      	bpl.n	8004a16 <_printf_i+0x14e>
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	6861      	ldr	r1, [r4, #4]
 8004a08:	4299      	cmp	r1, r3
 8004a0a:	bfde      	ittt	le
 8004a0c:	2330      	movle	r3, #48	; 0x30
 8004a0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a16:	1b92      	subs	r2, r2, r6
 8004a18:	6122      	str	r2, [r4, #16]
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	4640      	mov	r0, r8
 8004a20:	f8cd a000 	str.w	sl, [sp]
 8004a24:	aa03      	add	r2, sp, #12
 8004a26:	f7ff fedf 	bl	80047e8 <_printf_common>
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d14c      	bne.n	8004ac8 <_printf_i+0x200>
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a32:	b004      	add	sp, #16
 8004a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a38:	4834      	ldr	r0, [pc, #208]	; (8004b0c <_printf_i+0x244>)
 8004a3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a3e:	680e      	ldr	r6, [r1, #0]
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a46:	061f      	lsls	r7, r3, #24
 8004a48:	600e      	str	r6, [r1, #0]
 8004a4a:	d514      	bpl.n	8004a76 <_printf_i+0x1ae>
 8004a4c:	07d9      	lsls	r1, r3, #31
 8004a4e:	bf44      	itt	mi
 8004a50:	f043 0320 	orrmi.w	r3, r3, #32
 8004a54:	6023      	strmi	r3, [r4, #0]
 8004a56:	b91d      	cbnz	r5, 8004a60 <_printf_i+0x198>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	f023 0320 	bic.w	r3, r3, #32
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	2310      	movs	r3, #16
 8004a62:	e7af      	b.n	80049c4 <_printf_i+0xfc>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	f043 0320 	orr.w	r3, r3, #32
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	2378      	movs	r3, #120	; 0x78
 8004a6e:	4828      	ldr	r0, [pc, #160]	; (8004b10 <_printf_i+0x248>)
 8004a70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a74:	e7e3      	b.n	8004a3e <_printf_i+0x176>
 8004a76:	065e      	lsls	r6, r3, #25
 8004a78:	bf48      	it	mi
 8004a7a:	b2ad      	uxthmi	r5, r5
 8004a7c:	e7e6      	b.n	8004a4c <_printf_i+0x184>
 8004a7e:	4616      	mov	r6, r2
 8004a80:	e7bb      	b.n	80049fa <_printf_i+0x132>
 8004a82:	680b      	ldr	r3, [r1, #0]
 8004a84:	6826      	ldr	r6, [r4, #0]
 8004a86:	1d1d      	adds	r5, r3, #4
 8004a88:	6960      	ldr	r0, [r4, #20]
 8004a8a:	600d      	str	r5, [r1, #0]
 8004a8c:	0635      	lsls	r5, r6, #24
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	d501      	bpl.n	8004a96 <_printf_i+0x1ce>
 8004a92:	6018      	str	r0, [r3, #0]
 8004a94:	e002      	b.n	8004a9c <_printf_i+0x1d4>
 8004a96:	0671      	lsls	r1, r6, #25
 8004a98:	d5fb      	bpl.n	8004a92 <_printf_i+0x1ca>
 8004a9a:	8018      	strh	r0, [r3, #0]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4616      	mov	r6, r2
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	e7ba      	b.n	8004a1a <_printf_i+0x152>
 8004aa4:	680b      	ldr	r3, [r1, #0]
 8004aa6:	1d1a      	adds	r2, r3, #4
 8004aa8:	600a      	str	r2, [r1, #0]
 8004aaa:	681e      	ldr	r6, [r3, #0]
 8004aac:	2100      	movs	r1, #0
 8004aae:	4630      	mov	r0, r6
 8004ab0:	6862      	ldr	r2, [r4, #4]
 8004ab2:	f000 f82f 	bl	8004b14 <memchr>
 8004ab6:	b108      	cbz	r0, 8004abc <_printf_i+0x1f4>
 8004ab8:	1b80      	subs	r0, r0, r6
 8004aba:	6060      	str	r0, [r4, #4]
 8004abc:	6863      	ldr	r3, [r4, #4]
 8004abe:	6123      	str	r3, [r4, #16]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac6:	e7a8      	b.n	8004a1a <_printf_i+0x152>
 8004ac8:	4632      	mov	r2, r6
 8004aca:	4649      	mov	r1, r9
 8004acc:	4640      	mov	r0, r8
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	47d0      	blx	sl
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d0ab      	beq.n	8004a2e <_printf_i+0x166>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	079b      	lsls	r3, r3, #30
 8004ada:	d413      	bmi.n	8004b04 <_printf_i+0x23c>
 8004adc:	68e0      	ldr	r0, [r4, #12]
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	4298      	cmp	r0, r3
 8004ae2:	bfb8      	it	lt
 8004ae4:	4618      	movlt	r0, r3
 8004ae6:	e7a4      	b.n	8004a32 <_printf_i+0x16a>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4632      	mov	r2, r6
 8004aec:	4649      	mov	r1, r9
 8004aee:	4640      	mov	r0, r8
 8004af0:	47d0      	blx	sl
 8004af2:	3001      	adds	r0, #1
 8004af4:	d09b      	beq.n	8004a2e <_printf_i+0x166>
 8004af6:	3501      	adds	r5, #1
 8004af8:	68e3      	ldr	r3, [r4, #12]
 8004afa:	9903      	ldr	r1, [sp, #12]
 8004afc:	1a5b      	subs	r3, r3, r1
 8004afe:	42ab      	cmp	r3, r5
 8004b00:	dcf2      	bgt.n	8004ae8 <_printf_i+0x220>
 8004b02:	e7eb      	b.n	8004adc <_printf_i+0x214>
 8004b04:	2500      	movs	r5, #0
 8004b06:	f104 0619 	add.w	r6, r4, #25
 8004b0a:	e7f5      	b.n	8004af8 <_printf_i+0x230>
 8004b0c:	08004dc1 	.word	0x08004dc1
 8004b10:	08004dd2 	.word	0x08004dd2

08004b14 <memchr>:
 8004b14:	4603      	mov	r3, r0
 8004b16:	b510      	push	{r4, lr}
 8004b18:	b2c9      	uxtb	r1, r1
 8004b1a:	4402      	add	r2, r0
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	d101      	bne.n	8004b26 <memchr+0x12>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e003      	b.n	8004b2e <memchr+0x1a>
 8004b26:	7804      	ldrb	r4, [r0, #0]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	428c      	cmp	r4, r1
 8004b2c:	d1f6      	bne.n	8004b1c <memchr+0x8>
 8004b2e:	bd10      	pop	{r4, pc}

08004b30 <memcpy>:
 8004b30:	440a      	add	r2, r1
 8004b32:	4291      	cmp	r1, r2
 8004b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b38:	d100      	bne.n	8004b3c <memcpy+0xc>
 8004b3a:	4770      	bx	lr
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b42:	4291      	cmp	r1, r2
 8004b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b48:	d1f9      	bne.n	8004b3e <memcpy+0xe>
 8004b4a:	bd10      	pop	{r4, pc}

08004b4c <memmove>:
 8004b4c:	4288      	cmp	r0, r1
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	eb01 0402 	add.w	r4, r1, r2
 8004b54:	d902      	bls.n	8004b5c <memmove+0x10>
 8004b56:	4284      	cmp	r4, r0
 8004b58:	4623      	mov	r3, r4
 8004b5a:	d807      	bhi.n	8004b6c <memmove+0x20>
 8004b5c:	1e43      	subs	r3, r0, #1
 8004b5e:	42a1      	cmp	r1, r4
 8004b60:	d008      	beq.n	8004b74 <memmove+0x28>
 8004b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b6a:	e7f8      	b.n	8004b5e <memmove+0x12>
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	4402      	add	r2, r0
 8004b70:	428a      	cmp	r2, r1
 8004b72:	d100      	bne.n	8004b76 <memmove+0x2a>
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b7e:	e7f7      	b.n	8004b70 <memmove+0x24>

08004b80 <_free_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	4605      	mov	r5, r0
 8004b84:	2900      	cmp	r1, #0
 8004b86:	d043      	beq.n	8004c10 <_free_r+0x90>
 8004b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b8c:	1f0c      	subs	r4, r1, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bfb8      	it	lt
 8004b92:	18e4      	addlt	r4, r4, r3
 8004b94:	f000 f8d0 	bl	8004d38 <__malloc_lock>
 8004b98:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <_free_r+0x94>)
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	b933      	cbnz	r3, 8004bae <_free_r+0x2e>
 8004ba0:	6063      	str	r3, [r4, #4]
 8004ba2:	6014      	str	r4, [r2, #0]
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004baa:	f000 b8cb 	b.w	8004d44 <__malloc_unlock>
 8004bae:	42a3      	cmp	r3, r4
 8004bb0:	d90a      	bls.n	8004bc8 <_free_r+0x48>
 8004bb2:	6821      	ldr	r1, [r4, #0]
 8004bb4:	1862      	adds	r2, r4, r1
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	bf01      	itttt	eq
 8004bba:	681a      	ldreq	r2, [r3, #0]
 8004bbc:	685b      	ldreq	r3, [r3, #4]
 8004bbe:	1852      	addeq	r2, r2, r1
 8004bc0:	6022      	streq	r2, [r4, #0]
 8004bc2:	6063      	str	r3, [r4, #4]
 8004bc4:	6004      	str	r4, [r0, #0]
 8004bc6:	e7ed      	b.n	8004ba4 <_free_r+0x24>
 8004bc8:	461a      	mov	r2, r3
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	b10b      	cbz	r3, 8004bd2 <_free_r+0x52>
 8004bce:	42a3      	cmp	r3, r4
 8004bd0:	d9fa      	bls.n	8004bc8 <_free_r+0x48>
 8004bd2:	6811      	ldr	r1, [r2, #0]
 8004bd4:	1850      	adds	r0, r2, r1
 8004bd6:	42a0      	cmp	r0, r4
 8004bd8:	d10b      	bne.n	8004bf2 <_free_r+0x72>
 8004bda:	6820      	ldr	r0, [r4, #0]
 8004bdc:	4401      	add	r1, r0
 8004bde:	1850      	adds	r0, r2, r1
 8004be0:	4283      	cmp	r3, r0
 8004be2:	6011      	str	r1, [r2, #0]
 8004be4:	d1de      	bne.n	8004ba4 <_free_r+0x24>
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4401      	add	r1, r0
 8004bec:	6011      	str	r1, [r2, #0]
 8004bee:	6053      	str	r3, [r2, #4]
 8004bf0:	e7d8      	b.n	8004ba4 <_free_r+0x24>
 8004bf2:	d902      	bls.n	8004bfa <_free_r+0x7a>
 8004bf4:	230c      	movs	r3, #12
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	e7d4      	b.n	8004ba4 <_free_r+0x24>
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	1821      	adds	r1, r4, r0
 8004bfe:	428b      	cmp	r3, r1
 8004c00:	bf01      	itttt	eq
 8004c02:	6819      	ldreq	r1, [r3, #0]
 8004c04:	685b      	ldreq	r3, [r3, #4]
 8004c06:	1809      	addeq	r1, r1, r0
 8004c08:	6021      	streq	r1, [r4, #0]
 8004c0a:	6063      	str	r3, [r4, #4]
 8004c0c:	6054      	str	r4, [r2, #4]
 8004c0e:	e7c9      	b.n	8004ba4 <_free_r+0x24>
 8004c10:	bd38      	pop	{r3, r4, r5, pc}
 8004c12:	bf00      	nop
 8004c14:	20000150 	.word	0x20000150

08004c18 <_malloc_r>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	1ccd      	adds	r5, r1, #3
 8004c1c:	f025 0503 	bic.w	r5, r5, #3
 8004c20:	3508      	adds	r5, #8
 8004c22:	2d0c      	cmp	r5, #12
 8004c24:	bf38      	it	cc
 8004c26:	250c      	movcc	r5, #12
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	db01      	blt.n	8004c32 <_malloc_r+0x1a>
 8004c2e:	42a9      	cmp	r1, r5
 8004c30:	d903      	bls.n	8004c3a <_malloc_r+0x22>
 8004c32:	230c      	movs	r3, #12
 8004c34:	6033      	str	r3, [r6, #0]
 8004c36:	2000      	movs	r0, #0
 8004c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c3a:	f000 f87d 	bl	8004d38 <__malloc_lock>
 8004c3e:	4921      	ldr	r1, [pc, #132]	; (8004cc4 <_malloc_r+0xac>)
 8004c40:	680a      	ldr	r2, [r1, #0]
 8004c42:	4614      	mov	r4, r2
 8004c44:	b99c      	cbnz	r4, 8004c6e <_malloc_r+0x56>
 8004c46:	4f20      	ldr	r7, [pc, #128]	; (8004cc8 <_malloc_r+0xb0>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	b923      	cbnz	r3, 8004c56 <_malloc_r+0x3e>
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 f862 	bl	8004d18 <_sbrk_r>
 8004c54:	6038      	str	r0, [r7, #0]
 8004c56:	4629      	mov	r1, r5
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f000 f85d 	bl	8004d18 <_sbrk_r>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	d123      	bne.n	8004caa <_malloc_r+0x92>
 8004c62:	230c      	movs	r3, #12
 8004c64:	4630      	mov	r0, r6
 8004c66:	6033      	str	r3, [r6, #0]
 8004c68:	f000 f86c 	bl	8004d44 <__malloc_unlock>
 8004c6c:	e7e3      	b.n	8004c36 <_malloc_r+0x1e>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	1b5b      	subs	r3, r3, r5
 8004c72:	d417      	bmi.n	8004ca4 <_malloc_r+0x8c>
 8004c74:	2b0b      	cmp	r3, #11
 8004c76:	d903      	bls.n	8004c80 <_malloc_r+0x68>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	441c      	add	r4, r3
 8004c7c:	6025      	str	r5, [r4, #0]
 8004c7e:	e004      	b.n	8004c8a <_malloc_r+0x72>
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	42a2      	cmp	r2, r4
 8004c84:	bf0c      	ite	eq
 8004c86:	600b      	streq	r3, [r1, #0]
 8004c88:	6053      	strne	r3, [r2, #4]
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f000 f85a 	bl	8004d44 <__malloc_unlock>
 8004c90:	f104 000b 	add.w	r0, r4, #11
 8004c94:	1d23      	adds	r3, r4, #4
 8004c96:	f020 0007 	bic.w	r0, r0, #7
 8004c9a:	1ac2      	subs	r2, r0, r3
 8004c9c:	d0cc      	beq.n	8004c38 <_malloc_r+0x20>
 8004c9e:	1a1b      	subs	r3, r3, r0
 8004ca0:	50a3      	str	r3, [r4, r2]
 8004ca2:	e7c9      	b.n	8004c38 <_malloc_r+0x20>
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	6864      	ldr	r4, [r4, #4]
 8004ca8:	e7cc      	b.n	8004c44 <_malloc_r+0x2c>
 8004caa:	1cc4      	adds	r4, r0, #3
 8004cac:	f024 0403 	bic.w	r4, r4, #3
 8004cb0:	42a0      	cmp	r0, r4
 8004cb2:	d0e3      	beq.n	8004c7c <_malloc_r+0x64>
 8004cb4:	1a21      	subs	r1, r4, r0
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	f000 f82e 	bl	8004d18 <_sbrk_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d1dd      	bne.n	8004c7c <_malloc_r+0x64>
 8004cc0:	e7cf      	b.n	8004c62 <_malloc_r+0x4a>
 8004cc2:	bf00      	nop
 8004cc4:	20000150 	.word	0x20000150
 8004cc8:	20000154 	.word	0x20000154

08004ccc <_realloc_r>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	4607      	mov	r7, r0
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	460e      	mov	r6, r1
 8004cd4:	b921      	cbnz	r1, 8004ce0 <_realloc_r+0x14>
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cdc:	f7ff bf9c 	b.w	8004c18 <_malloc_r>
 8004ce0:	b922      	cbnz	r2, 8004cec <_realloc_r+0x20>
 8004ce2:	f7ff ff4d 	bl	8004b80 <_free_r>
 8004ce6:	4625      	mov	r5, r4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cec:	f000 f830 	bl	8004d50 <_malloc_usable_size_r>
 8004cf0:	42a0      	cmp	r0, r4
 8004cf2:	d20f      	bcs.n	8004d14 <_realloc_r+0x48>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	f7ff ff8e 	bl	8004c18 <_malloc_r>
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0f2      	beq.n	8004ce8 <_realloc_r+0x1c>
 8004d02:	4631      	mov	r1, r6
 8004d04:	4622      	mov	r2, r4
 8004d06:	f7ff ff13 	bl	8004b30 <memcpy>
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f7ff ff37 	bl	8004b80 <_free_r>
 8004d12:	e7e9      	b.n	8004ce8 <_realloc_r+0x1c>
 8004d14:	4635      	mov	r5, r6
 8004d16:	e7e7      	b.n	8004ce8 <_realloc_r+0x1c>

08004d18 <_sbrk_r>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	4d05      	ldr	r5, [pc, #20]	; (8004d34 <_sbrk_r+0x1c>)
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4608      	mov	r0, r1
 8004d22:	602b      	str	r3, [r5, #0]
 8004d24:	f7fc fad0 	bl	80012c8 <_sbrk>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d102      	bne.n	8004d32 <_sbrk_r+0x1a>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	b103      	cbz	r3, 8004d32 <_sbrk_r+0x1a>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	2000023c 	.word	0x2000023c

08004d38 <__malloc_lock>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__malloc_lock+0x8>)
 8004d3a:	f000 b811 	b.w	8004d60 <__retarget_lock_acquire_recursive>
 8004d3e:	bf00      	nop
 8004d40:	20000244 	.word	0x20000244

08004d44 <__malloc_unlock>:
 8004d44:	4801      	ldr	r0, [pc, #4]	; (8004d4c <__malloc_unlock+0x8>)
 8004d46:	f000 b80c 	b.w	8004d62 <__retarget_lock_release_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	20000244 	.word	0x20000244

08004d50 <_malloc_usable_size_r>:
 8004d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d54:	1f18      	subs	r0, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfbc      	itt	lt
 8004d5a:	580b      	ldrlt	r3, [r1, r0]
 8004d5c:	18c0      	addlt	r0, r0, r3
 8004d5e:	4770      	bx	lr

08004d60 <__retarget_lock_acquire_recursive>:
 8004d60:	4770      	bx	lr

08004d62 <__retarget_lock_release_recursive>:
 8004d62:	4770      	bx	lr

08004d64 <_init>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr

08004d70 <_fini>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr
