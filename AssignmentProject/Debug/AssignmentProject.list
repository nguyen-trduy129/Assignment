
AssignmentProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800402c  0800402c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800402c  0800402c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800402c  0800402c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000068  0800409c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800409c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f85d  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a1  00000000  00000000  0002f8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00032090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00032e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180d5  00000000  00000000  00033a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104bf  00000000  00000000  0004bb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c72  00000000  00000000  0005c00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2c7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000359c  00000000  00000000  000e2cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fec 	.word	0x08003fec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003fec 	.word	0x08003fec

0800014c <isButton1Pressed>:

int KeyReg3[4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int timeForKeyPressed[4] = {300/TICK, 300/TICK, 300/TICK, 300/TICK};

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag ==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000084 	.word	0x20000084

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag ==1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000088 	.word	0x20000088

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag ==1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000008c 	.word	0x2000008c

080001b8 <isButtonPedesPressed>:

int isButtonPedesPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if (buttonPedes_flag ==1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButtonPedesPressed+0x16>
		buttonPedes_flag =0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButtonPedesPressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000090 	.word	0x20000090

080001dc <doProcess>:

void doProcess(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d81a      	bhi.n	8000220 <doProcess+0x44>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <doProcess+0x14>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000201 	.word	0x08000201
 80001f4:	08000209 	.word	0x08000209
 80001f8:	08000211 	.word	0x08000211
 80001fc:	08000219 	.word	0x08000219
	switch (i){
	case 0:
		button1_flag =1;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <doProcess+0x50>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
		break;
 8000206:	e00c      	b.n	8000222 <doProcess+0x46>
	case 1:
		button2_flag =1;
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <doProcess+0x54>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
		break;
 800020e:	e008      	b.n	8000222 <doProcess+0x46>
	case 2:
		button3_flag =1;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <doProcess+0x58>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
		break;
 8000216:	e004      	b.n	8000222 <doProcess+0x46>
	case 3:
		buttonPedes_flag =1;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <doProcess+0x5c>)
 800021a:	2201      	movs	r2, #1
 800021c:	601a      	str	r2, [r3, #0]
		break;
 800021e:	e000      	b.n	8000222 <doProcess+0x46>
	default:
		break;
 8000220:	bf00      	nop
	}
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	20000084 	.word	0x20000084
 8000230:	20000088 	.word	0x20000088
 8000234:	2000008c 	.word	0x2000008c
 8000238:	20000090 	.word	0x20000090

0800023c <readPin>:


int readPin(int i){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d822      	bhi.n	8000290 <readPin+0x54>
 800024a:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <readPin+0x14>)
 800024c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000250:	08000261 	.word	0x08000261
 8000254:	0800026d 	.word	0x0800026d
 8000258:	08000279 	.word	0x08000279
 800025c:	08000285 	.word	0x08000285
	switch(i){
	case 0:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON1_Pin);
 8000260:	2102      	movs	r1, #2
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <readPin+0x60>)
 8000264:	f001 feda 	bl	800201c <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	e012      	b.n	8000292 <readPin+0x56>
		break;
	case 1:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON2_Pin);
 800026c:	2110      	movs	r1, #16
 800026e:	480b      	ldr	r0, [pc, #44]	; (800029c <readPin+0x60>)
 8000270:	f001 fed4 	bl	800201c <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	e00c      	b.n	8000292 <readPin+0x56>
		break;
	case 2:
		return HAL_GPIO_ReadPin(GPIOB, BUTTON3_Pin);
 8000278:	2101      	movs	r1, #1
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <readPin+0x64>)
 800027c:	f001 fece 	bl	800201c <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	e006      	b.n	8000292 <readPin+0x56>
		break;
	case 3:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON_PEDES_Pin);
 8000284:	2101      	movs	r1, #1
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <readPin+0x60>)
 8000288:	f001 fec8 	bl	800201c <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	e000      	b.n	8000292 <readPin+0x56>
		break;
	default:
		return GPIO_PIN_RESET;
 8000290:	2300      	movs	r3, #0
		break;
	}
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <getKeyInput>:


void getKeyInput(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	for (int i =0; i<4; i++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e068      	b.n	8000382 <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 80002b0:	4a38      	ldr	r2, [pc, #224]	; (8000394 <getKeyInput+0xf0>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	4937      	ldr	r1, [pc, #220]	; (8000398 <getKeyInput+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80002c0:	4a36      	ldr	r2, [pc, #216]	; (800039c <getKeyInput+0xf8>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c8:	4932      	ldr	r1, [pc, #200]	; (8000394 <getKeyInput+0xf0>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = readPin(i);
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f7ff ffb3 	bl	800023c <readPin>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4930      	ldr	r1, [pc, #192]	; (800039c <getKeyInput+0xf8>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 80002e0:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <getKeyInput+0xf4>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e8:	492a      	ldr	r1, [pc, #168]	; (8000394 <getKeyInput+0xf0>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d143      	bne.n	800037c <getKeyInput+0xd8>
 80002f4:	4a27      	ldr	r2, [pc, #156]	; (8000394 <getKeyInput+0xf0>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fc:	4927      	ldr	r1, [pc, #156]	; (800039c <getKeyInput+0xf8>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000304:	429a      	cmp	r2, r3
 8000306:	d139      	bne.n	800037c <getKeyInput+0xd8>
			if (KeyReg2[i] != KeyReg3[i]){
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <getKeyInput+0xf8>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4923      	ldr	r1, [pc, #140]	; (80003a0 <getKeyInput+0xfc>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d016      	beq.n	800034a <getKeyInput+0xa6>
				KeyReg3[i] = KeyReg2[i];
 800031c:	4a1f      	ldr	r2, [pc, #124]	; (800039c <getKeyInput+0xf8>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	491e      	ldr	r1, [pc, #120]	; (80003a0 <getKeyInput+0xfc>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <getKeyInput+0xf8>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d121      	bne.n	800037c <getKeyInput+0xd8>
					timeForKeyPressed[i] = 300/TICK;
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <getKeyInput+0x100>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	211e      	movs	r1, #30
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					doProcess(i);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff4a 	bl	80001dc <doProcess>
 8000348:	e018      	b.n	800037c <getKeyInput+0xd8>
				}
			}else {
				timeForKeyPressed[i]--;
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <getKeyInput+0x100>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4913      	ldr	r1, [pc, #76]	; (80003a4 <getKeyInput+0x100>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeForKeyPressed[i] ==0){
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <getKeyInput+0x100>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d109      	bne.n	800037c <getKeyInput+0xd8>
					KeyReg3[i] =NORMAL_STATE;
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <getKeyInput+0xfc>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2101      	movs	r1, #1
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeForKeyPressed[i] = 300/TICK;
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <getKeyInput+0x100>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	211e      	movs	r1, #30
 8000378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0; i<4; i++){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b03      	cmp	r3, #3
 8000386:	dd93      	ble.n	80002b0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000010 	.word	0x20000010
 8000398:	20000000 	.word	0x20000000
 800039c:	20000020 	.word	0x20000020
 80003a0:	20000030 	.word	0x20000030
 80003a4:	20000040 	.word	0x20000040

080003a8 <modeRun>:
 */


#include "fsm_mode.h"

void modeRun(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	switch(mode){
 80003ac:	4bae      	ldr	r3, [pc, #696]	; (8000668 <modeRun+0x2c0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	f200 8186 	bhi.w	80006c2 <modeRun+0x31a>
 80003b6:	a201      	add	r2, pc, #4	; (adr r2, 80003bc <modeRun+0x14>)
 80003b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003bc:	080003cd 	.word	0x080003cd
 80003c0:	080003d5 	.word	0x080003d5
 80003c4:	080003e9 	.word	0x080003e9
 80003c8:	08000537 	.word	0x08000537
	case INIT_MODE:
		mode = MODE_1;
 80003cc:	4ba6      	ldr	r3, [pc, #664]	; (8000668 <modeRun+0x2c0>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
		break;
 80003d2:	e176      	b.n	80006c2 <modeRun+0x31a>
	case MODE_1:
		if (isButton1Pressed()){
 80003d4:	f7ff feba 	bl	800014c <isButton1Pressed>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f000 816c 	beq.w	80006b8 <modeRun+0x310>
			mode = MODE_2;
 80003e0:	4ba1      	ldr	r3, [pc, #644]	; (8000668 <modeRun+0x2c0>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	601a      	str	r2, [r3, #0]
		}
		break;
 80003e6:	e167      	b.n	80006b8 <modeRun+0x310>
	case MODE_2:
		if (isButton1Pressed()){
 80003e8:	f7ff feb0 	bl	800014c <isButton1Pressed>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d002      	beq.n	80003f8 <modeRun+0x50>
			mode = MODE_3;
 80003f2:	4b9d      	ldr	r3, [pc, #628]	; (8000668 <modeRun+0x2c0>)
 80003f4:	2203      	movs	r2, #3
 80003f6:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 80003f8:	f7ff feba 	bl	8000170 <isButton2Pressed>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d046      	beq.n	8000490 <modeRun+0xe8>
			switch(state_1){
 8000402:	4b9a      	ldr	r3, [pc, #616]	; (800066c <modeRun+0x2c4>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b0d      	cmp	r3, #13
 8000408:	d00e      	beq.n	8000428 <modeRun+0x80>
 800040a:	2b0d      	cmp	r3, #13
 800040c:	dc1c      	bgt.n	8000448 <modeRun+0xa0>
 800040e:	2b0b      	cmp	r3, #11
 8000410:	d002      	beq.n	8000418 <modeRun+0x70>
 8000412:	2b0c      	cmp	r3, #12
 8000414:	d010      	beq.n	8000438 <modeRun+0x90>
			case MAN_AMBER:
				state_1= MAN_RED;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 8000416:	e017      	b.n	8000448 <modeRun+0xa0>
				state_1= MAN_GREEN;
 8000418:	4b94      	ldr	r3, [pc, #592]	; (800066c <modeRun+0x2c4>)
 800041a:	220d      	movs	r2, #13
 800041c:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 800041e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000422:	f000 fc2f 	bl	8000c84 <setTimer2>
				break;
 8000426:	e010      	b.n	800044a <modeRun+0xa2>
				state_1= MAN_AMBER;
 8000428:	4b90      	ldr	r3, [pc, #576]	; (800066c <modeRun+0x2c4>)
 800042a:	220c      	movs	r2, #12
 800042c:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 800042e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000432:	f000 fc27 	bl	8000c84 <setTimer2>
				break;
 8000436:	e008      	b.n	800044a <modeRun+0xa2>
				state_1= MAN_RED;
 8000438:	4b8c      	ldr	r3, [pc, #560]	; (800066c <modeRun+0x2c4>)
 800043a:	220b      	movs	r2, #11
 800043c:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 800043e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000442:	f000 fc1f 	bl	8000c84 <setTimer2>
				break;
 8000446:	e000      	b.n	800044a <modeRun+0xa2>
				break;
 8000448:	bf00      	nop
			}

			switch(state_2){
 800044a:	4b89      	ldr	r3, [pc, #548]	; (8000670 <modeRun+0x2c8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b0d      	cmp	r3, #13
 8000450:	d00e      	beq.n	8000470 <modeRun+0xc8>
 8000452:	2b0d      	cmp	r3, #13
 8000454:	dc1e      	bgt.n	8000494 <modeRun+0xec>
 8000456:	2b0b      	cmp	r3, #11
 8000458:	d002      	beq.n	8000460 <modeRun+0xb8>
 800045a:	2b0c      	cmp	r3, #12
 800045c:	d010      	beq.n	8000480 <modeRun+0xd8>
			case MAN_AMBER:
				state_2= MAN_RED;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 800045e:	e019      	b.n	8000494 <modeRun+0xec>
				state_2= MAN_GREEN;
 8000460:	4b83      	ldr	r3, [pc, #524]	; (8000670 <modeRun+0x2c8>)
 8000462:	220d      	movs	r2, #13
 8000464:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000466:	f242 7010 	movw	r0, #10000	; 0x2710
 800046a:	f000 fc27 	bl	8000cbc <setTimer3>
				break;
 800046e:	e012      	b.n	8000496 <modeRun+0xee>
				state_2= MAN_AMBER;
 8000470:	4b7f      	ldr	r3, [pc, #508]	; (8000670 <modeRun+0x2c8>)
 8000472:	220c      	movs	r2, #12
 8000474:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000476:	f242 7010 	movw	r0, #10000	; 0x2710
 800047a:	f000 fc1f 	bl	8000cbc <setTimer3>
				break;
 800047e:	e00a      	b.n	8000496 <modeRun+0xee>
				state_2= MAN_RED;
 8000480:	4b7b      	ldr	r3, [pc, #492]	; (8000670 <modeRun+0x2c8>)
 8000482:	220b      	movs	r2, #11
 8000484:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000486:	f242 7010 	movw	r0, #10000	; 0x2710
 800048a:	f000 fc17 	bl	8000cbc <setTimer3>
				break;
 800048e:	e002      	b.n	8000496 <modeRun+0xee>
			}
		}
 8000490:	bf00      	nop
 8000492:	e000      	b.n	8000496 <modeRun+0xee>
				break;
 8000494:	bf00      	nop

		if (isButton3Pressed()){
 8000496:	f7ff fe7d 	bl	8000194 <isButton3Pressed>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d046      	beq.n	800052e <modeRun+0x186>
			switch(state_1){
 80004a0:	4b72      	ldr	r3, [pc, #456]	; (800066c <modeRun+0x2c4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b0d      	cmp	r3, #13
 80004a6:	d00e      	beq.n	80004c6 <modeRun+0x11e>
 80004a8:	2b0d      	cmp	r3, #13
 80004aa:	dc1c      	bgt.n	80004e6 <modeRun+0x13e>
 80004ac:	2b0b      	cmp	r3, #11
 80004ae:	d002      	beq.n	80004b6 <modeRun+0x10e>
 80004b0:	2b0c      	cmp	r3, #12
 80004b2:	d010      	beq.n	80004d6 <modeRun+0x12e>
			case MAN_AMBER:
				state_1=MAN_GREEN;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 80004b4:	e017      	b.n	80004e6 <modeRun+0x13e>
				state_1=MAN_AMBER;
 80004b6:	4b6d      	ldr	r3, [pc, #436]	; (800066c <modeRun+0x2c4>)
 80004b8:	220c      	movs	r2, #12
 80004ba:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80004c0:	f000 fbe0 	bl	8000c84 <setTimer2>
				break;
 80004c4:	e010      	b.n	80004e8 <modeRun+0x140>
				state_1=MAN_RED;
 80004c6:	4b69      	ldr	r3, [pc, #420]	; (800066c <modeRun+0x2c4>)
 80004c8:	220b      	movs	r2, #11
 80004ca:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80004d0:	f000 fbd8 	bl	8000c84 <setTimer2>
				break;
 80004d4:	e008      	b.n	80004e8 <modeRun+0x140>
				state_1=MAN_GREEN;
 80004d6:	4b65      	ldr	r3, [pc, #404]	; (800066c <modeRun+0x2c4>)
 80004d8:	220d      	movs	r2, #13
 80004da:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80004e0:	f000 fbd0 	bl	8000c84 <setTimer2>
				break;
 80004e4:	e000      	b.n	80004e8 <modeRun+0x140>
				break;
 80004e6:	bf00      	nop
			}

			switch(state_2){
 80004e8:	4b61      	ldr	r3, [pc, #388]	; (8000670 <modeRun+0x2c8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b0d      	cmp	r3, #13
 80004ee:	d00e      	beq.n	800050e <modeRun+0x166>
 80004f0:	2b0d      	cmp	r3, #13
 80004f2:	dc1e      	bgt.n	8000532 <modeRun+0x18a>
 80004f4:	2b0b      	cmp	r3, #11
 80004f6:	d002      	beq.n	80004fe <modeRun+0x156>
 80004f8:	2b0c      	cmp	r3, #12
 80004fa:	d010      	beq.n	800051e <modeRun+0x176>
			case MAN_AMBER:
				state_2=MAN_GREEN;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 80004fc:	e019      	b.n	8000532 <modeRun+0x18a>
				state_2=MAN_AMBER;
 80004fe:	4b5c      	ldr	r3, [pc, #368]	; (8000670 <modeRun+0x2c8>)
 8000500:	220c      	movs	r2, #12
 8000502:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000504:	f242 7010 	movw	r0, #10000	; 0x2710
 8000508:	f000 fbd8 	bl	8000cbc <setTimer3>
				break;
 800050c:	e012      	b.n	8000534 <modeRun+0x18c>
				state_2=MAN_RED;
 800050e:	4b58      	ldr	r3, [pc, #352]	; (8000670 <modeRun+0x2c8>)
 8000510:	220b      	movs	r2, #11
 8000512:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000514:	f242 7010 	movw	r0, #10000	; 0x2710
 8000518:	f000 fbd0 	bl	8000cbc <setTimer3>
				break;
 800051c:	e00a      	b.n	8000534 <modeRun+0x18c>
				state_2=MAN_GREEN;
 800051e:	4b54      	ldr	r3, [pc, #336]	; (8000670 <modeRun+0x2c8>)
 8000520:	220d      	movs	r2, #13
 8000522:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000524:	f242 7010 	movw	r0, #10000	; 0x2710
 8000528:	f000 fbc8 	bl	8000cbc <setTimer3>
				break;
 800052c:	e002      	b.n	8000534 <modeRun+0x18c>
			}
		}
 800052e:	bf00      	nop
 8000530:	e0c7      	b.n	80006c2 <modeRun+0x31a>
				break;
 8000532:	bf00      	nop
		break;
 8000534:	e0c5      	b.n	80006c2 <modeRun+0x31a>
	case MODE_3:
		if (isButton1Pressed()){
 8000536:	f7ff fe09 	bl	800014c <isButton1Pressed>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d002      	beq.n	8000546 <modeRun+0x19e>
			mode = MODE_1;
 8000540:	4b49      	ldr	r3, [pc, #292]	; (8000668 <modeRun+0x2c0>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 8000546:	f7ff fe13 	bl	8000170 <isButton2Pressed>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d06a      	beq.n	8000626 <modeRun+0x27e>
			switch(state_1){
 8000550:	4b46      	ldr	r3, [pc, #280]	; (800066c <modeRun+0x2c4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b17      	cmp	r3, #23
 8000556:	d013      	beq.n	8000580 <modeRun+0x1d8>
 8000558:	2b17      	cmp	r3, #23
 800055a:	dc2f      	bgt.n	80005bc <modeRun+0x214>
 800055c:	2b15      	cmp	r3, #21
 800055e:	d002      	beq.n	8000566 <modeRun+0x1be>
 8000560:	2b16      	cmp	r3, #22
 8000562:	d01f      	beq.n	80005a4 <modeRun+0x1fc>
				state_1 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
				setTimer2(250);
				break;
			default:
				break;
 8000564:	e02a      	b.n	80005bc <modeRun+0x214>
				state_1 =TUN_GREEN;
 8000566:	4b41      	ldr	r3, [pc, #260]	; (800066c <modeRun+0x2c4>)
 8000568:	2217      	movs	r2, #23
 800056a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000572:	4840      	ldr	r0, [pc, #256]	; (8000674 <modeRun+0x2cc>)
 8000574:	f001 fd69 	bl	800204a <HAL_GPIO_WritePin>
				setTimer2(250);
 8000578:	20fa      	movs	r0, #250	; 0xfa
 800057a:	f000 fb83 	bl	8000c84 <setTimer2>
				break;
 800057e:	e01e      	b.n	80005be <modeRun+0x216>
				state_1 =TUN_AMBER;
 8000580:	4b3a      	ldr	r3, [pc, #232]	; (800066c <modeRun+0x2c4>)
 8000582:	2216      	movs	r2, #22
 8000584:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058c:	4839      	ldr	r0, [pc, #228]	; (8000674 <modeRun+0x2cc>)
 800058e:	f001 fd5c 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	2108      	movs	r1, #8
 8000596:	4838      	ldr	r0, [pc, #224]	; (8000678 <modeRun+0x2d0>)
 8000598:	f001 fd57 	bl	800204a <HAL_GPIO_WritePin>
				setTimer2(250);
 800059c:	20fa      	movs	r0, #250	; 0xfa
 800059e:	f000 fb71 	bl	8000c84 <setTimer2>
				break;
 80005a2:	e00c      	b.n	80005be <modeRun+0x216>
				state_1 =TUN_RED;
 80005a4:	4b31      	ldr	r3, [pc, #196]	; (800066c <modeRun+0x2c4>)
 80005a6:	2215      	movs	r2, #21
 80005a8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2108      	movs	r1, #8
 80005ae:	4832      	ldr	r0, [pc, #200]	; (8000678 <modeRun+0x2d0>)
 80005b0:	f001 fd4b 	bl	800204a <HAL_GPIO_WritePin>
				setTimer2(250);
 80005b4:	20fa      	movs	r0, #250	; 0xfa
 80005b6:	f000 fb65 	bl	8000c84 <setTimer2>
				break;
 80005ba:	e000      	b.n	80005be <modeRun+0x216>
				break;
 80005bc:	bf00      	nop
			}

			switch(state_2){
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <modeRun+0x2c8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b17      	cmp	r3, #23
 80005c4:	d012      	beq.n	80005ec <modeRun+0x244>
 80005c6:	2b17      	cmp	r3, #23
 80005c8:	dc2f      	bgt.n	800062a <modeRun+0x282>
 80005ca:	2b15      	cmp	r3, #21
 80005cc:	d002      	beq.n	80005d4 <modeRun+0x22c>
 80005ce:	2b16      	cmp	r3, #22
 80005d0:	d01d      	beq.n	800060e <modeRun+0x266>
				state_2 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
				setTimer3(250);
				break;
			default:
				break;
 80005d2:	e02a      	b.n	800062a <modeRun+0x282>
				state_2 =TUN_GREEN;
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <modeRun+0x2c8>)
 80005d6:	2217      	movs	r2, #23
 80005d8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2120      	movs	r1, #32
 80005de:	4826      	ldr	r0, [pc, #152]	; (8000678 <modeRun+0x2d0>)
 80005e0:	f001 fd33 	bl	800204a <HAL_GPIO_WritePin>
				setTimer3(250);
 80005e4:	20fa      	movs	r0, #250	; 0xfa
 80005e6:	f000 fb69 	bl	8000cbc <setTimer3>
				break;
 80005ea:	e01f      	b.n	800062c <modeRun+0x284>
				state_2 =TUN_AMBER;
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <modeRun+0x2c8>)
 80005ee:	2216      	movs	r2, #22
 80005f0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	4820      	ldr	r0, [pc, #128]	; (8000678 <modeRun+0x2d0>)
 80005f8:	f001 fd27 	bl	800204a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	481d      	ldr	r0, [pc, #116]	; (8000678 <modeRun+0x2d0>)
 8000602:	f001 fd22 	bl	800204a <HAL_GPIO_WritePin>
				setTimer3(250);
 8000606:	20fa      	movs	r0, #250	; 0xfa
 8000608:	f000 fb58 	bl	8000cbc <setTimer3>
				break;
 800060c:	e00e      	b.n	800062c <modeRun+0x284>
				state_2 =TUN_RED;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <modeRun+0x2c8>)
 8000610:	2215      	movs	r2, #21
 8000612:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2110      	movs	r1, #16
 8000618:	4817      	ldr	r0, [pc, #92]	; (8000678 <modeRun+0x2d0>)
 800061a:	f001 fd16 	bl	800204a <HAL_GPIO_WritePin>
				setTimer3(250);
 800061e:	20fa      	movs	r0, #250	; 0xfa
 8000620:	f000 fb4c 	bl	8000cbc <setTimer3>
				break;
 8000624:	e002      	b.n	800062c <modeRun+0x284>
			}
		}
 8000626:	bf00      	nop
 8000628:	e000      	b.n	800062c <modeRun+0x284>
				break;
 800062a:	bf00      	nop

		if (isButton3Pressed()){
 800062c:	f7ff fdb2 	bl	8000194 <isButton3Pressed>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d042      	beq.n	80006bc <modeRun+0x314>
			switch (state_1){
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <modeRun+0x2c4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b17      	cmp	r3, #23
 800063c:	d006      	beq.n	800064c <modeRun+0x2a4>
 800063e:	2b17      	cmp	r3, #23
 8000640:	dc3e      	bgt.n	80006c0 <modeRun+0x318>
 8000642:	2b15      	cmp	r3, #21
 8000644:	d02a      	beq.n	800069c <modeRun+0x2f4>
 8000646:	2b16      	cmp	r3, #22
 8000648:	d01a      	beq.n	8000680 <modeRun+0x2d8>
			case TUN_RED:
				if (redTime <99) redTime++;
				else redTime =1;
				break;
			default:
				break;
 800064a:	e039      	b.n	80006c0 <modeRun+0x318>
				if (greenTime <99) greenTime++;
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <modeRun+0x2d4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b62      	cmp	r3, #98	; 0x62
 8000652:	dc05      	bgt.n	8000660 <modeRun+0x2b8>
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <modeRun+0x2d4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <modeRun+0x2d4>)
 800065c:	6013      	str	r3, [r2, #0]
				break;
 800065e:	e030      	b.n	80006c2 <modeRun+0x31a>
				else greenTime =1;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <modeRun+0x2d4>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
				break;
 8000666:	e02c      	b.n	80006c2 <modeRun+0x31a>
 8000668:	2000009c 	.word	0x2000009c
 800066c:	20000094 	.word	0x20000094
 8000670:	20000098 	.word	0x20000098
 8000674:	40010800 	.word	0x40010800
 8000678:	40010c00 	.word	0x40010c00
 800067c:	20000058 	.word	0x20000058
				if (amberTime <99) amberTime++;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <modeRun+0x320>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b62      	cmp	r3, #98	; 0x62
 8000686:	dc05      	bgt.n	8000694 <modeRun+0x2ec>
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <modeRun+0x320>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <modeRun+0x320>)
 8000690:	6013      	str	r3, [r2, #0]
				break;
 8000692:	e016      	b.n	80006c2 <modeRun+0x31a>
				else amberTime =1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <modeRun+0x320>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
				break;
 800069a:	e012      	b.n	80006c2 <modeRun+0x31a>
				if (redTime <99) redTime++;
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <modeRun+0x324>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b62      	cmp	r3, #98	; 0x62
 80006a2:	dc05      	bgt.n	80006b0 <modeRun+0x308>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <modeRun+0x324>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <modeRun+0x324>)
 80006ac:	6013      	str	r3, [r2, #0]
				break;
 80006ae:	e008      	b.n	80006c2 <modeRun+0x31a>
				else redTime =1;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <modeRun+0x324>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
				break;
 80006b6:	e004      	b.n	80006c2 <modeRun+0x31a>
		break;
 80006b8:	bf00      	nop
 80006ba:	e002      	b.n	80006c2 <modeRun+0x31a>
			}
		}
 80006bc:	bf00      	nop
 80006be:	e000      	b.n	80006c2 <modeRun+0x31a>
				break;
 80006c0:	bf00      	nop
	}
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000054 	.word	0x20000054
 80006cc:	20000050 	.word	0x20000050

080006d0 <ledBlink>:
int mode = 0;
int redTime = 5;
int amberTime = 2;
int greenTime = 3;

void ledBlink(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	if (timer1_flag ==1){
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <ledBlink+0x20>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d106      	bne.n	80006ea <ledBlink+0x1a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80006dc:	2120      	movs	r1, #32
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <ledBlink+0x24>)
 80006e0:	f001 fccb 	bl	800207a <HAL_GPIO_TogglePin>
		setTimer1(250);
 80006e4:	20fa      	movs	r0, #250	; 0xfa
 80006e6:	f000 fab1 	bl	8000c4c <setTimer1>
	}
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000a4 	.word	0x200000a4
 80006f4:	40010800 	.word	0x40010800

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f001 f8ea 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f828 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f000 f954 	bl	80009b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000708:	f000 f866 	bl	80007d8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800070c:	f000 f926 	bl	800095c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000710:	f000 f8ae 	bl	8000870 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <main+0x54>)
 8000716:	f002 f933 	bl	8002980 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800071a:	2100      	movs	r1, #0
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <main+0x58>)
 800071e:	f002 f9d9 	bl	8002ad4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timerInit();
 8000722:	f000 fb49 	bl	8000db8 <timerInit>
  while (1)
  {
	  ledBlink();
 8000726:	f7ff ffd3 	bl	80006d0 <ledBlink>
	  modeRun();
 800072a:	f7ff fe3d 	bl	80003a8 <modeRun>
	 // buzzerRun();
	  pedes_light_fsm();
 800072e:	f000 f9bf 	bl	8000ab0 <pedes_light_fsm>
	  fsm_automatic_run1();
 8000732:	f000 fd05 	bl	8001140 <fsm_automatic_run1>
	  fsm_automatic_run2();
 8000736:	f000 fdb1 	bl	800129c <fsm_automatic_run2>
	  fsm_manual_run1();
 800073a:	f000 fe59 	bl	80013f0 <fsm_manual_run1>
	  fsm_manual_run2();
 800073e:	f000 ff07 	bl	8001550 <fsm_manual_run2>
	  fsm_tuning_run1();
 8000742:	f000 ffad 	bl	80016a0 <fsm_tuning_run1>
	  fsm_tuning_run2();
 8000746:	f001 f827 	bl	8001798 <fsm_tuning_run2>
	  ledBlink();
 800074a:	e7ec      	b.n	8000726 <main+0x2e>
 800074c:	2000011c 	.word	0x2000011c
 8000750:	200000d4 	.word	0x200000d4

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b090      	sub	sp, #64	; 0x40
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fc3a 	bl	8003fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077a:	2301      	movs	r3, #1
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2310      	movs	r3, #16
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000786:	2300      	movs	r3, #0
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800078a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0318 	add.w	r3, r7, #24
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fc89 	bl	80020ac <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007a0:	f000 f980 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fef4 	bl	80025ac <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007ca:	f000 f96b 	bl	8000aa4 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3740      	adds	r7, #64	; 0x40
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_TIM2_Init+0x94>)
 80007f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM2_Init+0x94>)
 80007fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_TIM2_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_TIM2_Init+0x94>)
 800080c:	223f      	movs	r2, #63	; 0x3f
 800080e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_TIM2_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_TIM2_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_TIM2_Init+0x94>)
 800081e:	f002 f85f 	bl	80028e0 <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000828:	f000 f93c 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_TIM2_Init+0x94>)
 800083a:	f002 fbb3 	bl	8002fa4 <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 f92e 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_TIM2_Init+0x94>)
 8000856:	f002 ff31 	bl	80036bc <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f920 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000011c 	.word	0x2000011c

08000870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	; 0x38
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <MX_TIM3_Init+0xe8>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008a8:	223f      	movs	r2, #63	; 0x3f
 80008aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c6:	4823      	ldr	r0, [pc, #140]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008c8:	f002 f80a 	bl	80028e0 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008d2:	f000 f8e7 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e0:	4619      	mov	r1, r3
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008e4:	f002 fb5e 	bl	8002fa4 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008ee:	f000 f8d9 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008f4:	f002 f896 	bl	8002a24 <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008fe:	f000 f8d1 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	4619      	mov	r1, r3
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000912:	f002 fed3 	bl	80036bc <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800091c:	f000 f8c2 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000920:	2360      	movs	r3, #96	; 0x60
 8000922:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000938:	f002 fa76 	bl	8002e28 <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000942:	f000 f8af 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000948:	f000 fb34 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 800094c:	bf00      	nop
 800094e:	3738      	adds	r7, #56	; 0x38
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000d4 	.word	0x200000d4
 8000958:	40000400 	.word	0x40000400

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART2_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000968:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000994:	f002 ff02 	bl	800379c <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f881 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000164 	.word	0x20000164
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80009fa:	4822      	ldr	r0, [pc, #136]	; (8000a84 <MX_GPIO_Init+0xd4>)
 80009fc:	f001 fb25 	bl	800204a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a06:	4820      	ldr	r0, [pc, #128]	; (8000a88 <MX_GPIO_Init+0xd8>)
 8000a08:	f001 fb1f 	bl	800204a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDES_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDES_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000a0c:	2313      	movs	r3, #19
 8000a0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4819      	ldr	r0, [pc, #100]	; (8000a84 <MX_GPIO_Init+0xd4>)
 8000a20:	f001 f978 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin PLED_GREEN_Pin TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin;
 8000a24:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_GPIO_Init+0xd4>)
 8000a3e:	f001 f969 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000a42:	2301      	movs	r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_GPIO_Init+0xd8>)
 8000a56:	f001 f95d 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLED_RED_Pin TRAFFIC1_0_Pin TRAFFIC2_0_Pin TRAFFIC2_1_Pin */
  GPIO_InitStruct.Pin = PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin;
 8000a5a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0xd8>)
 8000a74:	f001 f94e 	bl	8001d14 <HAL_GPIO_Init>

}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010800 	.word	0x40010800
 8000a88:	40010c00 	.word	0x40010c00

08000a8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	timerRun();
 8000a94:	f000 f9a6 	bl	8000de4 <timerRun>
	getKeyInput();
 8000a98:	f7ff fc04 	bl	80002a4 <getKeyInput>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <pedes_light_fsm>:
#include "pedestrian_light.h"

int pedes_state = PEDES_INIT;
int pedes_flag =0;

void pedes_light_fsm(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	switch(pedes_state){
 8000ab4:	4b5c      	ldr	r3, [pc, #368]	; (8000c28 <pedes_light_fsm+0x178>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	f200 80ac 	bhi.w	8000c16 <pedes_light_fsm+0x166>
 8000abe:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <pedes_light_fsm+0x14>)
 8000ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac4:	08000ad5 	.word	0x08000ad5
 8000ac8:	08000add 	.word	0x08000add
 8000acc:	08000bcf 	.word	0x08000bcf
 8000ad0:	08000b81 	.word	0x08000b81
	case PEDES_INIT:
		pedes_state = PEDES_OFF;
 8000ad4:	4b54      	ldr	r3, [pc, #336]	; (8000c28 <pedes_light_fsm+0x178>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]

		break;
 8000ada:	e0a3      	b.n	8000c24 <pedes_light_fsm+0x174>
	case PEDES_OFF:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae2:	4852      	ldr	r0, [pc, #328]	; (8000c2c <pedes_light_fsm+0x17c>)
 8000ae4:	f001 fab1 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aee:	4850      	ldr	r0, [pc, #320]	; (8000c30 <pedes_light_fsm+0x180>)
 8000af0:	f001 faab 	bl	800204a <HAL_GPIO_WritePin>

		if (isButtonPedesPressed()){
 8000af4:	f7ff fb60 	bl	80001b8 <isButtonPedesPressed>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 808d 	beq.w	8000c1a <pedes_light_fsm+0x16a>
			if (state_1 == AUTO_RED){
 8000b00:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <pedes_light_fsm+0x184>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d109      	bne.n	8000b1c <pedes_light_fsm+0x6c>
				setTimer4(get_timer2_counter());
 8000b08:	f000 f948 	bl	8000d9c <get_timer2_counter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f8f0 	bl	8000cf4 <setTimer4>
				pedes_state = PEDES_GREEN;
 8000b14:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <pedes_light_fsm+0x178>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	e021      	b.n	8000b60 <pedes_light_fsm+0xb0>
			}else if (state_1 == AUTO_GREEN){
 8000b1c:	4b45      	ldr	r3, [pc, #276]	; (8000c34 <pedes_light_fsm+0x184>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d110      	bne.n	8000b46 <pedes_light_fsm+0x96>
				setTimer4(get_timer2_counter() + amberTime*1000);
 8000b24:	f000 f93a 	bl	8000d9c <get_timer2_counter>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <pedes_light_fsm+0x188>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b32:	fb01 f303 	mul.w	r3, r1, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f8db 	bl	8000cf4 <setTimer4>
				pedes_state = PEDES_RED;
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <pedes_light_fsm+0x178>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	e00c      	b.n	8000b60 <pedes_light_fsm+0xb0>
			}else if (state_1 == AUTO_AMBER){
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <pedes_light_fsm+0x184>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d108      	bne.n	8000b60 <pedes_light_fsm+0xb0>
				setTimer4(get_timer2_counter());
 8000b4e:	f000 f925 	bl	8000d9c <get_timer2_counter>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f8cd 	bl	8000cf4 <setTimer4>
				pedes_state = PEDES_RED;
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <pedes_light_fsm+0x178>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	601a      	str	r2, [r3, #0]
			}

			setTimer5((redTime + amberTime + greenTime) *2000);
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <pedes_light_fsm+0x18c>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <pedes_light_fsm+0x188>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	441a      	add	r2, r3
 8000b6a:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <pedes_light_fsm+0x190>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f8d7 	bl	8000d2c <setTimer5>
		}
		break;
 8000b7e:	e04c      	b.n	8000c1a <pedes_light_fsm+0x16a>
	case PEDES_GREEN:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	4829      	ldr	r0, [pc, #164]	; (8000c2c <pedes_light_fsm+0x17c>)
 8000b88:	f001 fa5f 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b92:	4827      	ldr	r0, [pc, #156]	; (8000c30 <pedes_light_fsm+0x180>)
 8000b94:	f001 fa59 	bl	800204a <HAL_GPIO_WritePin>

		if (timer4_flag ==1){
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <pedes_light_fsm+0x194>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10e      	bne.n	8000bbe <pedes_light_fsm+0x10e>
			pedes_state = PEDES_RED;
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <pedes_light_fsm+0x178>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	601a      	str	r2, [r3, #0]
			setTimer4((greenTime +amberTime) *1000);
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <pedes_light_fsm+0x190>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <pedes_light_fsm+0x188>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f89b 	bl	8000cf4 <setTimer4>
		}
		if (timer5_flag ==1){
 8000bbe:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <pedes_light_fsm+0x198>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d12b      	bne.n	8000c1e <pedes_light_fsm+0x16e>
			pedes_state = PEDES_OFF;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <pedes_light_fsm+0x178>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
		}
		break;
 8000bcc:	e027      	b.n	8000c1e <pedes_light_fsm+0x16e>
	case PEDES_RED:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <pedes_light_fsm+0x17c>)
 8000bd6:	f001 fa38 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <pedes_light_fsm+0x180>)
 8000be2:	f001 fa32 	bl	800204a <HAL_GPIO_WritePin>

		if (timer4_flag ==1){
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <pedes_light_fsm+0x194>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d10b      	bne.n	8000c06 <pedes_light_fsm+0x156>
			pedes_state = PEDES_GREEN;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <pedes_light_fsm+0x178>)
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	601a      	str	r2, [r3, #0]
			setTimer4(redTime *1000);
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <pedes_light_fsm+0x18c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f877 	bl	8000cf4 <setTimer4>
		}
		if (timer5_flag ==1){
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <pedes_light_fsm+0x198>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d109      	bne.n	8000c22 <pedes_light_fsm+0x172>
			pedes_state = PEDES_OFF;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <pedes_light_fsm+0x178>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c14:	e005      	b.n	8000c22 <pedes_light_fsm+0x172>
	default:
		break;
 8000c16:	bf00      	nop
 8000c18:	e004      	b.n	8000c24 <pedes_light_fsm+0x174>
		break;
 8000c1a:	bf00      	nop
 8000c1c:	e002      	b.n	8000c24 <pedes_light_fsm+0x174>
		break;
 8000c1e:	bf00      	nop
 8000c20:	e000      	b.n	8000c24 <pedes_light_fsm+0x174>
		break;
 8000c22:	bf00      	nop
	}
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000a0 	.word	0x200000a0
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	20000094 	.word	0x20000094
 8000c38:	20000054 	.word	0x20000054
 8000c3c:	20000050 	.word	0x20000050
 8000c40:	20000058 	.word	0x20000058
 8000c44:	200000bc 	.word	0x200000bc
 8000c48:	200000c4 	.word	0x200000c4

08000c4c <setTimer1>:
int timer5_counter =0;

int timer6_flag =0;
int timer6_counter =0;

void setTimer1(int duration){
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <setTimer1+0x2c>)
 8000c58:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5c:	1092      	asrs	r2, r2, #2
 8000c5e:	17db      	asrs	r3, r3, #31
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <setTimer1+0x30>)
 8000c64:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <setTimer1+0x34>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	66666667 	.word	0x66666667
 8000c7c:	200000a8 	.word	0x200000a8
 8000c80:	200000a4 	.word	0x200000a4

08000c84 <setTimer2>:

void setTimer2(int duration){
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <setTimer2+0x2c>)
 8000c90:	fb82 1203 	smull	r1, r2, r2, r3
 8000c94:	1092      	asrs	r2, r2, #2
 8000c96:	17db      	asrs	r3, r3, #31
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <setTimer2+0x30>)
 8000c9c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <setTimer2+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	66666667 	.word	0x66666667
 8000cb4:	200000b0 	.word	0x200000b0
 8000cb8:	200000ac 	.word	0x200000ac

08000cbc <setTimer3>:
void setTimer3(int duration){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <setTimer3+0x2c>)
 8000cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ccc:	1092      	asrs	r2, r2, #2
 8000cce:	17db      	asrs	r3, r3, #31
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	4a06      	ldr	r2, [pc, #24]	; (8000cec <setTimer3+0x30>)
 8000cd4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <setTimer3+0x34>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	66666667 	.word	0x66666667
 8000cec:	200000b8 	.word	0x200000b8
 8000cf0:	200000b4 	.word	0x200000b4

08000cf4 <setTimer4>:
void setTimer4(int duration){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <setTimer4+0x2c>)
 8000d00:	fb82 1203 	smull	r1, r2, r2, r3
 8000d04:	1092      	asrs	r2, r2, #2
 8000d06:	17db      	asrs	r3, r3, #31
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <setTimer4+0x30>)
 8000d0c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <setTimer4+0x34>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	66666667 	.word	0x66666667
 8000d24:	200000c0 	.word	0x200000c0
 8000d28:	200000bc 	.word	0x200000bc

08000d2c <setTimer5>:
void setTimer5(int duration){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <setTimer5+0x2c>)
 8000d38:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3c:	1092      	asrs	r2, r2, #2
 8000d3e:	17db      	asrs	r3, r3, #31
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <setTimer5+0x30>)
 8000d44:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <setTimer5+0x34>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	66666667 	.word	0x66666667
 8000d5c:	200000c8 	.word	0x200000c8
 8000d60:	200000c4 	.word	0x200000c4

08000d64 <setTimer6>:
void setTimer6(int duration){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <setTimer6+0x2c>)
 8000d70:	fb82 1203 	smull	r1, r2, r2, r3
 8000d74:	1092      	asrs	r2, r2, #2
 8000d76:	17db      	asrs	r3, r3, #31
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <setTimer6+0x30>)
 8000d7c:	6013      	str	r3, [r2, #0]
	timer6_flag =0;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <setTimer6+0x34>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	66666667 	.word	0x66666667
 8000d94:	200000d0 	.word	0x200000d0
 8000d98:	200000cc 	.word	0x200000cc

08000d9c <get_timer2_counter>:

int get_timer2_counter(){
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	return timer2_counter*10;
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <get_timer2_counter+0x18>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	200000b0 	.word	0x200000b0

08000db8 <timerInit>:

void timerInit(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	setTimer1(30);
 8000dbc:	201e      	movs	r0, #30
 8000dbe:	f7ff ff45 	bl	8000c4c <setTimer1>
	setTimer2(50);
 8000dc2:	2032      	movs	r0, #50	; 0x32
 8000dc4:	f7ff ff5e 	bl	8000c84 <setTimer2>
	setTimer3(70);
 8000dc8:	2046      	movs	r0, #70	; 0x46
 8000dca:	f7ff ff77 	bl	8000cbc <setTimer3>
	setTimer4(110);
 8000dce:	206e      	movs	r0, #110	; 0x6e
 8000dd0:	f7ff ff90 	bl	8000cf4 <setTimer4>
	setTimer5(130);
 8000dd4:	2082      	movs	r0, #130	; 0x82
 8000dd6:	f7ff ffa9 	bl	8000d2c <setTimer5>
	setTimer6(170);
 8000dda:	20aa      	movs	r0, #170	; 0xaa
 8000ddc:	f7ff ffc2 	bl	8000d64 <setTimer6>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <timerRun>:

void timerRun(){
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <timerRun+0xcc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dd0b      	ble.n	8000e08 <timerRun+0x24>
		timer1_counter--;
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <timerRun+0xcc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4a2e      	ldr	r2, [pc, #184]	; (8000eb0 <timerRun+0xcc>)
 8000df8:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <timerRun+0xcc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dc02      	bgt.n	8000e08 <timerRun+0x24>
			timer1_flag = 1;
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <timerRun+0xd0>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <timerRun+0xd4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	dd0b      	ble.n	8000e28 <timerRun+0x44>
		timer2_counter--;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <timerRun+0xd4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <timerRun+0xd4>)
 8000e18:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <timerRun+0xd4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	dc02      	bgt.n	8000e28 <timerRun+0x44>
			timer2_flag = 1;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <timerRun+0xd8>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <timerRun+0xdc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dd0b      	ble.n	8000e48 <timerRun+0x64>
		timer3_counter--;
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <timerRun+0xdc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <timerRun+0xdc>)
 8000e38:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <timerRun+0xdc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dc02      	bgt.n	8000e48 <timerRun+0x64>
			timer3_flag = 1;
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <timerRun+0xe0>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <timerRun+0xe4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dd0b      	ble.n	8000e68 <timerRun+0x84>
		timer4_counter--;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <timerRun+0xe4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <timerRun+0xe4>)
 8000e58:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <timerRun+0xe4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	dc02      	bgt.n	8000e68 <timerRun+0x84>
			timer4_flag = 1;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <timerRun+0xe8>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <timerRun+0xec>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	dd0b      	ble.n	8000e88 <timerRun+0xa4>
		timer5_counter--;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <timerRun+0xec>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <timerRun+0xec>)
 8000e78:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <timerRun+0xec>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	dc02      	bgt.n	8000e88 <timerRun+0xa4>
			timer5_flag = 1;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <timerRun+0xf0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <timerRun+0xf4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	dd0b      	ble.n	8000ea8 <timerRun+0xc4>
		timer6_counter--;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <timerRun+0xf4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <timerRun+0xf4>)
 8000e98:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <timerRun+0xf4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dc02      	bgt.n	8000ea8 <timerRun+0xc4>
			timer6_flag = 1;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <timerRun+0xf8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	200000a8 	.word	0x200000a8
 8000eb4:	200000a4 	.word	0x200000a4
 8000eb8:	200000b0 	.word	0x200000b0
 8000ebc:	200000ac 	.word	0x200000ac
 8000ec0:	200000b8 	.word	0x200000b8
 8000ec4:	200000b4 	.word	0x200000b4
 8000ec8:	200000c0 	.word	0x200000c0
 8000ecc:	200000bc 	.word	0x200000bc
 8000ed0:	200000c8 	.word	0x200000c8
 8000ed4:	200000c4 	.word	0x200000c4
 8000ed8:	200000d0 	.word	0x200000d0
 8000edc:	200000cc 	.word	0x200000cc

08000ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_MspInit+0x5c>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_MspInit+0x5c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6193      	str	r3, [r2, #24]
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_MspInit+0x5c>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_MspInit+0x60>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_MspInit+0x60>)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000

08000f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f54:	d114      	bne.n	8000f80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201c      	movs	r0, #28
 8000f74:	f000 fde7 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f78:	201c      	movs	r0, #28
 8000f7a:	f000 fe00 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f7e:	e010      	b.n	8000fa2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_TIM_Base_MspInit+0x6c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10b      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40000400 	.word	0x40000400

08000fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_TIM_MspPostInit+0x58>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d117      	bne.n	8001004 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_TIM_MspPostInit+0x5c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <HAL_TIM_MspPostInit+0x5c>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_TIM_MspPostInit+0x5c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_TIM_MspPostInit+0x60>)
 8001000:	f000 fe88 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40000400 	.word	0x40000400
 8001010:	40021000 	.word	0x40021000
 8001014:	40010800 	.word	0x40010800

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_UART_MspInit+0x98>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d137      	bne.n	80010a8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 800103e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001042:	61d3      	str	r3, [r2, #28]
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	480f      	ldr	r0, [pc, #60]	; (80010b8 <HAL_UART_MspInit+0xa0>)
 800107c:	f000 fe4a 	bl	8001d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001080:	2308      	movs	r3, #8
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_UART_MspInit+0xa0>)
 8001094:	f000 fe3e 	bl	8001d14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2026      	movs	r0, #38	; 0x26
 800109e:	f000 fd52 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010a2:	2026      	movs	r0, #38	; 0x26
 80010a4:	f000 fd6b 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010800 	.word	0x40010800

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 fc2d 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <TIM2_IRQHandler+0x10>)
 8001112:	f001 fd81 	bl	8002c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000011c 	.word	0x2000011c

08001120 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <USART2_IRQHandler+0x10>)
 8001126:	f002 fb87 	bl	8003838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000164 	.word	0x20000164

08001134 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <fsm_automatic_run1>:
 *      Author: duyvt
 */

#include "traffic_automatic.h"

void fsm_automatic_run1(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	switch(state_1){
 8001144:	4b4d      	ldr	r3, [pc, #308]	; (800127c <fsm_automatic_run1+0x13c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	f200 808d 	bhi.w	8001268 <fsm_automatic_run1+0x128>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <fsm_automatic_run1+0x14>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	08001165 	.word	0x08001165
 8001158:	0800117f 	.word	0x0800117f
 800115c:	0800121b 	.word	0x0800121b
 8001160:	080011cd 	.word	0x080011cd
	case INIT:
		state_1 = AUTO_RED;
 8001164:	4b45      	ldr	r3, [pc, #276]	; (800127c <fsm_automatic_run1+0x13c>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
		setTimer2(redTime*1000);
 800116a:	4b45      	ldr	r3, [pc, #276]	; (8001280 <fsm_automatic_run1+0x140>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd84 	bl	8000c84 <setTimer2>
		break;
 800117c:	e07b      	b.n	8001276 <fsm_automatic_run1+0x136>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	483f      	ldr	r0, [pc, #252]	; (8001284 <fsm_automatic_run1+0x144>)
 8001186:	f000 ff60 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2108      	movs	r1, #8
 800118e:	483e      	ldr	r0, [pc, #248]	; (8001288 <fsm_automatic_run1+0x148>)
 8001190:	f000 ff5b 	bl	800204a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001194:	4b3d      	ldr	r3, [pc, #244]	; (800128c <fsm_automatic_run1+0x14c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d10b      	bne.n	80011b4 <fsm_automatic_run1+0x74>
			state_1 = AUTO_GREEN;
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <fsm_automatic_run1+0x13c>)
 800119e:	2203      	movs	r2, #3
 80011a0:	601a      	str	r2, [r3, #0]
			setTimer2(greenTime*1000);
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <fsm_automatic_run1+0x150>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd68 	bl	8000c84 <setTimer2>
		}

		if (mode == MODE_2){
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <fsm_automatic_run1+0x154>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d157      	bne.n	800126c <fsm_automatic_run1+0x12c>
			state_1 = MAN_RED;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <fsm_automatic_run1+0x13c>)
 80011be:	220b      	movs	r2, #11
 80011c0:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 80011c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80011c6:	f7ff fd5d 	bl	8000c84 <setTimer2>
		}
		break;
 80011ca:	e04f      	b.n	800126c <fsm_automatic_run1+0x12c>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	482c      	ldr	r0, [pc, #176]	; (8001284 <fsm_automatic_run1+0x144>)
 80011d4:	f000 ff39 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	2108      	movs	r1, #8
 80011dc:	482a      	ldr	r0, [pc, #168]	; (8001288 <fsm_automatic_run1+0x148>)
 80011de:	f000 ff34 	bl	800204a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <fsm_automatic_run1+0x14c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10b      	bne.n	8001202 <fsm_automatic_run1+0xc2>
			state_1 = AUTO_AMBER;
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <fsm_automatic_run1+0x13c>)
 80011ec:	2202      	movs	r2, #2
 80011ee:	601a      	str	r2, [r3, #0]
			setTimer2(amberTime*1000);
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <fsm_automatic_run1+0x158>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fd41 	bl	8000c84 <setTimer2>
		}

		if (mode == MODE_2){
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <fsm_automatic_run1+0x154>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d132      	bne.n	8001270 <fsm_automatic_run1+0x130>
			state_1 = MAN_RED;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <fsm_automatic_run1+0x13c>)
 800120c:	220b      	movs	r2, #11
 800120e:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8001210:	f242 7010 	movw	r0, #10000	; 0x2710
 8001214:	f7ff fd36 	bl	8000c84 <setTimer2>
		}
		break;
 8001218:	e02a      	b.n	8001270 <fsm_automatic_run1+0x130>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001220:	4818      	ldr	r0, [pc, #96]	; (8001284 <fsm_automatic_run1+0x144>)
 8001222:	f000 ff12 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 8001226:	2201      	movs	r2, #1
 8001228:	2108      	movs	r1, #8
 800122a:	4817      	ldr	r0, [pc, #92]	; (8001288 <fsm_automatic_run1+0x148>)
 800122c:	f000 ff0d 	bl	800204a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <fsm_automatic_run1+0x14c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d10b      	bne.n	8001250 <fsm_automatic_run1+0x110>
			state_1 = AUTO_RED;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <fsm_automatic_run1+0x13c>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <fsm_automatic_run1+0x140>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd1a 	bl	8000c84 <setTimer2>
		}

		if (mode == MODE_2){
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <fsm_automatic_run1+0x154>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d10d      	bne.n	8001274 <fsm_automatic_run1+0x134>
			state_1 = MAN_RED;
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <fsm_automatic_run1+0x13c>)
 800125a:	220b      	movs	r2, #11
 800125c:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 800125e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001262:	f7ff fd0f 	bl	8000c84 <setTimer2>
		}
		break;
 8001266:	e005      	b.n	8001274 <fsm_automatic_run1+0x134>
	default:
		break;
 8001268:	bf00      	nop
 800126a:	e004      	b.n	8001276 <fsm_automatic_run1+0x136>
		break;
 800126c:	bf00      	nop
 800126e:	e002      	b.n	8001276 <fsm_automatic_run1+0x136>
		break;
 8001270:	bf00      	nop
 8001272:	e000      	b.n	8001276 <fsm_automatic_run1+0x136>
		break;
 8001274:	bf00      	nop
	}
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000094 	.word	0x20000094
 8001280:	20000050 	.word	0x20000050
 8001284:	40010800 	.word	0x40010800
 8001288:	40010c00 	.word	0x40010c00
 800128c:	200000ac 	.word	0x200000ac
 8001290:	20000058 	.word	0x20000058
 8001294:	2000009c 	.word	0x2000009c
 8001298:	20000054 	.word	0x20000054

0800129c <fsm_automatic_run2>:

void fsm_automatic_run2(){
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	switch(state_2){
 80012a0:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <fsm_automatic_run2+0x138>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	f200 808c 	bhi.w	80013c2 <fsm_automatic_run2+0x126>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <fsm_automatic_run2+0x14>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	08001377 	.word	0x08001377
 80012b8:	0800132b 	.word	0x0800132b
 80012bc:	080012db 	.word	0x080012db
	case INIT:
		state_2 = AUTO_GREEN;
 80012c0:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <fsm_automatic_run2+0x138>)
 80012c2:	2203      	movs	r2, #3
 80012c4:	601a      	str	r2, [r3, #0]
		setTimer3(greenTime*1000);
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <fsm_automatic_run2+0x13c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fcf2 	bl	8000cbc <setTimer3>
		break;
 80012d8:	e07a      	b.n	80013d0 <fsm_automatic_run2+0x134>
	case AUTO_GREEN:
		ledBlink();
 80012da:	f7ff f9f9 	bl	80006d0 <ledBlink>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2120      	movs	r1, #32
 80012e2:	483e      	ldr	r0, [pc, #248]	; (80013dc <fsm_automatic_run2+0x140>)
 80012e4:	f000 feb1 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2110      	movs	r1, #16
 80012ec:	483b      	ldr	r0, [pc, #236]	; (80013dc <fsm_automatic_run2+0x140>)
 80012ee:	f000 feac 	bl	800204a <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <fsm_automatic_run2+0x144>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d10b      	bne.n	8001312 <fsm_automatic_run2+0x76>
			state_2 = AUTO_AMBER;
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <fsm_automatic_run2+0x138>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	601a      	str	r2, [r3, #0]
			setTimer3(amberTime*1000);
 8001300:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <fsm_automatic_run2+0x148>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fcd5 	bl	8000cbc <setTimer3>
		}

		if (mode == MODE_2){
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <fsm_automatic_run2+0x14c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d155      	bne.n	80013c6 <fsm_automatic_run2+0x12a>
			state_2 = MAN_GREEN;
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <fsm_automatic_run2+0x138>)
 800131c:	220d      	movs	r2, #13
 800131e:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8001320:	f242 7010 	movw	r0, #10000	; 0x2710
 8001324:	f7ff fcca 	bl	8000cbc <setTimer3>
		}
		break;
 8001328:	e04d      	b.n	80013c6 <fsm_automatic_run2+0x12a>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 800132a:	2201      	movs	r2, #1
 800132c:	2110      	movs	r1, #16
 800132e:	482b      	ldr	r0, [pc, #172]	; (80013dc <fsm_automatic_run2+0x140>)
 8001330:	f000 fe8b 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001334:	2201      	movs	r2, #1
 8001336:	2120      	movs	r1, #32
 8001338:	4828      	ldr	r0, [pc, #160]	; (80013dc <fsm_automatic_run2+0x140>)
 800133a:	f000 fe86 	bl	800204a <HAL_GPIO_WritePin>
		if(timer3_flag ==1){
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <fsm_automatic_run2+0x144>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d10b      	bne.n	800135e <fsm_automatic_run2+0xc2>
			state_2 = AUTO_RED;
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <fsm_automatic_run2+0x138>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
			setTimer3(redTime*1000);
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <fsm_automatic_run2+0x150>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fcaf 	bl	8000cbc <setTimer3>
		}

		if (mode == MODE_2){
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <fsm_automatic_run2+0x14c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d131      	bne.n	80013ca <fsm_automatic_run2+0x12e>
			state_2 = MAN_GREEN;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <fsm_automatic_run2+0x138>)
 8001368:	220d      	movs	r2, #13
 800136a:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 800136c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001370:	f7ff fca4 	bl	8000cbc <setTimer3>
		}
		break;
 8001374:	e029      	b.n	80013ca <fsm_automatic_run2+0x12e>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001376:	2201      	movs	r2, #1
 8001378:	2120      	movs	r1, #32
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <fsm_automatic_run2+0x140>)
 800137c:	f000 fe65 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2110      	movs	r1, #16
 8001384:	4815      	ldr	r0, [pc, #84]	; (80013dc <fsm_automatic_run2+0x140>)
 8001386:	f000 fe60 	bl	800204a <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <fsm_automatic_run2+0x144>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10b      	bne.n	80013aa <fsm_automatic_run2+0x10e>
			state_2 = AUTO_GREEN;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <fsm_automatic_run2+0x138>)
 8001394:	2203      	movs	r2, #3
 8001396:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <fsm_automatic_run2+0x13c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fc89 	bl	8000cbc <setTimer3>
		}

		if (mode == MODE_2){
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <fsm_automatic_run2+0x14c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d10d      	bne.n	80013ce <fsm_automatic_run2+0x132>
			state_2 = MAN_GREEN;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <fsm_automatic_run2+0x138>)
 80013b4:	220d      	movs	r2, #13
 80013b6:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 80013b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80013bc:	f7ff fc7e 	bl	8000cbc <setTimer3>
		}
		break;
 80013c0:	e005      	b.n	80013ce <fsm_automatic_run2+0x132>
	default:
		break;
 80013c2:	bf00      	nop
 80013c4:	e004      	b.n	80013d0 <fsm_automatic_run2+0x134>
		break;
 80013c6:	bf00      	nop
 80013c8:	e002      	b.n	80013d0 <fsm_automatic_run2+0x134>
		break;
 80013ca:	bf00      	nop
 80013cc:	e000      	b.n	80013d0 <fsm_automatic_run2+0x134>
		break;
 80013ce:	bf00      	nop
	}
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000098 	.word	0x20000098
 80013d8:	20000058 	.word	0x20000058
 80013dc:	40010c00 	.word	0x40010c00
 80013e0:	200000b4 	.word	0x200000b4
 80013e4:	20000054 	.word	0x20000054
 80013e8:	2000009c 	.word	0x2000009c
 80013ec:	20000050 	.word	0x20000050

080013f0 <fsm_manual_run1>:
 */


#include "traffic_manual.h"

void fsm_manual_run1(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	switch (state_1){
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <fsm_manual_run1+0x148>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b0d      	cmp	r3, #13
 80013fa:	d036      	beq.n	800146a <fsm_manual_run1+0x7a>
 80013fc:	2b0d      	cmp	r3, #13
 80013fe:	f300 8092 	bgt.w	8001526 <fsm_manual_run1+0x136>
 8001402:	2b0b      	cmp	r3, #11
 8001404:	d002      	beq.n	800140c <fsm_manual_run1+0x1c>
 8001406:	2b0c      	cmp	r3, #12
 8001408:	d05e      	beq.n	80014c8 <fsm_manual_run1+0xd8>
			state_1=AUTO_RED;
			setTimer2(redTime*1000);
		}
		break;
	default:
		break;
 800140a:	e08c      	b.n	8001526 <fsm_manual_run1+0x136>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001412:	484a      	ldr	r0, [pc, #296]	; (800153c <fsm_manual_run1+0x14c>)
 8001414:	f000 fe19 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2108      	movs	r1, #8
 800141c:	4848      	ldr	r0, [pc, #288]	; (8001540 <fsm_manual_run1+0x150>)
 800141e:	f000 fe14 	bl	800204a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <fsm_manual_run1+0x154>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d10b      	bne.n	8001442 <fsm_manual_run1+0x52>
			state_1= TUN_GREEN;
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <fsm_manual_run1+0x148>)
 800142c:	2217      	movs	r2, #23
 800142e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001436:	4841      	ldr	r0, [pc, #260]	; (800153c <fsm_manual_run1+0x14c>)
 8001438:	f000 fe07 	bl	800204a <HAL_GPIO_WritePin>
			setTimer2(250);
 800143c:	20fa      	movs	r0, #250	; 0xfa
 800143e:	f7ff fc21 	bl	8000c84 <setTimer2>
		if (timer2_flag ==1){
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <fsm_manual_run1+0x158>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d16f      	bne.n	800152a <fsm_manual_run1+0x13a>
			mode = MODE_1;
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <fsm_manual_run1+0x154>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <fsm_manual_run1+0x148>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <fsm_manual_run1+0x15c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc0e 	bl	8000c84 <setTimer2>
		break;
 8001468:	e05f      	b.n	800152a <fsm_manual_run1+0x13a>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001470:	4832      	ldr	r0, [pc, #200]	; (800153c <fsm_manual_run1+0x14c>)
 8001472:	f000 fdea 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 8001476:	2201      	movs	r2, #1
 8001478:	2108      	movs	r1, #8
 800147a:	4831      	ldr	r0, [pc, #196]	; (8001540 <fsm_manual_run1+0x150>)
 800147c:	f000 fde5 	bl	800204a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <fsm_manual_run1+0x154>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d10b      	bne.n	80014a0 <fsm_manual_run1+0xb0>
			state_1= TUN_GREEN;
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <fsm_manual_run1+0x148>)
 800148a:	2217      	movs	r2, #23
 800148c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001494:	4829      	ldr	r0, [pc, #164]	; (800153c <fsm_manual_run1+0x14c>)
 8001496:	f000 fdd8 	bl	800204a <HAL_GPIO_WritePin>
			setTimer2(250);
 800149a:	20fa      	movs	r0, #250	; 0xfa
 800149c:	f7ff fbf2 	bl	8000c84 <setTimer2>
		if (timer2_flag ==1){
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <fsm_manual_run1+0x158>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d142      	bne.n	800152e <fsm_manual_run1+0x13e>
			mode = MODE_1;
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <fsm_manual_run1+0x154>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <fsm_manual_run1+0x148>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <fsm_manual_run1+0x15c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fbdf 	bl	8000c84 <setTimer2>
		break;
 80014c6:	e032      	b.n	800152e <fsm_manual_run1+0x13e>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ce:	481b      	ldr	r0, [pc, #108]	; (800153c <fsm_manual_run1+0x14c>)
 80014d0:	f000 fdbb 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2108      	movs	r1, #8
 80014d8:	4819      	ldr	r0, [pc, #100]	; (8001540 <fsm_manual_run1+0x150>)
 80014da:	f000 fdb6 	bl	800204a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <fsm_manual_run1+0x154>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d10b      	bne.n	80014fe <fsm_manual_run1+0x10e>
			state_1= TUN_GREEN;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <fsm_manual_run1+0x148>)
 80014e8:	2217      	movs	r2, #23
 80014ea:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <fsm_manual_run1+0x14c>)
 80014f4:	f000 fda9 	bl	800204a <HAL_GPIO_WritePin>
			setTimer2(250);
 80014f8:	20fa      	movs	r0, #250	; 0xfa
 80014fa:	f7ff fbc3 	bl	8000c84 <setTimer2>
		if (timer2_flag ==1){
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <fsm_manual_run1+0x158>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d115      	bne.n	8001532 <fsm_manual_run1+0x142>
			mode = MODE_1;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <fsm_manual_run1+0x154>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <fsm_manual_run1+0x148>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <fsm_manual_run1+0x15c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fbb0 	bl	8000c84 <setTimer2>
		break;
 8001524:	e005      	b.n	8001532 <fsm_manual_run1+0x142>
		break;
 8001526:	bf00      	nop
 8001528:	e004      	b.n	8001534 <fsm_manual_run1+0x144>
		break;
 800152a:	bf00      	nop
 800152c:	e002      	b.n	8001534 <fsm_manual_run1+0x144>
		break;
 800152e:	bf00      	nop
 8001530:	e000      	b.n	8001534 <fsm_manual_run1+0x144>
		break;
 8001532:	bf00      	nop
	}
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000094 	.word	0x20000094
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00
 8001544:	2000009c 	.word	0x2000009c
 8001548:	200000ac 	.word	0x200000ac
 800154c:	20000050 	.word	0x20000050

08001550 <fsm_manual_run2>:

void fsm_manual_run2(){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	switch (state_2){
 8001554:	4b4d      	ldr	r3, [pc, #308]	; (800168c <fsm_manual_run2+0x13c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b0d      	cmp	r3, #13
 800155a:	d007      	beq.n	800156c <fsm_manual_run2+0x1c>
 800155c:	2b0d      	cmp	r3, #13
 800155e:	f300 808c 	bgt.w	800167a <fsm_manual_run2+0x12a>
 8001562:	2b0b      	cmp	r3, #11
 8001564:	d05c      	beq.n	8001620 <fsm_manual_run2+0xd0>
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d02d      	beq.n	80015c6 <fsm_manual_run2+0x76>
			state_2=AUTO_GREEN;
			setTimer3(greenTime*1000);
		}
		break;
	default:
		break;
 800156a:	e086      	b.n	800167a <fsm_manual_run2+0x12a>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2120      	movs	r1, #32
 8001570:	4847      	ldr	r0, [pc, #284]	; (8001690 <fsm_manual_run2+0x140>)
 8001572:	f000 fd6a 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 8001576:	2201      	movs	r2, #1
 8001578:	2110      	movs	r1, #16
 800157a:	4845      	ldr	r0, [pc, #276]	; (8001690 <fsm_manual_run2+0x140>)
 800157c:	f000 fd65 	bl	800204a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001580:	4b44      	ldr	r3, [pc, #272]	; (8001694 <fsm_manual_run2+0x144>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d10a      	bne.n	800159e <fsm_manual_run2+0x4e>
			state_2= TUN_GREEN;
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <fsm_manual_run2+0x13c>)
 800158a:	2217      	movs	r2, #23
 800158c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2120      	movs	r1, #32
 8001592:	483f      	ldr	r0, [pc, #252]	; (8001690 <fsm_manual_run2+0x140>)
 8001594:	f000 fd59 	bl	800204a <HAL_GPIO_WritePin>
			setTimer3(250);
 8001598:	20fa      	movs	r0, #250	; 0xfa
 800159a:	f7ff fb8f 	bl	8000cbc <setTimer3>
		if (timer3_flag ==1){
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <fsm_manual_run2+0x148>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d16b      	bne.n	800167e <fsm_manual_run2+0x12e>
			mode = MODE_1;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <fsm_manual_run2+0x144>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 80015ac:	4b37      	ldr	r3, [pc, #220]	; (800168c <fsm_manual_run2+0x13c>)
 80015ae:	2203      	movs	r2, #3
 80015b0:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <fsm_manual_run2+0x14c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fb7c 	bl	8000cbc <setTimer3>
		break;
 80015c4:	e05b      	b.n	800167e <fsm_manual_run2+0x12e>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2110      	movs	r1, #16
 80015ca:	4831      	ldr	r0, [pc, #196]	; (8001690 <fsm_manual_run2+0x140>)
 80015cc:	f000 fd3d 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2120      	movs	r1, #32
 80015d4:	482e      	ldr	r0, [pc, #184]	; (8001690 <fsm_manual_run2+0x140>)
 80015d6:	f000 fd38 	bl	800204a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <fsm_manual_run2+0x144>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d10a      	bne.n	80015f8 <fsm_manual_run2+0xa8>
			state_2= TUN_GREEN;
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <fsm_manual_run2+0x13c>)
 80015e4:	2217      	movs	r2, #23
 80015e6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2120      	movs	r1, #32
 80015ec:	4828      	ldr	r0, [pc, #160]	; (8001690 <fsm_manual_run2+0x140>)
 80015ee:	f000 fd2c 	bl	800204a <HAL_GPIO_WritePin>
			setTimer3(250);
 80015f2:	20fa      	movs	r0, #250	; 0xfa
 80015f4:	f7ff fb62 	bl	8000cbc <setTimer3>
		if (timer3_flag ==1){
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <fsm_manual_run2+0x148>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d140      	bne.n	8001682 <fsm_manual_run2+0x132>
			mode = MODE_1;
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <fsm_manual_run2+0x144>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <fsm_manual_run2+0x13c>)
 8001608:	2203      	movs	r2, #3
 800160a:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <fsm_manual_run2+0x14c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fb4f 	bl	8000cbc <setTimer3>
		break;
 800161e:	e030      	b.n	8001682 <fsm_manual_run2+0x132>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001620:	2201      	movs	r2, #1
 8001622:	2120      	movs	r1, #32
 8001624:	481a      	ldr	r0, [pc, #104]	; (8001690 <fsm_manual_run2+0x140>)
 8001626:	f000 fd10 	bl	800204a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2110      	movs	r1, #16
 800162e:	4818      	ldr	r0, [pc, #96]	; (8001690 <fsm_manual_run2+0x140>)
 8001630:	f000 fd0b 	bl	800204a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <fsm_manual_run2+0x144>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d10a      	bne.n	8001652 <fsm_manual_run2+0x102>
			state_2= TUN_GREEN;
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <fsm_manual_run2+0x13c>)
 800163e:	2217      	movs	r2, #23
 8001640:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2120      	movs	r1, #32
 8001646:	4812      	ldr	r0, [pc, #72]	; (8001690 <fsm_manual_run2+0x140>)
 8001648:	f000 fcff 	bl	800204a <HAL_GPIO_WritePin>
			setTimer3(250);
 800164c:	20fa      	movs	r0, #250	; 0xfa
 800164e:	f7ff fb35 	bl	8000cbc <setTimer3>
		if (timer3_flag ==1){
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <fsm_manual_run2+0x148>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d115      	bne.n	8001686 <fsm_manual_run2+0x136>
			mode = MODE_1;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <fsm_manual_run2+0x144>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <fsm_manual_run2+0x13c>)
 8001662:	2203      	movs	r2, #3
 8001664:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <fsm_manual_run2+0x14c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fb22 	bl	8000cbc <setTimer3>
		break;
 8001678:	e005      	b.n	8001686 <fsm_manual_run2+0x136>
		break;
 800167a:	bf00      	nop
 800167c:	e004      	b.n	8001688 <fsm_manual_run2+0x138>
		break;
 800167e:	bf00      	nop
 8001680:	e002      	b.n	8001688 <fsm_manual_run2+0x138>
		break;
 8001682:	bf00      	nop
 8001684:	e000      	b.n	8001688 <fsm_manual_run2+0x138>
		break;
 8001686:	bf00      	nop
	}
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000098 	.word	0x20000098
 8001690:	40010c00 	.word	0x40010c00
 8001694:	2000009c 	.word	0x2000009c
 8001698:	200000b4 	.word	0x200000b4
 800169c:	20000058 	.word	0x20000058

080016a0 <fsm_tuning_run1>:
 *      Author: duyvt
 */

#include "traffic_tuning.h"

void fsm_tuning_run1(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	switch(state_1){
 80016a4:	4b36      	ldr	r3, [pc, #216]	; (8001780 <fsm_tuning_run1+0xe0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b17      	cmp	r3, #23
 80016aa:	d006      	beq.n	80016ba <fsm_tuning_run1+0x1a>
 80016ac:	2b17      	cmp	r3, #23
 80016ae:	dc5e      	bgt.n	800176e <fsm_tuning_run1+0xce>
 80016b0:	2b15      	cmp	r3, #21
 80016b2:	d03f      	beq.n	8001734 <fsm_tuning_run1+0x94>
 80016b4:	2b16      	cmp	r3, #22
 80016b6:	d01c      	beq.n	80016f2 <fsm_tuning_run1+0x52>
//			if (redTime <99) redTime++;
//			else redTime =1;
//		}
		break;
	default:
		break;
 80016b8:	e059      	b.n	800176e <fsm_tuning_run1+0xce>
		if (timer2_flag ==1){
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <fsm_tuning_run1+0xe4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d106      	bne.n	80016d0 <fsm_tuning_run1+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 80016c2:	2108      	movs	r1, #8
 80016c4:	4830      	ldr	r0, [pc, #192]	; (8001788 <fsm_tuning_run1+0xe8>)
 80016c6:	f000 fcd8 	bl	800207a <HAL_GPIO_TogglePin>
			setTimer2(250);
 80016ca:	20fa      	movs	r0, #250	; 0xfa
 80016cc:	f7ff fada 	bl	8000c84 <setTimer2>
		if(mode == MODE_1){
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <fsm_tuning_run1+0xec>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d14c      	bne.n	8001772 <fsm_tuning_run1+0xd2>
			state_1 = AUTO_RED;
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <fsm_tuning_run1+0xe0>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <fsm_tuning_run1+0xf0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff faca 	bl	8000c84 <setTimer2>
		break;
 80016f0:	e03f      	b.n	8001772 <fsm_tuning_run1+0xd2>
		if (timer2_flag ==1){
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <fsm_tuning_run1+0xe4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d10b      	bne.n	8001712 <fsm_tuning_run1+0x72>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 80016fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fe:	4825      	ldr	r0, [pc, #148]	; (8001794 <fsm_tuning_run1+0xf4>)
 8001700:	f000 fcbb 	bl	800207a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 8001704:	2108      	movs	r1, #8
 8001706:	4820      	ldr	r0, [pc, #128]	; (8001788 <fsm_tuning_run1+0xe8>)
 8001708:	f000 fcb7 	bl	800207a <HAL_GPIO_TogglePin>
			setTimer2(250);
 800170c:	20fa      	movs	r0, #250	; 0xfa
 800170e:	f7ff fab9 	bl	8000c84 <setTimer2>
		if(mode == MODE_1){
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <fsm_tuning_run1+0xec>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d12d      	bne.n	8001776 <fsm_tuning_run1+0xd6>
			state_1 = AUTO_RED;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <fsm_tuning_run1+0xe0>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <fsm_tuning_run1+0xf0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff faa9 	bl	8000c84 <setTimer2>
		break;
 8001732:	e020      	b.n	8001776 <fsm_tuning_run1+0xd6>
		if (timer2_flag ==1){
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <fsm_tuning_run1+0xe4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <fsm_tuning_run1+0xac>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 800173c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001740:	4814      	ldr	r0, [pc, #80]	; (8001794 <fsm_tuning_run1+0xf4>)
 8001742:	f000 fc9a 	bl	800207a <HAL_GPIO_TogglePin>
			setTimer2(250);
 8001746:	20fa      	movs	r0, #250	; 0xfa
 8001748:	f7ff fa9c 	bl	8000c84 <setTimer2>
		if(mode == MODE_1){
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <fsm_tuning_run1+0xec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d112      	bne.n	800177a <fsm_tuning_run1+0xda>
			state_1 = AUTO_RED;
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <fsm_tuning_run1+0xe0>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <fsm_tuning_run1+0xf0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fa8c 	bl	8000c84 <setTimer2>
		break;
 800176c:	e005      	b.n	800177a <fsm_tuning_run1+0xda>
		break;
 800176e:	bf00      	nop
 8001770:	e004      	b.n	800177c <fsm_tuning_run1+0xdc>
		break;
 8001772:	bf00      	nop
 8001774:	e002      	b.n	800177c <fsm_tuning_run1+0xdc>
		break;
 8001776:	bf00      	nop
 8001778:	e000      	b.n	800177c <fsm_tuning_run1+0xdc>
		break;
 800177a:	bf00      	nop
	}
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000094 	.word	0x20000094
 8001784:	200000ac 	.word	0x200000ac
 8001788:	40010c00 	.word	0x40010c00
 800178c:	2000009c 	.word	0x2000009c
 8001790:	20000050 	.word	0x20000050
 8001794:	40010800 	.word	0x40010800

08001798 <fsm_tuning_run2>:

void fsm_tuning_run2(){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	switch(state_2){
 800179c:	4b35      	ldr	r3, [pc, #212]	; (8001874 <fsm_tuning_run2+0xdc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b17      	cmp	r3, #23
 80017a2:	d006      	beq.n	80017b2 <fsm_tuning_run2+0x1a>
 80017a4:	2b17      	cmp	r3, #23
 80017a6:	dc5c      	bgt.n	8001862 <fsm_tuning_run2+0xca>
 80017a8:	2b15      	cmp	r3, #21
 80017aa:	d03e      	beq.n	800182a <fsm_tuning_run2+0x92>
 80017ac:	2b16      	cmp	r3, #22
 80017ae:	d01c      	beq.n	80017ea <fsm_tuning_run2+0x52>
//			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
//			setTimer3(250);
//		}
		break;
	default:
		break;
 80017b0:	e057      	b.n	8001862 <fsm_tuning_run2+0xca>
		if (timer3_flag ==1){
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <fsm_tuning_run2+0xe0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d106      	bne.n	80017c8 <fsm_tuning_run2+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 80017ba:	2110      	movs	r1, #16
 80017bc:	482f      	ldr	r0, [pc, #188]	; (800187c <fsm_tuning_run2+0xe4>)
 80017be:	f000 fc5c 	bl	800207a <HAL_GPIO_TogglePin>
			setTimer3(250);
 80017c2:	20fa      	movs	r0, #250	; 0xfa
 80017c4:	f7ff fa7a 	bl	8000cbc <setTimer3>
		if(mode == MODE_1){
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <fsm_tuning_run2+0xe8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d14a      	bne.n	8001866 <fsm_tuning_run2+0xce>
			state_2 = AUTO_GREEN;
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <fsm_tuning_run2+0xdc>)
 80017d2:	2203      	movs	r2, #3
 80017d4:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <fsm_tuning_run2+0xec>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fa6a 	bl	8000cbc <setTimer3>
		break;
 80017e8:	e03d      	b.n	8001866 <fsm_tuning_run2+0xce>
		if (timer3_flag ==1){
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <fsm_tuning_run2+0xe0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10a      	bne.n	8001808 <fsm_tuning_run2+0x70>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 80017f2:	2120      	movs	r1, #32
 80017f4:	4821      	ldr	r0, [pc, #132]	; (800187c <fsm_tuning_run2+0xe4>)
 80017f6:	f000 fc40 	bl	800207a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 80017fa:	2110      	movs	r1, #16
 80017fc:	481f      	ldr	r0, [pc, #124]	; (800187c <fsm_tuning_run2+0xe4>)
 80017fe:	f000 fc3c 	bl	800207a <HAL_GPIO_TogglePin>
			setTimer3(250);
 8001802:	20fa      	movs	r0, #250	; 0xfa
 8001804:	f7ff fa5a 	bl	8000cbc <setTimer3>
		if(mode == MODE_1){
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <fsm_tuning_run2+0xe8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d12c      	bne.n	800186a <fsm_tuning_run2+0xd2>
			state_2 = AUTO_GREEN;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <fsm_tuning_run2+0xdc>)
 8001812:	2203      	movs	r2, #3
 8001814:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <fsm_tuning_run2+0xec>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fa4a 	bl	8000cbc <setTimer3>
		break;
 8001828:	e01f      	b.n	800186a <fsm_tuning_run2+0xd2>
		if (timer3_flag ==1){
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <fsm_tuning_run2+0xe0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d106      	bne.n	8001840 <fsm_tuning_run2+0xa8>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 8001832:	2120      	movs	r1, #32
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <fsm_tuning_run2+0xe4>)
 8001836:	f000 fc20 	bl	800207a <HAL_GPIO_TogglePin>
			setTimer3(250);
 800183a:	20fa      	movs	r0, #250	; 0xfa
 800183c:	f7ff fa3e 	bl	8000cbc <setTimer3>
		if(mode == MODE_1){
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <fsm_tuning_run2+0xe8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d112      	bne.n	800186e <fsm_tuning_run2+0xd6>
			state_2 = AUTO_GREEN;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <fsm_tuning_run2+0xdc>)
 800184a:	2203      	movs	r2, #3
 800184c:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <fsm_tuning_run2+0xec>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa2e 	bl	8000cbc <setTimer3>
		break;
 8001860:	e005      	b.n	800186e <fsm_tuning_run2+0xd6>
		break;
 8001862:	bf00      	nop
 8001864:	e004      	b.n	8001870 <fsm_tuning_run2+0xd8>
		break;
 8001866:	bf00      	nop
 8001868:	e002      	b.n	8001870 <fsm_tuning_run2+0xd8>
		break;
 800186a:	bf00      	nop
 800186c:	e000      	b.n	8001870 <fsm_tuning_run2+0xd8>
		break;
 800186e:	bf00      	nop
	}
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000098 	.word	0x20000098
 8001878:	200000b4 	.word	0x200000b4
 800187c:	40010c00 	.word	0x40010c00
 8001880:	2000009c 	.word	0x2000009c
 8001884:	20000058 	.word	0x20000058

08001888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	; (80018cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ae:	f7ff fc41 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f002 fb6f 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b6:	f7fe ff1f 	bl	80006f8 <main>
  bx lr
 80018ba:	4770      	bx	lr
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018c4:	08004034 	.word	0x08004034
  ldr r2, =_sbss
 80018c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018cc:	200001ac 	.word	0x200001ac

080018d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC1_2_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x28>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x28>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f923 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff faf6 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f93b 	bl	8001b9a <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f903 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000005c 	.word	0x2000005c
 8001958:	20000064 	.word	0x20000064
 800195c:	20000060 	.word	0x20000060

08001960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_IncTick+0x1c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_IncTick+0x20>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_IncTick+0x20>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000064 	.word	0x20000064
 8001980:	200001a8 	.word	0x200001a8

08001984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_GetTick+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	200001a8 	.word	0x200001a8

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4906      	ldr	r1, [pc, #24]	; (8001a30 <__NVIC_EnableIRQ+0x34>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff90 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff2d 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff42 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff90 	bl	8001a88 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5f 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff35 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d008      	beq.n	8001bda <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e020      	b.n	8001c1c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 020e 	bic.w	r2, r2, #14
 8001be8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d005      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e051      	b.n	8001cee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 020e 	bic.w	r2, r2, #14
 8001c58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <HAL_DMA_Abort_IT+0xd0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d029      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0xa0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a20      	ldr	r2, [pc, #128]	; (8001cfc <HAL_DMA_Abort_IT+0xd4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d022      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x9c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_DMA_Abort_IT+0xd8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d01a      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x96>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_DMA_Abort_IT+0xdc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d012      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x90>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_DMA_Abort_IT+0xe0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x8a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_DMA_Abort_IT+0xe4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d102      	bne.n	8001cac <HAL_DMA_Abort_IT+0x84>
 8001ca6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001caa:	e00e      	b.n	8001cca <HAL_DMA_Abort_IT+0xa2>
 8001cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb0:	e00b      	b.n	8001cca <HAL_DMA_Abort_IT+0xa2>
 8001cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb6:	e008      	b.n	8001cca <HAL_DMA_Abort_IT+0xa2>
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	e005      	b.n	8001cca <HAL_DMA_Abort_IT+0xa2>
 8001cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc2:	e002      	b.n	8001cca <HAL_DMA_Abort_IT+0xa2>
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	e000      	b.n	8001cca <HAL_DMA_Abort_IT+0xa2>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_DMA_Abort_IT+0xe8>)
 8001ccc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
    } 
  }
  return status;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40020008 	.word	0x40020008
 8001cfc:	4002001c 	.word	0x4002001c
 8001d00:	40020030 	.word	0x40020030
 8001d04:	40020044 	.word	0x40020044
 8001d08:	40020058 	.word	0x40020058
 8001d0c:	4002006c 	.word	0x4002006c
 8001d10:	40020000 	.word	0x40020000

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b08b      	sub	sp, #44	; 0x2c
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e169      	b.n	8001ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8158 	bne.w	8001ff6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a9a      	ldr	r2, [pc, #616]	; (8001fb4 <HAL_GPIO_Init+0x2a0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d05e      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d50:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2a0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d875      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d56:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <HAL_GPIO_Init+0x2a4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d058      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d5c:	4a96      	ldr	r2, [pc, #600]	; (8001fb8 <HAL_GPIO_Init+0x2a4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d86f      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d62:	4a96      	ldr	r2, [pc, #600]	; (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d052      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d68:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d869      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_GPIO_Init+0x2ac>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d04c      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d74:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_GPIO_Init+0x2ac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d863      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d7a:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_GPIO_Init+0x2b0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d046      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d80:	4a90      	ldr	r2, [pc, #576]	; (8001fc4 <HAL_GPIO_Init+0x2b0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d85d      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d82a      	bhi.n	8001de0 <HAL_GPIO_Init+0xcc>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d859      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_GPIO_Init+0x80>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001de9 	.word	0x08001de9
 8001d9c:	08001dfb 	.word	0x08001dfb
 8001da0:	08001e3d 	.word	0x08001e3d
 8001da4:	08001e43 	.word	0x08001e43
 8001da8:	08001e43 	.word	0x08001e43
 8001dac:	08001e43 	.word	0x08001e43
 8001db0:	08001e43 	.word	0x08001e43
 8001db4:	08001e43 	.word	0x08001e43
 8001db8:	08001e43 	.word	0x08001e43
 8001dbc:	08001e43 	.word	0x08001e43
 8001dc0:	08001e43 	.word	0x08001e43
 8001dc4:	08001e43 	.word	0x08001e43
 8001dc8:	08001e43 	.word	0x08001e43
 8001dcc:	08001e43 	.word	0x08001e43
 8001dd0:	08001e43 	.word	0x08001e43
 8001dd4:	08001e43 	.word	0x08001e43
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001e05 	.word	0x08001e05
 8001de0:	4a79      	ldr	r2, [pc, #484]	; (8001fc8 <HAL_GPIO_Init+0x2b4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de6:	e02c      	b.n	8001e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e029      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	3304      	adds	r3, #4
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e024      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e01f      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e01a      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e16:	2304      	movs	r3, #4
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e013      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	611a      	str	r2, [r3, #16]
          break;
 8001e2e:	e009      	b.n	8001e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e30:	2308      	movs	r3, #8
 8001e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	615a      	str	r2, [r3, #20]
          break;
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          break;
 8001e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d801      	bhi.n	8001e4e <HAL_GPIO_Init+0x13a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_Init+0x13e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d802      	bhi.n	8001e60 <HAL_GPIO_Init+0x14c>
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x152>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3b08      	subs	r3, #8
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	6a39      	ldr	r1, [r7, #32]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80b1 	beq.w	8001ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eac:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a40      	ldr	r2, [pc, #256]	; (8001fd4 <HAL_GPIO_Init+0x2c0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_GPIO_Init+0x1ec>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00d      	beq.n	8001efc <HAL_GPIO_Init+0x1e8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3e      	ldr	r2, [pc, #248]	; (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d007      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3d      	ldr	r2, [pc, #244]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_GPIO_Init+0x1e0>
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e006      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	e004      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001f00:	2300      	movs	r3, #0
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	f002 0203 	and.w	r2, r2, #3
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f12:	492f      	ldr	r1, [pc, #188]	; (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4928      	ldr	r1, [pc, #160]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	491e      	ldr	r1, [pc, #120]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4918      	ldr	r1, [pc, #96]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4914      	ldr	r1, [pc, #80]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d021      	beq.n	8001fe8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
 8001fb0:	e021      	b.n	8001ff6 <HAL_GPIO_Init+0x2e2>
 8001fb2:	bf00      	nop
 8001fb4:	10320000 	.word	0x10320000
 8001fb8:	10310000 	.word	0x10310000
 8001fbc:	10220000 	.word	0x10220000
 8001fc0:	10210000 	.word	0x10210000
 8001fc4:	10120000 	.word	0x10120000
 8001fc8:	10110000 	.word	0x10110000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	40011000 	.word	0x40011000
 8001fe0:	40011400 	.word	0x40011400
 8001fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_GPIO_Init+0x304>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	4909      	ldr	r1, [pc, #36]	; (8002018 <HAL_GPIO_Init+0x304>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	f47f ae8e 	bne.w	8001d28 <HAL_GPIO_Init+0x14>
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	372c      	adds	r7, #44	; 0x2c
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e001      	b.n	800203e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	807b      	strh	r3, [r7, #2]
 8002056:	4613      	mov	r3, r2
 8002058:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205a:	787b      	ldrb	r3, [r7, #1]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002060:	887a      	ldrh	r2, [r7, #2]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002066:	e003      	b.n	8002070 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002068:	887b      	ldrh	r3, [r7, #2]
 800206a:	041a      	lsls	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	611a      	str	r2, [r3, #16]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800208c:	887a      	ldrh	r2, [r7, #2]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	041a      	lsls	r2, r3, #16
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43d9      	mvns	r1, r3
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	400b      	ands	r3, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e26c      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8087 	beq.w	80021da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020cc:	4b92      	ldr	r3, [pc, #584]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d00c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d8:	4b8f      	ldr	r3, [pc, #572]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d112      	bne.n	800210a <HAL_RCC_OscConfig+0x5e>
 80020e4:	4b8c      	ldr	r3, [pc, #560]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d10b      	bne.n	800210a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d06c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x12c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d168      	bne.n	80021d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e246      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x76>
 8002114:	4b80      	ldr	r3, [pc, #512]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a7f      	ldr	r2, [pc, #508]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e02e      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b78      	ldr	r3, [pc, #480]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a77      	ldr	r2, [pc, #476]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e01d      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0xbc>
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a71      	ldr	r2, [pc, #452]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6e      	ldr	r2, [pc, #440]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002168:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6a      	ldr	r2, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a67      	ldr	r2, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fbfc 	bl	8001984 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff fbf8 	bl	8001984 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1fa      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0xe4>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fbe8 	bl	8001984 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff fbe4 	bl	8001984 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e1e6      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x10c>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d063      	beq.n	80022ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e6:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d11c      	bne.n	8002238 <HAL_RCC_OscConfig+0x18c>
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_RCC_OscConfig+0x176>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e1ba      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4939      	ldr	r1, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	e03a      	b.n	80022ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x270>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7ff fb9d 	bl	8001984 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff fb99 	bl	8001984 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e19b      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4927      	ldr	r1, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e015      	b.n	80022ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_RCC_OscConfig+0x270>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fb7c 	bl	8001984 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002290:	f7ff fb78 	bl	8001984 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e17a      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03a      	beq.n	8002330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_RCC_OscConfig+0x274>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fb5c 	bl	8001984 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7ff fb58 	bl	8001984 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e15a      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f000 fad8 	bl	80028a4 <RCC_Delay>
 80022f4:	e01c      	b.n	8002330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_OscConfig+0x274>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fb42 	bl	8001984 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002302:	e00f      	b.n	8002324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff fb3e 	bl	8001984 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d908      	bls.n	8002324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e140      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	42420000 	.word	0x42420000
 8002320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	4b9e      	ldr	r3, [pc, #632]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e9      	bne.n	8002304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a6 	beq.w	800248a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002342:	4b97      	ldr	r3, [pc, #604]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10d      	bne.n	800236a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b94      	ldr	r3, [pc, #592]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a93      	ldr	r2, [pc, #588]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b8e      	ldr	r3, [pc, #568]	; (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b8b      	ldr	r3, [pc, #556]	; (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a8a      	ldr	r2, [pc, #552]	; (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7ff faff 	bl	8001984 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7ff fafb 	bl	8001984 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0fd      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_RCC_OscConfig+0x4f8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x312>
 80023b0:	4b7b      	ldr	r3, [pc, #492]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4a7a      	ldr	r2, [pc, #488]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	e02d      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x334>
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a75      	ldr	r2, [pc, #468]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a72      	ldr	r2, [pc, #456]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	e01c      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x356>
 80023e8:	4b6d      	ldr	r3, [pc, #436]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a6c      	ldr	r2, [pc, #432]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 8002402:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a66      	ldr	r2, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b64      	ldr	r3, [pc, #400]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a63      	ldr	r2, [pc, #396]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff faaf 	bl	8001984 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff faab 	bl	8001984 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0ab      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ee      	beq.n	800242a <HAL_RCC_OscConfig+0x37e>
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7ff fa99 	bl	8001984 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff fa95 	bl	8001984 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e095      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a47      	ldr	r2, [pc, #284]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8081 	beq.w	8002596 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002494:	4b42      	ldr	r3, [pc, #264]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d061      	beq.n	8002564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d146      	bne.n	8002536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <HAL_RCC_OscConfig+0x4fc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7ff fa69 	bl	8001984 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7ff fa65 	bl	8001984 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e067      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	492d      	ldr	r1, [pc, #180]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a19      	ldr	r1, [r3, #32]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	430b      	orrs	r3, r1
 8002502:	4927      	ldr	r1, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x4fc>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff fa39 	bl	8001984 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff fa35 	bl	8001984 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e037      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x46a>
 8002534:	e02f      	b.n	8002596 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <HAL_RCC_OscConfig+0x4fc>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fa22 	bl	8001984 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7ff fa1e 	bl	8001984 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e020      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x498>
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e013      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
 80025a8:	42420060 	.word	0x42420060

080025ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0d0      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4965      	ldr	r1, [pc, #404]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800262a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d040      	beq.n	80026cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d115      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e073      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06b      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4936      	ldr	r1, [pc, #216]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800269c:	f7ff f972 	bl	8001984 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7ff f96e 	bl	8001984 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e053      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 020c 	and.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1eb      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d210      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4922      	ldr	r1, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1cc>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1d0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f8d0 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
 8002774:	08004014 	.word	0x08004014
 8002778:	2000005c 	.word	0x2000005c
 800277c:	20000060 	.word	0x20000060

08002780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b490      	push	{r4, r7}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002788:	1d3c      	adds	r4, r7, #4
 800278a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800278c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002790:	f240 2301 	movw	r3, #513	; 0x201
 8002794:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d002      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x40>
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x46>
 80027be:	e02d      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c2:	623b      	str	r3, [r7, #32]
      break;
 80027c4:	e02d      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	0c9b      	lsrs	r3, r3, #18
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027d2:	4413      	add	r3, r2
 80027d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	0c5b      	lsrs	r3, r3, #17
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027f2:	4413      	add	r3, r2
 80027f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fe:	fb02 f203 	mul.w	r2, r2, r3
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	e004      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	623b      	str	r3, [r7, #32]
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	6a3b      	ldr	r3, [r7, #32]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bc90      	pop	{r4, r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	08004004 	.word	0x08004004
 8002834:	40021000 	.word	0x40021000
 8002838:	007a1200 	.word	0x007a1200
 800283c:	003d0900 	.word	0x003d0900

08002840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b02      	ldr	r3, [pc, #8]	; (8002850 <HAL_RCC_GetHCLKFreq+0x10>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	2000005c 	.word	0x2000005c

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002858:	f7ff fff2 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	08004024 	.word	0x08004024

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002880:	f7ff ffde 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	0adb      	lsrs	r3, r3, #11
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	08004024 	.word	0x08004024

080028a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <RCC_Delay+0x34>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <RCC_Delay+0x38>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0a5b      	lsrs	r3, r3, #9
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c0:	bf00      	nop
  }
  while (Delay --);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e5a      	subs	r2, r3, #1
 80028c6:	60fa      	str	r2, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f9      	bne.n	80028c0 <RCC_Delay+0x1c>
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	2000005c 	.word	0x2000005c
 80028dc:	10624dd3 	.word	0x10624dd3

080028e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e041      	b.n	8002976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fb1c 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f000 fc28 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d001      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e03a      	b.n	8002a0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_TIM_Base_Start_IT+0x98>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d009      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_TIM_Base_Start_IT+0x9c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_TIM_Base_Start_IT+0xa0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d010      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	e007      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800

08002a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f839 	bl	8002ac2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fb86 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_TIM_PWM_Start+0x24>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e022      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d109      	bne.n	8002b12 <HAL_TIM_PWM_Start+0x3e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	e015      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d109      	bne.n	8002b2c <HAL_TIM_PWM_Start+0x58>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e008      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e05e      	b.n	8002c04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x82>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b54:	e013      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x92>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b64:	e00b      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start+0xa2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b74:	e003      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fd74 	bl	8003674 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_TIM_PWM_Start+0x138>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d107      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_TIM_PWM_Start+0x138>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00e      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d009      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <HAL_TIM_PWM_Start+0x13c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <HAL_TIM_PWM_Start+0x140>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d111      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d010      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf0:	e007      	b.n	8002c02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800

08002c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d122      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d11b      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0202 	mvn.w	r2, #2
 8002c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa6f 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa62 	bl	800312c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fa71 	bl	8003150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d122      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d11b      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0204 	mvn.w	r2, #4
 8002c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa45 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa38 	bl	800312c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fa47 	bl	8003150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d122      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d11b      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0208 	mvn.w	r2, #8
 8002cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa1b 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa0e 	bl	800312c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fa1d 	bl	8003150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d122      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d11b      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0210 	mvn.w	r2, #16
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2208      	movs	r2, #8
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f9f1 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9e4 	bl	800312c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f9f3 	bl	8003150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0201 	mvn.w	r2, #1
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd fe78 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b80      	cmp	r3, #128	; 0x80
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fce1 	bl	800378a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d107      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f9b7 	bl	8003162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0220 	mvn.w	r2, #32
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fcac 	bl	8003778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0ac      	b.n	8002f9c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	f200 809f 	bhi.w	8002f90 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e52:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002f91 	.word	0x08002f91
 8002e60:	08002f91 	.word	0x08002f91
 8002e64:	08002f91 	.word	0x08002f91
 8002e68:	08002ecd 	.word	0x08002ecd
 8002e6c:	08002f91 	.word	0x08002f91
 8002e70:	08002f91 	.word	0x08002f91
 8002e74:	08002f91 	.word	0x08002f91
 8002e78:	08002f0f 	.word	0x08002f0f
 8002e7c:	08002f91 	.word	0x08002f91
 8002e80:	08002f91 	.word	0x08002f91
 8002e84:	08002f91 	.word	0x08002f91
 8002e88:	08002f4f 	.word	0x08002f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f9d0 	bl	8003238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0208 	orr.w	r2, r2, #8
 8002ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0204 	bic.w	r2, r2, #4
 8002eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6999      	ldr	r1, [r3, #24]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	619a      	str	r2, [r3, #24]
      break;
 8002eca:	e062      	b.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fa16 	bl	8003304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6999      	ldr	r1, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	619a      	str	r2, [r3, #24]
      break;
 8002f0c:	e041      	b.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fa5f 	bl	80033d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0208 	orr.w	r2, r2, #8
 8002f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0204 	bic.w	r2, r2, #4
 8002f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69d9      	ldr	r1, [r3, #28]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	61da      	str	r2, [r3, #28]
      break;
 8002f4c:	e021      	b.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 faa9 	bl	80034ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	021a      	lsls	r2, r3, #8
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	61da      	str	r2, [r3, #28]
      break;
 8002f8e:	e000      	b.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_ConfigClockSource+0x18>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0b3      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x180>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff4:	d03e      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0xd0>
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffa:	f200 8087 	bhi.w	800310c <HAL_TIM_ConfigClockSource+0x168>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	f000 8085 	beq.w	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d87f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d01a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xa2>
 8003010:	2b70      	cmp	r3, #112	; 0x70
 8003012:	d87b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d050      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x116>
 8003018:	2b60      	cmp	r3, #96	; 0x60
 800301a:	d877      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d03c      	beq.n	800309a <HAL_TIM_ConfigClockSource+0xf6>
 8003020:	2b50      	cmp	r3, #80	; 0x50
 8003022:	d873      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d058      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x136>
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d86f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d064      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x156>
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d86b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d060      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x156>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d867      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05c      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x156>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d05a      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003044:	e062      	b.n	800310c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f000 faee 	bl	8003636 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003068:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	609a      	str	r2, [r3, #8]
      break;
 8003072:	e04e      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f000 fad7 	bl	8003636 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003096:	609a      	str	r2, [r3, #8]
      break;
 8003098:	e03b      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f000 fa4e 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2150      	movs	r1, #80	; 0x50
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 faa5 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80030b8:	e02b      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 fa6c 	bl	80035a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2160      	movs	r1, #96	; 0x60
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fa95 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80030d8:	e01b      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 fa2e 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2140      	movs	r1, #64	; 0x40
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fa85 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80030f8:	e00b      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 fa7c 	bl	8003602 <TIM_ITRx_SetConfig>
        break;
 800310a:	e002      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003110:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a29      	ldr	r2, [pc, #164]	; (800322c <TIM_Base_SetConfig+0xb8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00b      	beq.n	80031a4 <TIM_Base_SetConfig+0x30>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d007      	beq.n	80031a4 <TIM_Base_SetConfig+0x30>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a26      	ldr	r2, [pc, #152]	; (8003230 <TIM_Base_SetConfig+0xbc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_Base_SetConfig+0x30>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a25      	ldr	r2, [pc, #148]	; (8003234 <TIM_Base_SetConfig+0xc0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d108      	bne.n	80031b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <TIM_Base_SetConfig+0xb8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_Base_SetConfig+0x62>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d007      	beq.n	80031d6 <TIM_Base_SetConfig+0x62>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a19      	ldr	r2, [pc, #100]	; (8003230 <TIM_Base_SetConfig+0xbc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0x62>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <TIM_Base_SetConfig+0xc0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <TIM_Base_SetConfig+0xb8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	615a      	str	r2, [r3, #20]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800

08003238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0201 	bic.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f023 0302 	bic.w	r3, r3, #2
 8003280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <TIM_OC1_SetConfig+0xc8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d10c      	bne.n	80032ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f023 0308 	bic.w	r3, r3, #8
 800329a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 0304 	bic.w	r3, r3, #4
 80032ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a13      	ldr	r2, [pc, #76]	; (8003300 <TIM_OC1_SetConfig+0xc8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d111      	bne.n	80032da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00

08003304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f023 0210 	bic.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0320 	bic.w	r3, r3, #32
 800334e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <TIM_OC2_SetConfig+0xd0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10d      	bne.n	8003380 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a14      	ldr	r2, [pc, #80]	; (80033d4 <TIM_OC2_SetConfig+0xd0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d113      	bne.n	80033b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800338e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40012c00 	.word	0x40012c00

080033d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <TIM_OC3_SetConfig+0xd0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10d      	bne.n	8003452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800343c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <TIM_OC3_SetConfig+0xd0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d113      	bne.n	8003482 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	621a      	str	r2, [r3, #32]
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40012c00 	.word	0x40012c00

080034ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	031b      	lsls	r3, r3, #12
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <TIM_OC4_SetConfig+0x98>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d109      	bne.n	8003520 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00

08003548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 030a 	bic.w	r3, r3, #10
 8003584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f023 0210 	bic.w	r2, r3, #16
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	031b      	lsls	r3, r3, #12
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	f043 0307 	orr.w	r3, r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003636:	b480      	push	{r7}
 8003638:	b087      	sub	sp, #28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	021a      	lsls	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	431a      	orrs	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e046      	b.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d009      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10c      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	4313      	orrs	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800

08003778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e03f      	b.n	800382e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fc28 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb49 	bl	8003e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_UART_IRQHandler+0x52>
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa4f 	bl	8003d26 <UART_Receive_IT>
      return;
 8003888:	e17b      	b.n	8003b82 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80b1 	beq.w	80039f4 <HAL_UART_IRQHandler+0x1bc>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d105      	bne.n	80038a8 <HAL_UART_IRQHandler+0x70>
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80a6 	beq.w	80039f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_UART_IRQHandler+0x90>
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0201 	orr.w	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_UART_IRQHandler+0xb0>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f043 0202 	orr.w	r2, r3, #2
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_UART_IRQHandler+0xd0>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00f      	beq.n	8003932 <HAL_UART_IRQHandler+0xfa>
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_UART_IRQHandler+0xee>
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0208 	orr.w	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 811e 	beq.w	8003b78 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_UART_IRQHandler+0x11e>
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f9e8 	bl	8003d26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_UART_IRQHandler+0x146>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d031      	beq.n	80039e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f92a 	bl	8003bd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d023      	beq.n	80039da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d013      	beq.n	80039d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	4a76      	ldr	r2, [pc, #472]	; (8003b88 <HAL_UART_IRQHandler+0x350>)
 80039b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe f936 	bl	8001c28 <HAL_DMA_Abort_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d016      	beq.n	80039f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039cc:	4610      	mov	r0, r2
 80039ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e00e      	b.n	80039f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8ec 	bl	8003bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	e00a      	b.n	80039f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8e8 	bl	8003bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e006      	b.n	80039f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8e4 	bl	8003bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039ee:	e0c3      	b.n	8003b78 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	bf00      	nop
    return;
 80039f2:	e0c1      	b.n	8003b78 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	f040 80a1 	bne.w	8003b40 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 809b 	beq.w	8003b40 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8095 	beq.w	8003b40 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04e      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a44:	8a3b      	ldrh	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8098 	beq.w	8003b7c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a50:	8a3a      	ldrh	r2, [r7, #16]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	f080 8092 	bcs.w	8003b7c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8a3a      	ldrh	r2, [r7, #16]
 8003a5c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d02b      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a76:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a96:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0210 	bic.w	r2, r2, #16
 8003ab4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe f879 	bl	8001bb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f876 	bl	8003bc2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ad6:	e051      	b.n	8003b7c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d047      	beq.n	8003b80 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003af0:	8a7b      	ldrh	r3, [r7, #18]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b04:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0201 	bic.w	r2, r2, #1
 8003b14:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0210 	bic.w	r2, r2, #16
 8003b32:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b34:	8a7b      	ldrh	r3, [r7, #18]
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f842 	bl	8003bc2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b3e:	e01f      	b.n	8003b80 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_UART_IRQHandler+0x324>
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f87f 	bl	8003c58 <UART_Transmit_IT>
    return;
 8003b5a:	e012      	b.n	8003b82 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00d      	beq.n	8003b82 <HAL_UART_IRQHandler+0x34a>
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8c0 	bl	8003cf6 <UART_EndTransmit_IT>
    return;
 8003b76:	e004      	b.n	8003b82 <HAL_UART_IRQHandler+0x34a>
    return;
 8003b78:	bf00      	nop
 8003b7a:	e002      	b.n	8003b82 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b7c:	bf00      	nop
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b80:	bf00      	nop
  }
}
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	08003c31 	.word	0x08003c31

08003b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0210 	bic.w	r2, r2, #16
 8003c16:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff ffb0 	bl	8003bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b21      	cmp	r3, #33	; 0x21
 8003c6a:	d13e      	bne.n	8003cea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c74:	d114      	bne.n	8003ca0 <UART_Transmit_IT+0x48>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d110      	bne.n	8003ca0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]
 8003c9e:	e008      	b.n	8003cb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	1c59      	adds	r1, r3, #1
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6211      	str	r1, [r2, #32]
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10f      	bne.n	8003ce6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
  }
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ff38 	bl	8003b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b22      	cmp	r3, #34	; 0x22
 8003d38:	f040 8099 	bne.w	8003e6e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d44:	d117      	bne.n	8003d76 <UART_Receive_IT+0x50>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d113      	bne.n	8003d76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
 8003d74:	e026      	b.n	8003dc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d007      	beq.n	8003d9a <UART_Receive_IT+0x74>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <UART_Receive_IT+0x82>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e008      	b.n	8003dba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d148      	bne.n	8003e6a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0220 	bic.w	r2, r2, #32
 8003de6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d123      	bne.n	8003e60 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0210 	bic.w	r2, r2, #16
 8003e2c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d10a      	bne.n	8003e52 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff feb2 	bl	8003bc2 <HAL_UARTEx_RxEventCallback>
 8003e5e:	e002      	b.n	8003e66 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff fe9c 	bl	8003b9e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e002      	b.n	8003e70 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003eb2:	f023 030c 	bic.w	r3, r3, #12
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2c      	ldr	r2, [pc, #176]	; (8003f8c <UART_SetConfig+0x114>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d103      	bne.n	8003ee8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ee0:	f7fe fccc 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	e002      	b.n	8003eee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f7fe fcb4 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8003eec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009a      	lsls	r2, r3, #2
 8003ef8:	441a      	add	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	4a22      	ldr	r2, [pc, #136]	; (8003f90 <UART_SetConfig+0x118>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	0119      	lsls	r1, r3, #4
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009a      	lsls	r2, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f24:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <UART_SetConfig+0x118>)
 8003f26:	fba3 0302 	umull	r0, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2064      	movs	r0, #100	; 0x64
 8003f2e:	fb00 f303 	mul.w	r3, r0, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	3332      	adds	r3, #50	; 0x32
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <UART_SetConfig+0x118>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f44:	4419      	add	r1, r3
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009a      	lsls	r2, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <UART_SetConfig+0x118>)
 8003f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2064      	movs	r0, #100	; 0x64
 8003f66:	fb00 f303 	mul.w	r3, r0, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	3332      	adds	r3, #50	; 0x32
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <UART_SetConfig+0x118>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	f003 020f 	and.w	r2, r3, #15
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	440a      	add	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40013800 	.word	0x40013800
 8003f90:	51eb851f 	.word	0x51eb851f

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	2600      	movs	r6, #0
 8003f98:	4d0c      	ldr	r5, [pc, #48]	; (8003fcc <__libc_init_array+0x38>)
 8003f9a:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	f000 f822 	bl	8003fec <_init>
 8003fa8:	2600      	movs	r6, #0
 8003faa:	4d0a      	ldr	r5, [pc, #40]	; (8003fd4 <__libc_init_array+0x40>)
 8003fac:	4c0a      	ldr	r4, [pc, #40]	; (8003fd8 <__libc_init_array+0x44>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	0800402c 	.word	0x0800402c
 8003fd0:	0800402c 	.word	0x0800402c
 8003fd4:	0800402c 	.word	0x0800402c
 8003fd8:	08004030 	.word	0x08004030

08003fdc <memset>:
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4402      	add	r2, r0
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <memset+0xa>
 8003fe4:	4770      	bx	lr
 8003fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fea:	e7f9      	b.n	8003fe0 <memset+0x4>

08003fec <_init>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr

08003ff8 <_fini>:
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	bf00      	nop
 8003ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffe:	bc08      	pop	{r3}
 8004000:	469e      	mov	lr, r3
 8004002:	4770      	bx	lr
