
AssignmentProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd0  08004dd0  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004dd0  08004dd0  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dd0  08004dd0  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200000cc  08004ea4  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08004ea4  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183dc  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003004  00000000  00000000  000384d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0003b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  0003c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a067  00000000  00000000  0003cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126a9  00000000  00000000  00056fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b210  00000000  00000000  00069650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4860  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a5c  00000000  00000000  000f48b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d44 	.word	0x08004d44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08004d44 	.word	0x08004d44

0800014c <isButton1Pressed>:

int KeyReg3[4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int timeForKeyPressed[4] = {300/TICK, 300/TICK, 300/TICK, 300/TICK};

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag ==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000e8 	.word	0x200000e8

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag ==1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ec 	.word	0x200000ec

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag ==1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000f0 	.word	0x200000f0

080001b8 <isButtonPedesPressed>:

int isButtonPedesPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if (buttonPedes_flag ==1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButtonPedesPressed+0x16>
		buttonPedes_flag =0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButtonPedesPressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000f4 	.word	0x200000f4

080001dc <doProcess>:

void doProcess(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d81a      	bhi.n	8000220 <doProcess+0x44>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <doProcess+0x14>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000201 	.word	0x08000201
 80001f4:	08000209 	.word	0x08000209
 80001f8:	08000211 	.word	0x08000211
 80001fc:	08000219 	.word	0x08000219
	switch (i){
	case 0:
		button1_flag =1;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <doProcess+0x50>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
		break;
 8000206:	e00c      	b.n	8000222 <doProcess+0x46>
	case 1:
		button2_flag =1;
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <doProcess+0x54>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
		break;
 800020e:	e008      	b.n	8000222 <doProcess+0x46>
	case 2:
		button3_flag =1;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <doProcess+0x58>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
		break;
 8000216:	e004      	b.n	8000222 <doProcess+0x46>
	case 3:
		buttonPedes_flag =1;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <doProcess+0x5c>)
 800021a:	2201      	movs	r2, #1
 800021c:	601a      	str	r2, [r3, #0]
		break;
 800021e:	e000      	b.n	8000222 <doProcess+0x46>
	default:
		break;
 8000220:	bf00      	nop
	}
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	200000e8 	.word	0x200000e8
 8000230:	200000ec 	.word	0x200000ec
 8000234:	200000f0 	.word	0x200000f0
 8000238:	200000f4 	.word	0x200000f4

0800023c <readPin>:


int readPin(int i){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d822      	bhi.n	8000290 <readPin+0x54>
 800024a:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <readPin+0x14>)
 800024c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000250:	08000261 	.word	0x08000261
 8000254:	0800026d 	.word	0x0800026d
 8000258:	08000279 	.word	0x08000279
 800025c:	08000285 	.word	0x08000285
	switch(i){
	case 0:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON1_Pin);
 8000260:	2102      	movs	r1, #2
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <readPin+0x60>)
 8000264:	f002 f86a 	bl	800233c <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	e012      	b.n	8000292 <readPin+0x56>
		break;
	case 1:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON2_Pin);
 800026c:	2110      	movs	r1, #16
 800026e:	480b      	ldr	r0, [pc, #44]	; (800029c <readPin+0x60>)
 8000270:	f002 f864 	bl	800233c <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	e00c      	b.n	8000292 <readPin+0x56>
		break;
	case 2:
		return HAL_GPIO_ReadPin(GPIOB, BUTTON3_Pin);
 8000278:	2101      	movs	r1, #1
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <readPin+0x64>)
 800027c:	f002 f85e 	bl	800233c <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	e006      	b.n	8000292 <readPin+0x56>
		break;
	case 3:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON_PEDES_Pin);
 8000284:	2101      	movs	r1, #1
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <readPin+0x60>)
 8000288:	f002 f858 	bl	800233c <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	e000      	b.n	8000292 <readPin+0x56>
		break;
	default:
		return GPIO_PIN_RESET;
 8000290:	2300      	movs	r3, #0
		break;
	}
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <getKeyInput>:


void getKeyInput(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	for (int i =0; i<4; i++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e068      	b.n	8000382 <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 80002b0:	4a38      	ldr	r2, [pc, #224]	; (8000394 <getKeyInput+0xf0>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	4937      	ldr	r1, [pc, #220]	; (8000398 <getKeyInput+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80002c0:	4a36      	ldr	r2, [pc, #216]	; (800039c <getKeyInput+0xf8>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c8:	4932      	ldr	r1, [pc, #200]	; (8000394 <getKeyInput+0xf0>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = readPin(i);
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f7ff ffb3 	bl	800023c <readPin>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4930      	ldr	r1, [pc, #192]	; (800039c <getKeyInput+0xf8>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 80002e0:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <getKeyInput+0xf4>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e8:	492a      	ldr	r1, [pc, #168]	; (8000394 <getKeyInput+0xf0>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d143      	bne.n	800037c <getKeyInput+0xd8>
 80002f4:	4a27      	ldr	r2, [pc, #156]	; (8000394 <getKeyInput+0xf0>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fc:	4927      	ldr	r1, [pc, #156]	; (800039c <getKeyInput+0xf8>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000304:	429a      	cmp	r2, r3
 8000306:	d139      	bne.n	800037c <getKeyInput+0xd8>
			if (KeyReg2[i] != KeyReg3[i]){
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <getKeyInput+0xf8>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4923      	ldr	r1, [pc, #140]	; (80003a0 <getKeyInput+0xfc>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d016      	beq.n	800034a <getKeyInput+0xa6>
				KeyReg3[i] = KeyReg2[i];
 800031c:	4a1f      	ldr	r2, [pc, #124]	; (800039c <getKeyInput+0xf8>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	491e      	ldr	r1, [pc, #120]	; (80003a0 <getKeyInput+0xfc>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <getKeyInput+0xf8>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d121      	bne.n	800037c <getKeyInput+0xd8>
					timeForKeyPressed[i] = 300/TICK;
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <getKeyInput+0x100>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	211e      	movs	r1, #30
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					doProcess(i);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff4a 	bl	80001dc <doProcess>
 8000348:	e018      	b.n	800037c <getKeyInput+0xd8>
				}
			}else {
				timeForKeyPressed[i]--;
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <getKeyInput+0x100>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4913      	ldr	r1, [pc, #76]	; (80003a4 <getKeyInput+0x100>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeForKeyPressed[i] ==0){
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <getKeyInput+0x100>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d109      	bne.n	800037c <getKeyInput+0xd8>
					KeyReg3[i] =NORMAL_STATE;
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <getKeyInput+0xfc>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2101      	movs	r1, #1
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeForKeyPressed[i] = 300/TICK;
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <getKeyInput+0x100>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	211e      	movs	r1, #30
 8000378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0; i<4; i++){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b03      	cmp	r3, #3
 8000386:	dd93      	ble.n	80002b0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000010 	.word	0x20000010
 8000398:	20000000 	.word	0x20000000
 800039c:	20000020 	.word	0x20000020
 80003a0:	20000030 	.word	0x20000030
 80003a4:	20000040 	.word	0x20000040

080003a8 <buzzerRun>:

TIM_HandleTypeDef htim3;

int buzzer_flag =0;

void buzzerRun(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	switch (buzzer_flag){
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <buzzerRun+0x74>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <buzzerRun+0x12>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d00b      	beq.n	80003d0 <buzzerRun+0x28>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
			setTimer7(250);
		}
		break;
	default:
		break;
 80003b8:	e02d      	b.n	8000416 <buzzerRun+0x6e>
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <buzzerRun+0x78>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2200      	movs	r2, #0
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(10);
 80003c2:	200a      	movs	r0, #10
 80003c4:	f000 fd26 	bl	8000e14 <setTimer6>
		setTimer7(50);
 80003c8:	2032      	movs	r0, #50	; 0x32
 80003ca:	f000 fd3f 	bl	8000e4c <setTimer7>
		break;
 80003ce:	e022      	b.n	8000416 <buzzerRun+0x6e>
		if (timer6_flag == 1){
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <buzzerRun+0x7c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d112      	bne.n	80003fe <buzzerRun+0x56>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, (100 /(get_timer4_counter()/1000 +1)));
 80003d8:	f000 fd62 	bl	8000ea0 <get_timer4_counter>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <buzzerRun+0x80>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	1192      	asrs	r2, r2, #6
 80003e6:	17db      	asrs	r3, r3, #31
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	3301      	adds	r3, #1
 80003ec:	2264      	movs	r2, #100	; 0x64
 80003ee:	fb92 f2f3 	sdiv	r2, r2, r3
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <buzzerRun+0x78>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer6(250);
 80003f8:	20fa      	movs	r0, #250	; 0xfa
 80003fa:	f000 fd0b 	bl	8000e14 <setTimer6>
		if (timer7_flag ==1){
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <buzzerRun+0x84>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d106      	bne.n	8000414 <buzzerRun+0x6c>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <buzzerRun+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer7(250);
 800040e:	20fa      	movs	r0, #250	; 0xfa
 8000410:	f000 fd1c 	bl	8000e4c <setTimer7>
		break;
 8000414:	bf00      	nop
	}
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000f8 	.word	0x200000f8
 8000420:	20000150 	.word	0x20000150
 8000424:	20000134 	.word	0x20000134
 8000428:	10624dd3 	.word	0x10624dd3
 800042c:	2000013c 	.word	0x2000013c

08000430 <modeRun>:
 */


#include "fsm_mode.h"

void modeRun(){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	switch(mode){
 8000434:	4baf      	ldr	r3, [pc, #700]	; (80006f4 <modeRun+0x2c4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b03      	cmp	r3, #3
 800043a:	f200 818c 	bhi.w	8000756 <modeRun+0x326>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <modeRun+0x14>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000455 	.word	0x08000455
 8000448:	0800045d 	.word	0x0800045d
 800044c:	08000471 	.word	0x08000471
 8000450:	080005bf 	.word	0x080005bf
	case INIT_MODE:
		mode = MODE_1;
 8000454:	4ba7      	ldr	r3, [pc, #668]	; (80006f4 <modeRun+0x2c4>)
 8000456:	2201      	movs	r2, #1
 8000458:	601a      	str	r2, [r3, #0]
		break;
 800045a:	e17c      	b.n	8000756 <modeRun+0x326>
	case MODE_1:
		if (isButton1Pressed()){
 800045c:	f7ff fe76 	bl	800014c <isButton1Pressed>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	f000 8172 	beq.w	800074c <modeRun+0x31c>
			mode = MODE_2;
 8000468:	4ba2      	ldr	r3, [pc, #648]	; (80006f4 <modeRun+0x2c4>)
 800046a:	2202      	movs	r2, #2
 800046c:	601a      	str	r2, [r3, #0]
		}
		break;
 800046e:	e16d      	b.n	800074c <modeRun+0x31c>
	case MODE_2:
		if (isButton1Pressed()){
 8000470:	f7ff fe6c 	bl	800014c <isButton1Pressed>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <modeRun+0x50>
			mode = MODE_3;
 800047a:	4b9e      	ldr	r3, [pc, #632]	; (80006f4 <modeRun+0x2c4>)
 800047c:	2203      	movs	r2, #3
 800047e:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 8000480:	f7ff fe76 	bl	8000170 <isButton2Pressed>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d046      	beq.n	8000518 <modeRun+0xe8>
			switch(state_1){
 800048a:	4b9b      	ldr	r3, [pc, #620]	; (80006f8 <modeRun+0x2c8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b0d      	cmp	r3, #13
 8000490:	d00e      	beq.n	80004b0 <modeRun+0x80>
 8000492:	2b0d      	cmp	r3, #13
 8000494:	dc1c      	bgt.n	80004d0 <modeRun+0xa0>
 8000496:	2b0b      	cmp	r3, #11
 8000498:	d002      	beq.n	80004a0 <modeRun+0x70>
 800049a:	2b0c      	cmp	r3, #12
 800049c:	d010      	beq.n	80004c0 <modeRun+0x90>
			case MAN_AMBER:
				state_1= MAN_RED;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 800049e:	e017      	b.n	80004d0 <modeRun+0xa0>
				state_1= MAN_GREEN;
 80004a0:	4b95      	ldr	r3, [pc, #596]	; (80006f8 <modeRun+0x2c8>)
 80004a2:	220d      	movs	r2, #13
 80004a4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004aa:	f000 fc43 	bl	8000d34 <setTimer2>
				break;
 80004ae:	e010      	b.n	80004d2 <modeRun+0xa2>
				state_1= MAN_AMBER;
 80004b0:	4b91      	ldr	r3, [pc, #580]	; (80006f8 <modeRun+0x2c8>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ba:	f000 fc3b 	bl	8000d34 <setTimer2>
				break;
 80004be:	e008      	b.n	80004d2 <modeRun+0xa2>
				state_1= MAN_RED;
 80004c0:	4b8d      	ldr	r3, [pc, #564]	; (80006f8 <modeRun+0x2c8>)
 80004c2:	220b      	movs	r2, #11
 80004c4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ca:	f000 fc33 	bl	8000d34 <setTimer2>
				break;
 80004ce:	e000      	b.n	80004d2 <modeRun+0xa2>
				break;
 80004d0:	bf00      	nop
			}

			switch(state_2){
 80004d2:	4b8a      	ldr	r3, [pc, #552]	; (80006fc <modeRun+0x2cc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b0d      	cmp	r3, #13
 80004d8:	d00e      	beq.n	80004f8 <modeRun+0xc8>
 80004da:	2b0d      	cmp	r3, #13
 80004dc:	dc1e      	bgt.n	800051c <modeRun+0xec>
 80004de:	2b0b      	cmp	r3, #11
 80004e0:	d002      	beq.n	80004e8 <modeRun+0xb8>
 80004e2:	2b0c      	cmp	r3, #12
 80004e4:	d010      	beq.n	8000508 <modeRun+0xd8>
			case MAN_AMBER:
				state_2= MAN_RED;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 80004e6:	e019      	b.n	800051c <modeRun+0xec>
				state_2= MAN_GREEN;
 80004e8:	4b84      	ldr	r3, [pc, #528]	; (80006fc <modeRun+0x2cc>)
 80004ea:	220d      	movs	r2, #13
 80004ec:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80004ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80004f2:	f000 fc3b 	bl	8000d6c <setTimer3>
				break;
 80004f6:	e012      	b.n	800051e <modeRun+0xee>
				state_2= MAN_AMBER;
 80004f8:	4b80      	ldr	r3, [pc, #512]	; (80006fc <modeRun+0x2cc>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80004fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000502:	f000 fc33 	bl	8000d6c <setTimer3>
				break;
 8000506:	e00a      	b.n	800051e <modeRun+0xee>
				state_2= MAN_RED;
 8000508:	4b7c      	ldr	r3, [pc, #496]	; (80006fc <modeRun+0x2cc>)
 800050a:	220b      	movs	r2, #11
 800050c:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800050e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000512:	f000 fc2b 	bl	8000d6c <setTimer3>
				break;
 8000516:	e002      	b.n	800051e <modeRun+0xee>
			}
		}
 8000518:	bf00      	nop
 800051a:	e000      	b.n	800051e <modeRun+0xee>
				break;
 800051c:	bf00      	nop

		if (isButton3Pressed()){
 800051e:	f7ff fe39 	bl	8000194 <isButton3Pressed>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d046      	beq.n	80005b6 <modeRun+0x186>
			switch(state_1){
 8000528:	4b73      	ldr	r3, [pc, #460]	; (80006f8 <modeRun+0x2c8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b0d      	cmp	r3, #13
 800052e:	d00e      	beq.n	800054e <modeRun+0x11e>
 8000530:	2b0d      	cmp	r3, #13
 8000532:	dc1c      	bgt.n	800056e <modeRun+0x13e>
 8000534:	2b0b      	cmp	r3, #11
 8000536:	d002      	beq.n	800053e <modeRun+0x10e>
 8000538:	2b0c      	cmp	r3, #12
 800053a:	d010      	beq.n	800055e <modeRun+0x12e>
			case MAN_AMBER:
				state_1=MAN_GREEN;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 800053c:	e017      	b.n	800056e <modeRun+0x13e>
				state_1=MAN_AMBER;
 800053e:	4b6e      	ldr	r3, [pc, #440]	; (80006f8 <modeRun+0x2c8>)
 8000540:	220c      	movs	r2, #12
 8000542:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000544:	f242 7010 	movw	r0, #10000	; 0x2710
 8000548:	f000 fbf4 	bl	8000d34 <setTimer2>
				break;
 800054c:	e010      	b.n	8000570 <modeRun+0x140>
				state_1=MAN_RED;
 800054e:	4b6a      	ldr	r3, [pc, #424]	; (80006f8 <modeRun+0x2c8>)
 8000550:	220b      	movs	r2, #11
 8000552:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000554:	f242 7010 	movw	r0, #10000	; 0x2710
 8000558:	f000 fbec 	bl	8000d34 <setTimer2>
				break;
 800055c:	e008      	b.n	8000570 <modeRun+0x140>
				state_1=MAN_GREEN;
 800055e:	4b66      	ldr	r3, [pc, #408]	; (80006f8 <modeRun+0x2c8>)
 8000560:	220d      	movs	r2, #13
 8000562:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000564:	f242 7010 	movw	r0, #10000	; 0x2710
 8000568:	f000 fbe4 	bl	8000d34 <setTimer2>
				break;
 800056c:	e000      	b.n	8000570 <modeRun+0x140>
				break;
 800056e:	bf00      	nop
			}

			switch(state_2){
 8000570:	4b62      	ldr	r3, [pc, #392]	; (80006fc <modeRun+0x2cc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b0d      	cmp	r3, #13
 8000576:	d00e      	beq.n	8000596 <modeRun+0x166>
 8000578:	2b0d      	cmp	r3, #13
 800057a:	dc1e      	bgt.n	80005ba <modeRun+0x18a>
 800057c:	2b0b      	cmp	r3, #11
 800057e:	d002      	beq.n	8000586 <modeRun+0x156>
 8000580:	2b0c      	cmp	r3, #12
 8000582:	d010      	beq.n	80005a6 <modeRun+0x176>
			case MAN_AMBER:
				state_2=MAN_GREEN;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 8000584:	e019      	b.n	80005ba <modeRun+0x18a>
				state_2=MAN_AMBER;
 8000586:	4b5d      	ldr	r3, [pc, #372]	; (80006fc <modeRun+0x2cc>)
 8000588:	220c      	movs	r2, #12
 800058a:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800058c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000590:	f000 fbec 	bl	8000d6c <setTimer3>
				break;
 8000594:	e012      	b.n	80005bc <modeRun+0x18c>
				state_2=MAN_RED;
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <modeRun+0x2cc>)
 8000598:	220b      	movs	r2, #11
 800059a:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800059c:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a0:	f000 fbe4 	bl	8000d6c <setTimer3>
				break;
 80005a4:	e00a      	b.n	80005bc <modeRun+0x18c>
				state_2=MAN_GREEN;
 80005a6:	4b55      	ldr	r3, [pc, #340]	; (80006fc <modeRun+0x2cc>)
 80005a8:	220d      	movs	r2, #13
 80005aa:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80005ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80005b0:	f000 fbdc 	bl	8000d6c <setTimer3>
				break;
 80005b4:	e002      	b.n	80005bc <modeRun+0x18c>
			}
		}
 80005b6:	bf00      	nop
 80005b8:	e0cd      	b.n	8000756 <modeRun+0x326>
				break;
 80005ba:	bf00      	nop
		break;
 80005bc:	e0cb      	b.n	8000756 <modeRun+0x326>
	case MODE_3:
		if (isButton1Pressed()){
 80005be:	f7ff fdc5 	bl	800014c <isButton1Pressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <modeRun+0x19e>
			mode = MODE_1;
 80005c8:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <modeRun+0x2c4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 80005ce:	f7ff fdcf 	bl	8000170 <isButton2Pressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d06a      	beq.n	80006ae <modeRun+0x27e>
			switch(state_1){
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <modeRun+0x2c8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b17      	cmp	r3, #23
 80005de:	d013      	beq.n	8000608 <modeRun+0x1d8>
 80005e0:	2b17      	cmp	r3, #23
 80005e2:	dc2f      	bgt.n	8000644 <modeRun+0x214>
 80005e4:	2b15      	cmp	r3, #21
 80005e6:	d002      	beq.n	80005ee <modeRun+0x1be>
 80005e8:	2b16      	cmp	r3, #22
 80005ea:	d01f      	beq.n	800062c <modeRun+0x1fc>
				state_1 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
				setTimer2(250);
				break;
			default:
				break;
 80005ec:	e02a      	b.n	8000644 <modeRun+0x214>
				state_1 =TUN_GREEN;
 80005ee:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <modeRun+0x2c8>)
 80005f0:	2217      	movs	r2, #23
 80005f2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <modeRun+0x2d0>)
 80005fc:	f001 feb5 	bl	800236a <HAL_GPIO_WritePin>
				setTimer2(250);
 8000600:	20fa      	movs	r0, #250	; 0xfa
 8000602:	f000 fb97 	bl	8000d34 <setTimer2>
				break;
 8000606:	e01e      	b.n	8000646 <modeRun+0x216>
				state_1 =TUN_AMBER;
 8000608:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <modeRun+0x2c8>)
 800060a:	2216      	movs	r2, #22
 800060c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	483a      	ldr	r0, [pc, #232]	; (8000700 <modeRun+0x2d0>)
 8000616:	f001 fea8 	bl	800236a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2108      	movs	r1, #8
 800061e:	4839      	ldr	r0, [pc, #228]	; (8000704 <modeRun+0x2d4>)
 8000620:	f001 fea3 	bl	800236a <HAL_GPIO_WritePin>
				setTimer2(250);
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 fb85 	bl	8000d34 <setTimer2>
				break;
 800062a:	e00c      	b.n	8000646 <modeRun+0x216>
				state_1 =TUN_RED;
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <modeRun+0x2c8>)
 800062e:	2215      	movs	r2, #21
 8000630:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2108      	movs	r1, #8
 8000636:	4833      	ldr	r0, [pc, #204]	; (8000704 <modeRun+0x2d4>)
 8000638:	f001 fe97 	bl	800236a <HAL_GPIO_WritePin>
				setTimer2(250);
 800063c:	20fa      	movs	r0, #250	; 0xfa
 800063e:	f000 fb79 	bl	8000d34 <setTimer2>
				break;
 8000642:	e000      	b.n	8000646 <modeRun+0x216>
				break;
 8000644:	bf00      	nop
			}

			switch(state_2){
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <modeRun+0x2cc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b17      	cmp	r3, #23
 800064c:	d012      	beq.n	8000674 <modeRun+0x244>
 800064e:	2b17      	cmp	r3, #23
 8000650:	dc2f      	bgt.n	80006b2 <modeRun+0x282>
 8000652:	2b15      	cmp	r3, #21
 8000654:	d002      	beq.n	800065c <modeRun+0x22c>
 8000656:	2b16      	cmp	r3, #22
 8000658:	d01d      	beq.n	8000696 <modeRun+0x266>
				state_2 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
				setTimer3(250);
				break;
			default:
				break;
 800065a:	e02a      	b.n	80006b2 <modeRun+0x282>
				state_2 =TUN_GREEN;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <modeRun+0x2cc>)
 800065e:	2217      	movs	r2, #23
 8000660:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4827      	ldr	r0, [pc, #156]	; (8000704 <modeRun+0x2d4>)
 8000668:	f001 fe7f 	bl	800236a <HAL_GPIO_WritePin>
				setTimer3(250);
 800066c:	20fa      	movs	r0, #250	; 0xfa
 800066e:	f000 fb7d 	bl	8000d6c <setTimer3>
				break;
 8000672:	e01f      	b.n	80006b4 <modeRun+0x284>
				state_2 =TUN_AMBER;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <modeRun+0x2cc>)
 8000676:	2216      	movs	r2, #22
 8000678:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <modeRun+0x2d4>)
 8000680:	f001 fe73 	bl	800236a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	481e      	ldr	r0, [pc, #120]	; (8000704 <modeRun+0x2d4>)
 800068a:	f001 fe6e 	bl	800236a <HAL_GPIO_WritePin>
				setTimer3(250);
 800068e:	20fa      	movs	r0, #250	; 0xfa
 8000690:	f000 fb6c 	bl	8000d6c <setTimer3>
				break;
 8000694:	e00e      	b.n	80006b4 <modeRun+0x284>
				state_2 =TUN_RED;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <modeRun+0x2cc>)
 8000698:	2215      	movs	r2, #21
 800069a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <modeRun+0x2d4>)
 80006a2:	f001 fe62 	bl	800236a <HAL_GPIO_WritePin>
				setTimer3(250);
 80006a6:	20fa      	movs	r0, #250	; 0xfa
 80006a8:	f000 fb60 	bl	8000d6c <setTimer3>
				break;
 80006ac:	e002      	b.n	80006b4 <modeRun+0x284>
			}
		}
 80006ae:	bf00      	nop
 80006b0:	e000      	b.n	80006b4 <modeRun+0x284>
				break;
 80006b2:	bf00      	nop

		if (isButton3Pressed()){
 80006b4:	f7ff fd6e 	bl	8000194 <isButton3Pressed>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d048      	beq.n	8000750 <modeRun+0x320>
			switch (state_1){
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <modeRun+0x2c8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b17      	cmp	r3, #23
 80006c4:	d006      	beq.n	80006d4 <modeRun+0x2a4>
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	dc44      	bgt.n	8000754 <modeRun+0x324>
 80006ca:	2b15      	cmp	r3, #21
 80006cc:	d02e      	beq.n	800072c <modeRun+0x2fc>
 80006ce:	2b16      	cmp	r3, #22
 80006d0:	d01c      	beq.n	800070c <modeRun+0x2dc>
				if (redTime <99) redTime++;
				else redTime =1;
				uartRun();
				break;
			default:
				break;
 80006d2:	e03f      	b.n	8000754 <modeRun+0x324>
				if (greenTime <99) greenTime++;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <modeRun+0x2d8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b62      	cmp	r3, #98	; 0x62
 80006da:	dc05      	bgt.n	80006e8 <modeRun+0x2b8>
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <modeRun+0x2d8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a09      	ldr	r2, [pc, #36]	; (8000708 <modeRun+0x2d8>)
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e002      	b.n	80006ee <modeRun+0x2be>
				else greenTime =1;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <modeRun+0x2d8>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
				uartRun();
 80006ee:	f001 f9a1 	bl	8001a34 <uartRun>
				break;
 80006f2:	e030      	b.n	8000756 <modeRun+0x326>
 80006f4:	20000104 	.word	0x20000104
 80006f8:	200000fc 	.word	0x200000fc
 80006fc:	20000100 	.word	0x20000100
 8000700:	40010800 	.word	0x40010800
 8000704:	40010c00 	.word	0x40010c00
 8000708:	20000058 	.word	0x20000058
				if (amberTime <99) amberTime++;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <modeRun+0x32c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b62      	cmp	r3, #98	; 0x62
 8000712:	dc05      	bgt.n	8000720 <modeRun+0x2f0>
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <modeRun+0x32c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <modeRun+0x32c>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	e002      	b.n	8000726 <modeRun+0x2f6>
				else amberTime =1;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <modeRun+0x32c>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
				uartRun();
 8000726:	f001 f985 	bl	8001a34 <uartRun>
				break;
 800072a:	e014      	b.n	8000756 <modeRun+0x326>
				if (redTime <99) redTime++;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <modeRun+0x330>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b62      	cmp	r3, #98	; 0x62
 8000732:	dc05      	bgt.n	8000740 <modeRun+0x310>
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <modeRun+0x330>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <modeRun+0x330>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	e002      	b.n	8000746 <modeRun+0x316>
				else redTime =1;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <modeRun+0x330>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
				uartRun();
 8000746:	f001 f975 	bl	8001a34 <uartRun>
				break;
 800074a:	e004      	b.n	8000756 <modeRun+0x326>
		break;
 800074c:	bf00      	nop
 800074e:	e002      	b.n	8000756 <modeRun+0x326>
			}
		}
 8000750:	bf00      	nop
 8000752:	e000      	b.n	8000756 <modeRun+0x326>
				break;
 8000754:	bf00      	nop
	}
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000054 	.word	0x20000054
 8000760:	20000050 	.word	0x20000050

08000764 <ledBlink>:
int mode = 0;
int redTime = 5;
int amberTime = 2;
int greenTime = 3;

void ledBlink(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if (timer1_flag ==1){
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <ledBlink+0x20>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d106      	bne.n	800077e <ledBlink+0x1a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000770:	2120      	movs	r1, #32
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <ledBlink+0x24>)
 8000774:	f001 fe11 	bl	800239a <HAL_GPIO_TogglePin>
		setTimer1(250);
 8000778:	20fa      	movs	r0, #250	; 0xfa
 800077a:	f000 fabf 	bl	8000cfc <setTimer1>
	}
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000010c 	.word	0x2000010c
 8000788:	40010800 	.word	0x40010800

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f001 fa30 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f82a 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f956 	bl	8000a48 <MX_GPIO_Init>
  MX_TIM2_Init();
 800079c:	f000 f868 	bl	8000870 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 f928 	bl	80009f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007a4:	f000 f8b0 	bl	8000908 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <main+0x58>)
 80007aa:	f002 fa79 	bl	8002ca0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ae:	2100      	movs	r1, #0
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <main+0x5c>)
 80007b2:	f002 fb1f 	bl	8002df4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timerInit();
 80007b6:	f000 fb81 	bl	8000ebc <timerInit>
  while (1)
  {
	  ledBlink();
 80007ba:	f7ff ffd3 	bl	8000764 <ledBlink>
	  modeRun();
 80007be:	f7ff fe37 	bl	8000430 <modeRun>
	  pedes_light_fsm();
 80007c2:	f000 f9c1 	bl	8000b48 <pedes_light_fsm>
	  fsm_automatic_run1();
 80007c6:	f000 fd8b 	bl	80012e0 <fsm_automatic_run1>
	  fsm_automatic_run2();
 80007ca:	f000 fe37 	bl	800143c <fsm_automatic_run2>
	  fsm_manual_run1();
 80007ce:	f000 fedf 	bl	8001590 <fsm_manual_run1>
	  fsm_manual_run2();
 80007d2:	f000 ff93 	bl	80016fc <fsm_manual_run2>
	  fsm_tuning_run1();
 80007d6:	f001 f839 	bl	800184c <fsm_tuning_run1>
	  fsm_tuning_run2();
 80007da:	f001 f8b3 	bl	8001944 <fsm_tuning_run2>
	  buzzerRun();
 80007de:	f7ff fde3 	bl	80003a8 <buzzerRun>
	  ledBlink();
 80007e2:	e7ea      	b.n	80007ba <main+0x2e>
 80007e4:	20000198 	.word	0x20000198
 80007e8:	20000150 	.word	0x20000150

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	; 0x40
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fe60 	bl	80044c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800081e:	2300      	movs	r3, #0
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000822:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fdcd 	bl	80023cc <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000838:	f000 f980 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f838 	bl	80028cc <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000862:	f000 f96b 	bl	8000b3c <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3740      	adds	r7, #64	; 0x40
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_TIM2_Init+0x94>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_TIM2_Init+0x94>)
 8000896:	f242 720f 	movw	r2, #9999	; 0x270f
 800089a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_TIM2_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM2_Init+0x94>)
 80008a4:	223f      	movs	r2, #63	; 0x3f
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_TIM2_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b6:	f002 f9a3 	bl	8002c00 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c0:	f000 f93c 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM2_Init+0x94>)
 80008d2:	f002 fcf7 	bl	80032c4 <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f92e 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM2_Init+0x94>)
 80008ee:	f003 f875 	bl	80039dc <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f920 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000198 	.word	0x20000198

08000908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <MX_TIM3_Init+0xe4>)
 800093a:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <MX_TIM3_Init+0xe8>)
 800093c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000940:	223f      	movs	r2, #63	; 0x3f
 8000942:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_TIM3_Init+0xe4>)
 800094c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_TIM3_Init+0xe4>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800095e:	4823      	ldr	r0, [pc, #140]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000960:	f002 f94e 	bl	8002c00 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800096a:	f000 f8e7 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000978:	4619      	mov	r1, r3
 800097a:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_TIM3_Init+0xe4>)
 800097c:	f002 fca2 	bl	80032c4 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000986:	f000 f8d9 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098a:	4818      	ldr	r0, [pc, #96]	; (80009ec <MX_TIM3_Init+0xe4>)
 800098c:	f002 f9da 	bl	8002d44 <HAL_TIM_PWM_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000996:	f000 f8d1 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	4619      	mov	r1, r3
 80009a8:	4810      	ldr	r0, [pc, #64]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009aa:	f003 f817 	bl	80039dc <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009b4:	f000 f8c2 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b8:	2360      	movs	r3, #96	; 0x60
 80009ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009d0:	f002 fbba 	bl	8003148 <HAL_TIM_PWM_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009da:	f000 f8af 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009e0:	f000 fb82 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 80009e4:	bf00      	nop
 80009e6:	3738      	adds	r7, #56	; 0x38
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000150 	.word	0x20000150
 80009f0:	40000400 	.word	0x40000400

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f003 f846 	bl	8003abc <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f881 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001f8 	.word	0x200001f8
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000a92:	4822      	ldr	r0, [pc, #136]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000a94:	f001 fc69 	bl	800236a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a9e:	4820      	ldr	r0, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000aa0:	f001 fc63 	bl	800236a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDES_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDES_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000aa4:	2313      	movs	r3, #19
 8000aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000ab8:	f001 fabc 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin PLED_GREEN_Pin TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin;
 8000abc:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000ad6:	f001 faad 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000ada:	2301      	movs	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000aee:	f001 faa1 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLED_RED_Pin TRAFFIC1_0_Pin TRAFFIC2_0_Pin TRAFFIC2_1_Pin */
  GPIO_InitStruct.Pin = PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin;
 8000af2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000b0c:	f001 fa92 	bl	8002034 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000b2c:	f000 f9e0 	bl	8000ef0 <timerRun>
	getKeyInput();
 8000b30:	f7ff fbb8 	bl	80002a4 <getKeyInput>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <pedes_light_fsm>:
#include "pedestrian_light.h"

int pedes_state = PEDES_INIT;
int pedes_flag =0;

void pedes_light_fsm(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	switch(pedes_state){
 8000b4c:	4b61      	ldr	r3, [pc, #388]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	f200 80b5 	bhi.w	8000cc0 <pedes_light_fsm+0x178>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <pedes_light_fsm+0x14>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000c73 	.word	0x08000c73
 8000b68:	08000c1f 	.word	0x08000c1f
	case PEDES_INIT:
		pedes_state = PEDES_OFF;
 8000b6c:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

		break;
 8000b72:	e0ac      	b.n	8000cce <pedes_light_fsm+0x186>
	case PEDES_OFF:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	4857      	ldr	r0, [pc, #348]	; (8000cd8 <pedes_light_fsm+0x190>)
 8000b7c:	f001 fbf5 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	4855      	ldr	r0, [pc, #340]	; (8000cdc <pedes_light_fsm+0x194>)
 8000b88:	f001 fbef 	bl	800236a <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_OFF;
 8000b8c:	4b54      	ldr	r3, [pc, #336]	; (8000ce0 <pedes_light_fsm+0x198>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]

		if (isButtonPedesPressed()){
 8000b92:	f7ff fb11 	bl	80001b8 <isButtonPedesPressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 8093 	beq.w	8000cc4 <pedes_light_fsm+0x17c>
			if (state_1 == AUTO_RED){
 8000b9e:	4b51      	ldr	r3, [pc, #324]	; (8000ce4 <pedes_light_fsm+0x19c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d109      	bne.n	8000bba <pedes_light_fsm+0x72>
				setTimer4(get_timer2_counter());
 8000ba6:	f000 f96d 	bl	8000e84 <get_timer2_counter>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f8f9 	bl	8000da4 <setTimer4>
				pedes_state = PEDES_GREEN;
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e021      	b.n	8000bfe <pedes_light_fsm+0xb6>
			}else if (state_1 == AUTO_GREEN){
 8000bba:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <pedes_light_fsm+0x19c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d110      	bne.n	8000be4 <pedes_light_fsm+0x9c>
				setTimer4(get_timer2_counter() + amberTime*1000);
 8000bc2:	f000 f95f 	bl	8000e84 <get_timer2_counter>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <pedes_light_fsm+0x1a0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd0:	fb01 f303 	mul.w	r3, r1, r3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f8e4 	bl	8000da4 <setTimer4>
				pedes_state = PEDES_RED;
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e00c      	b.n	8000bfe <pedes_light_fsm+0xb6>
			}else if (state_1 == AUTO_AMBER){
 8000be4:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <pedes_light_fsm+0x19c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d108      	bne.n	8000bfe <pedes_light_fsm+0xb6>
				setTimer4(get_timer2_counter());
 8000bec:	f000 f94a 	bl	8000e84 <get_timer2_counter>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f8d6 	bl	8000da4 <setTimer4>
				pedes_state = PEDES_RED;
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	601a      	str	r2, [r3, #0]
			}

			setTimer5((redTime + amberTime + greenTime) *2000);
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <pedes_light_fsm+0x1a4>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <pedes_light_fsm+0x1a0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	441a      	add	r2, r3
 8000c08:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c12:	fb02 f303 	mul.w	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f8e0 	bl	8000ddc <setTimer5>
		}
		break;
 8000c1c:	e052      	b.n	8000cc4 <pedes_light_fsm+0x17c>
	case PEDES_GREEN:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <pedes_light_fsm+0x190>)
 8000c26:	f001 fba0 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	482a      	ldr	r0, [pc, #168]	; (8000cdc <pedes_light_fsm+0x194>)
 8000c32:	f001 fb9a 	bl	800236a <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_ON;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <pedes_light_fsm+0x198>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

		if (timer4_flag ==1){
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <pedes_light_fsm+0x1ac>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10e      	bne.n	8000c62 <pedes_light_fsm+0x11a>
			pedes_state = PEDES_RED;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	601a      	str	r2, [r3, #0]
			setTimer4((greenTime +amberTime) *1000);
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <pedes_light_fsm+0x1a0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f8a1 	bl	8000da4 <setTimer4>
		}
		if (timer5_flag ==1){
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <pedes_light_fsm+0x1b0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d12e      	bne.n	8000cc8 <pedes_light_fsm+0x180>
			pedes_state = PEDES_OFF;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c70:	e02a      	b.n	8000cc8 <pedes_light_fsm+0x180>
	case PEDES_RED:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <pedes_light_fsm+0x190>)
 8000c7a:	f001 fb76 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <pedes_light_fsm+0x194>)
 8000c86:	f001 fb70 	bl	800236a <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_OFF;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <pedes_light_fsm+0x198>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]

		if (timer4_flag ==1){
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <pedes_light_fsm+0x1ac>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10b      	bne.n	8000cb0 <pedes_light_fsm+0x168>
			pedes_state = PEDES_GREEN;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	601a      	str	r2, [r3, #0]
			setTimer4(redTime *1000);
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <pedes_light_fsm+0x1a4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f87a 	bl	8000da4 <setTimer4>
		}
		if (timer5_flag ==1){
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <pedes_light_fsm+0x1b0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d109      	bne.n	8000ccc <pedes_light_fsm+0x184>
			pedes_state = PEDES_OFF;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <pedes_light_fsm+0x18c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
		}
		break;
 8000cbe:	e005      	b.n	8000ccc <pedes_light_fsm+0x184>
	default:
		break;
 8000cc0:	bf00      	nop
 8000cc2:	e004      	b.n	8000cce <pedes_light_fsm+0x186>
		break;
 8000cc4:	bf00      	nop
 8000cc6:	e002      	b.n	8000cce <pedes_light_fsm+0x186>
		break;
 8000cc8:	bf00      	nop
 8000cca:	e000      	b.n	8000cce <pedes_light_fsm+0x186>
		break;
 8000ccc:	bf00      	nop
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000108 	.word	0x20000108
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	200000f8 	.word	0x200000f8
 8000ce4:	200000fc 	.word	0x200000fc
 8000ce8:	20000054 	.word	0x20000054
 8000cec:	20000050 	.word	0x20000050
 8000cf0:	20000058 	.word	0x20000058
 8000cf4:	20000124 	.word	0x20000124
 8000cf8:	2000012c 	.word	0x2000012c

08000cfc <setTimer1>:
int timer6_counter =0;

int timer7_flag =0;
int timer7_counter =0;

void setTimer1(int duration){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <setTimer1+0x2c>)
 8000d08:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0c:	1092      	asrs	r2, r2, #2
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <setTimer1+0x30>)
 8000d14:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <setTimer1+0x34>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	66666667 	.word	0x66666667
 8000d2c:	20000110 	.word	0x20000110
 8000d30:	2000010c 	.word	0x2000010c

08000d34 <setTimer2>:

void setTimer2(int duration){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <setTimer2+0x2c>)
 8000d40:	fb82 1203 	smull	r1, r2, r2, r3
 8000d44:	1092      	asrs	r2, r2, #2
 8000d46:	17db      	asrs	r3, r3, #31
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <setTimer2+0x30>)
 8000d4c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <setTimer2+0x34>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	66666667 	.word	0x66666667
 8000d64:	20000118 	.word	0x20000118
 8000d68:	20000114 	.word	0x20000114

08000d6c <setTimer3>:
void setTimer3(int duration){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <setTimer3+0x2c>)
 8000d78:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7c:	1092      	asrs	r2, r2, #2
 8000d7e:	17db      	asrs	r3, r3, #31
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <setTimer3+0x30>)
 8000d84:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <setTimer3+0x34>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	66666667 	.word	0x66666667
 8000d9c:	20000120 	.word	0x20000120
 8000da0:	2000011c 	.word	0x2000011c

08000da4 <setTimer4>:
void setTimer4(int duration){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <setTimer4+0x2c>)
 8000db0:	fb82 1203 	smull	r1, r2, r2, r3
 8000db4:	1092      	asrs	r2, r2, #2
 8000db6:	17db      	asrs	r3, r3, #31
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <setTimer4+0x30>)
 8000dbc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <setTimer4+0x34>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	66666667 	.word	0x66666667
 8000dd4:	20000128 	.word	0x20000128
 8000dd8:	20000124 	.word	0x20000124

08000ddc <setTimer5>:
void setTimer5(int duration){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <setTimer5+0x2c>)
 8000de8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dec:	1092      	asrs	r2, r2, #2
 8000dee:	17db      	asrs	r3, r3, #31
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <setTimer5+0x30>)
 8000df4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <setTimer5+0x34>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	66666667 	.word	0x66666667
 8000e0c:	20000130 	.word	0x20000130
 8000e10:	2000012c 	.word	0x2000012c

08000e14 <setTimer6>:
void setTimer6(int duration){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <setTimer6+0x2c>)
 8000e20:	fb82 1203 	smull	r1, r2, r2, r3
 8000e24:	1092      	asrs	r2, r2, #2
 8000e26:	17db      	asrs	r3, r3, #31
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <setTimer6+0x30>)
 8000e2c:	6013      	str	r3, [r2, #0]
	timer6_flag =0;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <setTimer6+0x34>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	66666667 	.word	0x66666667
 8000e44:	20000138 	.word	0x20000138
 8000e48:	20000134 	.word	0x20000134

08000e4c <setTimer7>:
void setTimer7(int duration){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <setTimer7+0x2c>)
 8000e58:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5c:	1092      	asrs	r2, r2, #2
 8000e5e:	17db      	asrs	r3, r3, #31
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <setTimer7+0x30>)
 8000e64:	6013      	str	r3, [r2, #0]
	timer7_flag =0;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <setTimer7+0x34>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	66666667 	.word	0x66666667
 8000e7c:	20000140 	.word	0x20000140
 8000e80:	2000013c 	.word	0x2000013c

08000e84 <get_timer2_counter>:

int get_timer2_counter(){
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	return timer2_counter*TICK;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <get_timer2_counter+0x18>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000118 	.word	0x20000118

08000ea0 <get_timer4_counter>:

int get_timer4_counter(){
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	return timer4_counter*TICK;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <get_timer4_counter+0x18>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000128 	.word	0x20000128

08000ebc <timerInit>:

void timerInit(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	setTimer1(30);
 8000ec0:	201e      	movs	r0, #30
 8000ec2:	f7ff ff1b 	bl	8000cfc <setTimer1>
	setTimer2(50);
 8000ec6:	2032      	movs	r0, #50	; 0x32
 8000ec8:	f7ff ff34 	bl	8000d34 <setTimer2>
	setTimer3(70);
 8000ecc:	2046      	movs	r0, #70	; 0x46
 8000ece:	f7ff ff4d 	bl	8000d6c <setTimer3>
	setTimer4(110);
 8000ed2:	206e      	movs	r0, #110	; 0x6e
 8000ed4:	f7ff ff66 	bl	8000da4 <setTimer4>
	setTimer5(130);
 8000ed8:	2082      	movs	r0, #130	; 0x82
 8000eda:	f7ff ff7f 	bl	8000ddc <setTimer5>
	setTimer6(170);
 8000ede:	20aa      	movs	r0, #170	; 0xaa
 8000ee0:	f7ff ff98 	bl	8000e14 <setTimer6>
	setTimer7(190);
 8000ee4:	20be      	movs	r0, #190	; 0xbe
 8000ee6:	f7ff ffb1 	bl	8000e4c <setTimer7>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <timerRun>:

void timerRun(){
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000ef4:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <timerRun+0xec>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	dd0b      	ble.n	8000f14 <timerRun+0x24>
		timer1_counter--;
 8000efc:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <timerRun+0xec>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4a36      	ldr	r2, [pc, #216]	; (8000fdc <timerRun+0xec>)
 8000f04:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000f06:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <timerRun+0xec>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	dc02      	bgt.n	8000f14 <timerRun+0x24>
			timer1_flag = 1;
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <timerRun+0xf0>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000f14:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <timerRun+0xf4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	dd0b      	ble.n	8000f34 <timerRun+0x44>
		timer2_counter--;
 8000f1c:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <timerRun+0xf4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <timerRun+0xf4>)
 8000f24:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000f26:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <timerRun+0xf4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	dc02      	bgt.n	8000f34 <timerRun+0x44>
			timer2_flag = 1;
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <timerRun+0xf8>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <timerRun+0xfc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dd0b      	ble.n	8000f54 <timerRun+0x64>
		timer3_counter--;
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <timerRun+0xfc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <timerRun+0xfc>)
 8000f44:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <timerRun+0xfc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dc02      	bgt.n	8000f54 <timerRun+0x64>
			timer3_flag = 1;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <timerRun+0x100>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <timerRun+0x104>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dd0b      	ble.n	8000f74 <timerRun+0x84>
		timer4_counter--;
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <timerRun+0x104>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <timerRun+0x104>)
 8000f64:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <timerRun+0x104>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dc02      	bgt.n	8000f74 <timerRun+0x84>
			timer4_flag = 1;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <timerRun+0x108>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <timerRun+0x10c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dd0b      	ble.n	8000f94 <timerRun+0xa4>
		timer5_counter--;
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <timerRun+0x10c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <timerRun+0x10c>)
 8000f84:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <timerRun+0x10c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	dc02      	bgt.n	8000f94 <timerRun+0xa4>
			timer5_flag = 1;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <timerRun+0x110>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <timerRun+0x114>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dd0b      	ble.n	8000fb4 <timerRun+0xc4>
		timer6_counter--;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <timerRun+0x114>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <timerRun+0x114>)
 8000fa4:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <timerRun+0x114>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dc02      	bgt.n	8000fb4 <timerRun+0xc4>
			timer6_flag = 1;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <timerRun+0x118>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0){
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <timerRun+0x11c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dd0b      	ble.n	8000fd4 <timerRun+0xe4>
		timer7_counter--;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <timerRun+0x11c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <timerRun+0x11c>)
 8000fc4:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0){
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <timerRun+0x11c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dc02      	bgt.n	8000fd4 <timerRun+0xe4>
			timer7_flag = 1;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <timerRun+0x120>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000110 	.word	0x20000110
 8000fe0:	2000010c 	.word	0x2000010c
 8000fe4:	20000118 	.word	0x20000118
 8000fe8:	20000114 	.word	0x20000114
 8000fec:	20000120 	.word	0x20000120
 8000ff0:	2000011c 	.word	0x2000011c
 8000ff4:	20000128 	.word	0x20000128
 8000ff8:	20000124 	.word	0x20000124
 8000ffc:	20000130 	.word	0x20000130
 8001000:	2000012c 	.word	0x2000012c
 8001004:	20000138 	.word	0x20000138
 8001008:	20000134 	.word	0x20000134
 800100c:	20000140 	.word	0x20000140
 8001010:	2000013c 	.word	0x2000013c

08001014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_MspInit+0x5c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a14      	ldr	r2, [pc, #80]	; (8001070 <HAL_MspInit+0x5c>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6193      	str	r3, [r2, #24]
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_MspInit+0x5c>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_MspInit+0x5c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_MspInit+0x5c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_MspInit+0x5c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_MspInit+0x60>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_MspInit+0x60>)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d114      	bne.n	80010b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_TIM_Base_MspInit+0x68>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_TIM_Base_MspInit+0x68>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_TIM_Base_MspInit+0x68>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201c      	movs	r0, #28
 80010a8:	f000 fedd 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ac:	201c      	movs	r0, #28
 80010ae:	f000 fef6 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010b2:	e010      	b.n	80010d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_TIM_Base_MspInit+0x6c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10b      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_TIM_Base_MspInit+0x68>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_TIM_Base_MspInit+0x68>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_TIM_Base_MspInit+0x68>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40000400 	.word	0x40000400

080010e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_TIM_MspPostInit+0x58>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d117      	bne.n	8001138 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_TIM_MspPostInit+0x5c>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_TIM_MspPostInit+0x5c>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_TIM_MspPostInit+0x5c>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_TIM_MspPostInit+0x60>)
 8001134:	f000 ff7e 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40000400 	.word	0x40000400
 8001144:	40021000 	.word	0x40021000
 8001148:	40010800 	.word	0x40010800

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <HAL_UART_MspInit+0x98>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d137      	bne.n	80011dc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_UART_MspInit+0x9c>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_UART_MspInit+0x9c>)
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	61d3      	str	r3, [r2, #28]
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_UART_MspInit+0x9c>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x9c>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <HAL_UART_MspInit+0x9c>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x9c>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800119c:	2304      	movs	r3, #4
 800119e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	480f      	ldr	r0, [pc, #60]	; (80011ec <HAL_UART_MspInit+0xa0>)
 80011b0:	f000 ff40 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b4:	2308      	movs	r3, #8
 80011b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <HAL_UART_MspInit+0xa0>)
 80011c8:	f000 ff34 	bl	8002034 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2026      	movs	r0, #38	; 0x26
 80011d2:	f000 fe48 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011d6:	2026      	movs	r0, #38	; 0x26
 80011d8:	f000 fe61 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40004400 	.word	0x40004400
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010800 	.word	0x40010800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 fd23 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <TIM2_IRQHandler+0x10>)
 8001246:	f001 fe77 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000198 	.word	0x20000198

08001254 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <USART2_IRQHandler+0x10>)
 800125a:	f002 fd0f 	bl	8003c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001f8 	.word	0x200001f8

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f003 f8e8 	bl	800446c <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20005000 	.word	0x20005000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	20000144 	.word	0x20000144
 80012d0:	20000260 	.word	0x20000260

080012d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <fsm_automatic_run1>:
 *      Author: duyvt
 */

#include "traffic_automatic.h"

void fsm_automatic_run1(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	switch(state_1){
 80012e4:	4b4d      	ldr	r3, [pc, #308]	; (800141c <fsm_automatic_run1+0x13c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	f200 808d 	bhi.w	8001408 <fsm_automatic_run1+0x128>
 80012ee:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <fsm_automatic_run1+0x14>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001305 	.word	0x08001305
 80012f8:	0800131f 	.word	0x0800131f
 80012fc:	080013bb 	.word	0x080013bb
 8001300:	0800136d 	.word	0x0800136d
	case INIT:
		state_1 = AUTO_RED;
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <fsm_automatic_run1+0x13c>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]
		setTimer2(redTime*1000);
 800130a:	4b45      	ldr	r3, [pc, #276]	; (8001420 <fsm_automatic_run1+0x140>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fd0c 	bl	8000d34 <setTimer2>
		break;
 800131c:	e07b      	b.n	8001416 <fsm_automatic_run1+0x136>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001324:	483f      	ldr	r0, [pc, #252]	; (8001424 <fsm_automatic_run1+0x144>)
 8001326:	f001 f820 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2108      	movs	r1, #8
 800132e:	483e      	ldr	r0, [pc, #248]	; (8001428 <fsm_automatic_run1+0x148>)
 8001330:	f001 f81b 	bl	800236a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <fsm_automatic_run1+0x14c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d10b      	bne.n	8001354 <fsm_automatic_run1+0x74>
			state_1 = AUTO_GREEN;
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <fsm_automatic_run1+0x13c>)
 800133e:	2203      	movs	r2, #3
 8001340:	601a      	str	r2, [r3, #0]
			setTimer2(greenTime*1000);
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <fsm_automatic_run1+0x150>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fcf0 	bl	8000d34 <setTimer2>
		}

		if (mode == MODE_2){
 8001354:	4b37      	ldr	r3, [pc, #220]	; (8001434 <fsm_automatic_run1+0x154>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d157      	bne.n	800140c <fsm_automatic_run1+0x12c>
			state_1 = MAN_RED;
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <fsm_automatic_run1+0x13c>)
 800135e:	220b      	movs	r2, #11
 8001360:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8001362:	f242 7010 	movw	r0, #10000	; 0x2710
 8001366:	f7ff fce5 	bl	8000d34 <setTimer2>
		}
		break;
 800136a:	e04f      	b.n	800140c <fsm_automatic_run1+0x12c>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001372:	482c      	ldr	r0, [pc, #176]	; (8001424 <fsm_automatic_run1+0x144>)
 8001374:	f000 fff9 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 8001378:	2201      	movs	r2, #1
 800137a:	2108      	movs	r1, #8
 800137c:	482a      	ldr	r0, [pc, #168]	; (8001428 <fsm_automatic_run1+0x148>)
 800137e:	f000 fff4 	bl	800236a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <fsm_automatic_run1+0x14c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d10b      	bne.n	80013a2 <fsm_automatic_run1+0xc2>
			state_1 = AUTO_AMBER;
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <fsm_automatic_run1+0x13c>)
 800138c:	2202      	movs	r2, #2
 800138e:	601a      	str	r2, [r3, #0]
			setTimer2(amberTime*1000);
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <fsm_automatic_run1+0x158>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fcc9 	bl	8000d34 <setTimer2>
		}

		if (mode == MODE_2){
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <fsm_automatic_run1+0x154>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d132      	bne.n	8001410 <fsm_automatic_run1+0x130>
			state_1 = MAN_RED;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <fsm_automatic_run1+0x13c>)
 80013ac:	220b      	movs	r2, #11
 80013ae:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 80013b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80013b4:	f7ff fcbe 	bl	8000d34 <setTimer2>
		}
		break;
 80013b8:	e02a      	b.n	8001410 <fsm_automatic_run1+0x130>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c0:	4818      	ldr	r0, [pc, #96]	; (8001424 <fsm_automatic_run1+0x144>)
 80013c2:	f000 ffd2 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 80013c6:	2201      	movs	r2, #1
 80013c8:	2108      	movs	r1, #8
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <fsm_automatic_run1+0x148>)
 80013cc:	f000 ffcd 	bl	800236a <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <fsm_automatic_run1+0x14c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10b      	bne.n	80013f0 <fsm_automatic_run1+0x110>
			state_1 = AUTO_RED;
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <fsm_automatic_run1+0x13c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <fsm_automatic_run1+0x140>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fca2 	bl	8000d34 <setTimer2>
		}

		if (mode == MODE_2){
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <fsm_automatic_run1+0x154>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d10d      	bne.n	8001414 <fsm_automatic_run1+0x134>
			state_1 = MAN_RED;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <fsm_automatic_run1+0x13c>)
 80013fa:	220b      	movs	r2, #11
 80013fc:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 80013fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8001402:	f7ff fc97 	bl	8000d34 <setTimer2>
		}
		break;
 8001406:	e005      	b.n	8001414 <fsm_automatic_run1+0x134>
	default:
		break;
 8001408:	bf00      	nop
 800140a:	e004      	b.n	8001416 <fsm_automatic_run1+0x136>
		break;
 800140c:	bf00      	nop
 800140e:	e002      	b.n	8001416 <fsm_automatic_run1+0x136>
		break;
 8001410:	bf00      	nop
 8001412:	e000      	b.n	8001416 <fsm_automatic_run1+0x136>
		break;
 8001414:	bf00      	nop
	}
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000fc 	.word	0x200000fc
 8001420:	20000050 	.word	0x20000050
 8001424:	40010800 	.word	0x40010800
 8001428:	40010c00 	.word	0x40010c00
 800142c:	20000114 	.word	0x20000114
 8001430:	20000058 	.word	0x20000058
 8001434:	20000104 	.word	0x20000104
 8001438:	20000054 	.word	0x20000054

0800143c <fsm_automatic_run2>:

void fsm_automatic_run2(){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	switch(state_2){
 8001440:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <fsm_automatic_run2+0x138>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b03      	cmp	r3, #3
 8001446:	f200 808c 	bhi.w	8001562 <fsm_automatic_run2+0x126>
 800144a:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <fsm_automatic_run2+0x14>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	08001461 	.word	0x08001461
 8001454:	08001517 	.word	0x08001517
 8001458:	080014cb 	.word	0x080014cb
 800145c:	0800147b 	.word	0x0800147b
	case INIT:
		state_2 = AUTO_GREEN;
 8001460:	4b44      	ldr	r3, [pc, #272]	; (8001574 <fsm_automatic_run2+0x138>)
 8001462:	2203      	movs	r2, #3
 8001464:	601a      	str	r2, [r3, #0]
		setTimer3(greenTime*1000);
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <fsm_automatic_run2+0x13c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc7a 	bl	8000d6c <setTimer3>
		break;
 8001478:	e07a      	b.n	8001570 <fsm_automatic_run2+0x134>
	case AUTO_GREEN:
		ledBlink();
 800147a:	f7ff f973 	bl	8000764 <ledBlink>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2120      	movs	r1, #32
 8001482:	483e      	ldr	r0, [pc, #248]	; (800157c <fsm_automatic_run2+0x140>)
 8001484:	f000 ff71 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 8001488:	2201      	movs	r2, #1
 800148a:	2110      	movs	r1, #16
 800148c:	483b      	ldr	r0, [pc, #236]	; (800157c <fsm_automatic_run2+0x140>)
 800148e:	f000 ff6c 	bl	800236a <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <fsm_automatic_run2+0x144>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10b      	bne.n	80014b2 <fsm_automatic_run2+0x76>
			state_2 = AUTO_AMBER;
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <fsm_automatic_run2+0x138>)
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
			setTimer3(amberTime*1000);
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <fsm_automatic_run2+0x148>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fc5d 	bl	8000d6c <setTimer3>
		}

		if (mode == MODE_2){
 80014b2:	4b35      	ldr	r3, [pc, #212]	; (8001588 <fsm_automatic_run2+0x14c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d155      	bne.n	8001566 <fsm_automatic_run2+0x12a>
			state_2 = MAN_GREEN;
 80014ba:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <fsm_automatic_run2+0x138>)
 80014bc:	220d      	movs	r2, #13
 80014be:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 80014c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80014c4:	f7ff fc52 	bl	8000d6c <setTimer3>
		}
		break;
 80014c8:	e04d      	b.n	8001566 <fsm_automatic_run2+0x12a>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2110      	movs	r1, #16
 80014ce:	482b      	ldr	r0, [pc, #172]	; (800157c <fsm_automatic_run2+0x140>)
 80014d0:	f000 ff4b 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2120      	movs	r1, #32
 80014d8:	4828      	ldr	r0, [pc, #160]	; (800157c <fsm_automatic_run2+0x140>)
 80014da:	f000 ff46 	bl	800236a <HAL_GPIO_WritePin>
		if(timer3_flag ==1){
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <fsm_automatic_run2+0x144>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10b      	bne.n	80014fe <fsm_automatic_run2+0xc2>
			state_2 = AUTO_RED;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <fsm_automatic_run2+0x138>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
			setTimer3(redTime*1000);
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <fsm_automatic_run2+0x150>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fc37 	bl	8000d6c <setTimer3>
		}

		if (mode == MODE_2){
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <fsm_automatic_run2+0x14c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d131      	bne.n	800156a <fsm_automatic_run2+0x12e>
			state_2 = MAN_GREEN;
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <fsm_automatic_run2+0x138>)
 8001508:	220d      	movs	r2, #13
 800150a:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 800150c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001510:	f7ff fc2c 	bl	8000d6c <setTimer3>
		}
		break;
 8001514:	e029      	b.n	800156a <fsm_automatic_run2+0x12e>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001516:	2201      	movs	r2, #1
 8001518:	2120      	movs	r1, #32
 800151a:	4818      	ldr	r0, [pc, #96]	; (800157c <fsm_automatic_run2+0x140>)
 800151c:	f000 ff25 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2110      	movs	r1, #16
 8001524:	4815      	ldr	r0, [pc, #84]	; (800157c <fsm_automatic_run2+0x140>)
 8001526:	f000 ff20 	bl	800236a <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <fsm_automatic_run2+0x144>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10b      	bne.n	800154a <fsm_automatic_run2+0x10e>
			state_2 = AUTO_GREEN;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <fsm_automatic_run2+0x138>)
 8001534:	2203      	movs	r2, #3
 8001536:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <fsm_automatic_run2+0x13c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fc11 	bl	8000d6c <setTimer3>
		}

		if (mode == MODE_2){
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <fsm_automatic_run2+0x14c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d10d      	bne.n	800156e <fsm_automatic_run2+0x132>
			state_2 = MAN_GREEN;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <fsm_automatic_run2+0x138>)
 8001554:	220d      	movs	r2, #13
 8001556:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8001558:	f242 7010 	movw	r0, #10000	; 0x2710
 800155c:	f7ff fc06 	bl	8000d6c <setTimer3>
		}
		break;
 8001560:	e005      	b.n	800156e <fsm_automatic_run2+0x132>
	default:
		break;
 8001562:	bf00      	nop
 8001564:	e004      	b.n	8001570 <fsm_automatic_run2+0x134>
		break;
 8001566:	bf00      	nop
 8001568:	e002      	b.n	8001570 <fsm_automatic_run2+0x134>
		break;
 800156a:	bf00      	nop
 800156c:	e000      	b.n	8001570 <fsm_automatic_run2+0x134>
		break;
 800156e:	bf00      	nop
	}
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000100 	.word	0x20000100
 8001578:	20000058 	.word	0x20000058
 800157c:	40010c00 	.word	0x40010c00
 8001580:	2000011c 	.word	0x2000011c
 8001584:	20000054 	.word	0x20000054
 8001588:	20000104 	.word	0x20000104
 800158c:	20000050 	.word	0x20000050

08001590 <fsm_manual_run1>:
 */


#include "traffic_manual.h"

void fsm_manual_run1(){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	switch (state_1){
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <fsm_manual_run1+0x154>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b0d      	cmp	r3, #13
 800159a:	d038      	beq.n	800160e <fsm_manual_run1+0x7e>
 800159c:	2b0d      	cmp	r3, #13
 800159e:	f300 8098 	bgt.w	80016d2 <fsm_manual_run1+0x142>
 80015a2:	2b0b      	cmp	r3, #11
 80015a4:	d002      	beq.n	80015ac <fsm_manual_run1+0x1c>
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d062      	beq.n	8001670 <fsm_manual_run1+0xe0>
			state_1=AUTO_RED;
			setTimer2(redTime*1000);
		}
		break;
	default:
		break;
 80015aa:	e092      	b.n	80016d2 <fsm_manual_run1+0x142>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b2:	484d      	ldr	r0, [pc, #308]	; (80016e8 <fsm_manual_run1+0x158>)
 80015b4:	f000 fed9 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2108      	movs	r1, #8
 80015bc:	484b      	ldr	r0, [pc, #300]	; (80016ec <fsm_manual_run1+0x15c>)
 80015be:	f000 fed4 	bl	800236a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80015c2:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <fsm_manual_run1+0x160>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d10d      	bne.n	80015e6 <fsm_manual_run1+0x56>
			state_1= TUN_GREEN;
 80015ca:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <fsm_manual_run1+0x154>)
 80015cc:	2217      	movs	r2, #23
 80015ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	4844      	ldr	r0, [pc, #272]	; (80016e8 <fsm_manual_run1+0x158>)
 80015d8:	f000 fec7 	bl	800236a <HAL_GPIO_WritePin>
			uartRun();
 80015dc:	f000 fa2a 	bl	8001a34 <uartRun>
			setTimer2(250);
 80015e0:	20fa      	movs	r0, #250	; 0xfa
 80015e2:	f7ff fba7 	bl	8000d34 <setTimer2>
		if (timer2_flag ==1){
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <fsm_manual_run1+0x164>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d173      	bne.n	80016d6 <fsm_manual_run1+0x146>
			mode = MODE_1;
 80015ee:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <fsm_manual_run1+0x160>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 80015f4:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <fsm_manual_run1+0x154>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80015fa:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <fsm_manual_run1+0x168>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fb94 	bl	8000d34 <setTimer2>
		break;
 800160c:	e063      	b.n	80016d6 <fsm_manual_run1+0x146>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001614:	4834      	ldr	r0, [pc, #208]	; (80016e8 <fsm_manual_run1+0x158>)
 8001616:	f000 fea8 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 800161a:	2201      	movs	r2, #1
 800161c:	2108      	movs	r1, #8
 800161e:	4833      	ldr	r0, [pc, #204]	; (80016ec <fsm_manual_run1+0x15c>)
 8001620:	f000 fea3 	bl	800236a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <fsm_manual_run1+0x160>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d10d      	bne.n	8001648 <fsm_manual_run1+0xb8>
			state_1= TUN_GREEN;
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <fsm_manual_run1+0x154>)
 800162e:	2217      	movs	r2, #23
 8001630:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001638:	482b      	ldr	r0, [pc, #172]	; (80016e8 <fsm_manual_run1+0x158>)
 800163a:	f000 fe96 	bl	800236a <HAL_GPIO_WritePin>
			uartRun();
 800163e:	f000 f9f9 	bl	8001a34 <uartRun>
			setTimer2(250);
 8001642:	20fa      	movs	r0, #250	; 0xfa
 8001644:	f7ff fb76 	bl	8000d34 <setTimer2>
		if (timer2_flag ==1){
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <fsm_manual_run1+0x164>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d144      	bne.n	80016da <fsm_manual_run1+0x14a>
			mode = MODE_1;
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <fsm_manual_run1+0x160>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <fsm_manual_run1+0x154>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <fsm_manual_run1+0x168>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fb63 	bl	8000d34 <setTimer2>
		break;
 800166e:	e034      	b.n	80016da <fsm_manual_run1+0x14a>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <fsm_manual_run1+0x158>)
 8001678:	f000 fe77 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 800167c:	2201      	movs	r2, #1
 800167e:	2108      	movs	r1, #8
 8001680:	481a      	ldr	r0, [pc, #104]	; (80016ec <fsm_manual_run1+0x15c>)
 8001682:	f000 fe72 	bl	800236a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <fsm_manual_run1+0x160>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d10d      	bne.n	80016aa <fsm_manual_run1+0x11a>
			state_1= TUN_GREEN;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <fsm_manual_run1+0x154>)
 8001690:	2217      	movs	r2, #23
 8001692:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <fsm_manual_run1+0x158>)
 800169c:	f000 fe65 	bl	800236a <HAL_GPIO_WritePin>
			uartRun();
 80016a0:	f000 f9c8 	bl	8001a34 <uartRun>
			setTimer2(250);
 80016a4:	20fa      	movs	r0, #250	; 0xfa
 80016a6:	f7ff fb45 	bl	8000d34 <setTimer2>
		if (timer2_flag ==1){
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <fsm_manual_run1+0x164>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d115      	bne.n	80016de <fsm_manual_run1+0x14e>
			mode = MODE_1;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <fsm_manual_run1+0x160>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <fsm_manual_run1+0x154>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <fsm_manual_run1+0x168>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fb32 	bl	8000d34 <setTimer2>
		break;
 80016d0:	e005      	b.n	80016de <fsm_manual_run1+0x14e>
		break;
 80016d2:	bf00      	nop
 80016d4:	e004      	b.n	80016e0 <fsm_manual_run1+0x150>
		break;
 80016d6:	bf00      	nop
 80016d8:	e002      	b.n	80016e0 <fsm_manual_run1+0x150>
		break;
 80016da:	bf00      	nop
 80016dc:	e000      	b.n	80016e0 <fsm_manual_run1+0x150>
		break;
 80016de:	bf00      	nop
	}
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000fc 	.word	0x200000fc
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	20000104 	.word	0x20000104
 80016f4:	20000114 	.word	0x20000114
 80016f8:	20000050 	.word	0x20000050

080016fc <fsm_manual_run2>:

void fsm_manual_run2(){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	switch (state_2){
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <fsm_manual_run2+0x13c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b0d      	cmp	r3, #13
 8001706:	d007      	beq.n	8001718 <fsm_manual_run2+0x1c>
 8001708:	2b0d      	cmp	r3, #13
 800170a:	f300 808c 	bgt.w	8001826 <fsm_manual_run2+0x12a>
 800170e:	2b0b      	cmp	r3, #11
 8001710:	d05c      	beq.n	80017cc <fsm_manual_run2+0xd0>
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d02d      	beq.n	8001772 <fsm_manual_run2+0x76>
			state_2=AUTO_GREEN;
			setTimer3(greenTime*1000);
		}
		break;
	default:
		break;
 8001716:	e086      	b.n	8001826 <fsm_manual_run2+0x12a>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2120      	movs	r1, #32
 800171c:	4847      	ldr	r0, [pc, #284]	; (800183c <fsm_manual_run2+0x140>)
 800171e:	f000 fe24 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	4845      	ldr	r0, [pc, #276]	; (800183c <fsm_manual_run2+0x140>)
 8001728:	f000 fe1f 	bl	800236a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 800172c:	4b44      	ldr	r3, [pc, #272]	; (8001840 <fsm_manual_run2+0x144>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d10a      	bne.n	800174a <fsm_manual_run2+0x4e>
			state_2= TUN_GREEN;
 8001734:	4b40      	ldr	r3, [pc, #256]	; (8001838 <fsm_manual_run2+0x13c>)
 8001736:	2217      	movs	r2, #23
 8001738:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2120      	movs	r1, #32
 800173e:	483f      	ldr	r0, [pc, #252]	; (800183c <fsm_manual_run2+0x140>)
 8001740:	f000 fe13 	bl	800236a <HAL_GPIO_WritePin>
			setTimer3(250);
 8001744:	20fa      	movs	r0, #250	; 0xfa
 8001746:	f7ff fb11 	bl	8000d6c <setTimer3>
		if (timer3_flag ==1){
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <fsm_manual_run2+0x148>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d16b      	bne.n	800182a <fsm_manual_run2+0x12e>
			mode = MODE_1;
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <fsm_manual_run2+0x144>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 8001758:	4b37      	ldr	r3, [pc, #220]	; (8001838 <fsm_manual_run2+0x13c>)
 800175a:	2203      	movs	r2, #3
 800175c:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 800175e:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <fsm_manual_run2+0x14c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fafe 	bl	8000d6c <setTimer3>
		break;
 8001770:	e05b      	b.n	800182a <fsm_manual_run2+0x12e>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2110      	movs	r1, #16
 8001776:	4831      	ldr	r0, [pc, #196]	; (800183c <fsm_manual_run2+0x140>)
 8001778:	f000 fdf7 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 800177c:	2201      	movs	r2, #1
 800177e:	2120      	movs	r1, #32
 8001780:	482e      	ldr	r0, [pc, #184]	; (800183c <fsm_manual_run2+0x140>)
 8001782:	f000 fdf2 	bl	800236a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001786:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <fsm_manual_run2+0x144>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d10a      	bne.n	80017a4 <fsm_manual_run2+0xa8>
			state_2= TUN_GREEN;
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <fsm_manual_run2+0x13c>)
 8001790:	2217      	movs	r2, #23
 8001792:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2120      	movs	r1, #32
 8001798:	4828      	ldr	r0, [pc, #160]	; (800183c <fsm_manual_run2+0x140>)
 800179a:	f000 fde6 	bl	800236a <HAL_GPIO_WritePin>
			setTimer3(250);
 800179e:	20fa      	movs	r0, #250	; 0xfa
 80017a0:	f7ff fae4 	bl	8000d6c <setTimer3>
		if (timer3_flag ==1){
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <fsm_manual_run2+0x148>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d140      	bne.n	800182e <fsm_manual_run2+0x132>
			mode = MODE_1;
 80017ac:	4b24      	ldr	r3, [pc, #144]	; (8001840 <fsm_manual_run2+0x144>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <fsm_manual_run2+0x13c>)
 80017b4:	2203      	movs	r2, #3
 80017b6:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <fsm_manual_run2+0x14c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fad1 	bl	8000d6c <setTimer3>
		break;
 80017ca:	e030      	b.n	800182e <fsm_manual_run2+0x132>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2120      	movs	r1, #32
 80017d0:	481a      	ldr	r0, [pc, #104]	; (800183c <fsm_manual_run2+0x140>)
 80017d2:	f000 fdca 	bl	800236a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2110      	movs	r1, #16
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <fsm_manual_run2+0x140>)
 80017dc:	f000 fdc5 	bl	800236a <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <fsm_manual_run2+0x144>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d10a      	bne.n	80017fe <fsm_manual_run2+0x102>
			state_2= TUN_GREEN;
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <fsm_manual_run2+0x13c>)
 80017ea:	2217      	movs	r2, #23
 80017ec:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2120      	movs	r1, #32
 80017f2:	4812      	ldr	r0, [pc, #72]	; (800183c <fsm_manual_run2+0x140>)
 80017f4:	f000 fdb9 	bl	800236a <HAL_GPIO_WritePin>
			setTimer3(250);
 80017f8:	20fa      	movs	r0, #250	; 0xfa
 80017fa:	f7ff fab7 	bl	8000d6c <setTimer3>
		if (timer3_flag ==1){
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <fsm_manual_run2+0x148>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d115      	bne.n	8001832 <fsm_manual_run2+0x136>
			mode = MODE_1;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <fsm_manual_run2+0x144>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <fsm_manual_run2+0x13c>)
 800180e:	2203      	movs	r2, #3
 8001810:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <fsm_manual_run2+0x14c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff faa4 	bl	8000d6c <setTimer3>
		break;
 8001824:	e005      	b.n	8001832 <fsm_manual_run2+0x136>
		break;
 8001826:	bf00      	nop
 8001828:	e004      	b.n	8001834 <fsm_manual_run2+0x138>
		break;
 800182a:	bf00      	nop
 800182c:	e002      	b.n	8001834 <fsm_manual_run2+0x138>
		break;
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <fsm_manual_run2+0x138>
		break;
 8001832:	bf00      	nop
	}
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000100 	.word	0x20000100
 800183c:	40010c00 	.word	0x40010c00
 8001840:	20000104 	.word	0x20000104
 8001844:	2000011c 	.word	0x2000011c
 8001848:	20000058 	.word	0x20000058

0800184c <fsm_tuning_run1>:
 *      Author: duyvt
 */

#include "traffic_tuning.h"

void fsm_tuning_run1(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	switch(state_1){
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <fsm_tuning_run1+0xe0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b17      	cmp	r3, #23
 8001856:	d006      	beq.n	8001866 <fsm_tuning_run1+0x1a>
 8001858:	2b17      	cmp	r3, #23
 800185a:	dc5e      	bgt.n	800191a <fsm_tuning_run1+0xce>
 800185c:	2b15      	cmp	r3, #21
 800185e:	d03f      	beq.n	80018e0 <fsm_tuning_run1+0x94>
 8001860:	2b16      	cmp	r3, #22
 8001862:	d01c      	beq.n	800189e <fsm_tuning_run1+0x52>
			setTimer2(redTime*1000);
		}

		break;
	default:
		break;
 8001864:	e059      	b.n	800191a <fsm_tuning_run1+0xce>
		if (timer2_flag ==1){
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <fsm_tuning_run1+0xe4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <fsm_tuning_run1+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 800186e:	2108      	movs	r1, #8
 8001870:	4830      	ldr	r0, [pc, #192]	; (8001934 <fsm_tuning_run1+0xe8>)
 8001872:	f000 fd92 	bl	800239a <HAL_GPIO_TogglePin>
			setTimer2(250);
 8001876:	20fa      	movs	r0, #250	; 0xfa
 8001878:	f7ff fa5c 	bl	8000d34 <setTimer2>
		if(mode == MODE_1){
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <fsm_tuning_run1+0xec>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d14c      	bne.n	800191e <fsm_tuning_run1+0xd2>
			state_1 = AUTO_RED;
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <fsm_tuning_run1+0xe0>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800188a:	4b2c      	ldr	r3, [pc, #176]	; (800193c <fsm_tuning_run1+0xf0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fa4c 	bl	8000d34 <setTimer2>
		break;
 800189c:	e03f      	b.n	800191e <fsm_tuning_run1+0xd2>
		if (timer2_flag ==1){
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <fsm_tuning_run1+0xe4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10b      	bne.n	80018be <fsm_tuning_run1+0x72>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 80018a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018aa:	4825      	ldr	r0, [pc, #148]	; (8001940 <fsm_tuning_run1+0xf4>)
 80018ac:	f000 fd75 	bl	800239a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 80018b0:	2108      	movs	r1, #8
 80018b2:	4820      	ldr	r0, [pc, #128]	; (8001934 <fsm_tuning_run1+0xe8>)
 80018b4:	f000 fd71 	bl	800239a <HAL_GPIO_TogglePin>
			setTimer2(250);
 80018b8:	20fa      	movs	r0, #250	; 0xfa
 80018ba:	f7ff fa3b 	bl	8000d34 <setTimer2>
		if(mode == MODE_1){
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <fsm_tuning_run1+0xec>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d12d      	bne.n	8001922 <fsm_tuning_run1+0xd6>
			state_1 = AUTO_RED;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <fsm_tuning_run1+0xe0>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <fsm_tuning_run1+0xf0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fa2b 	bl	8000d34 <setTimer2>
		break;
 80018de:	e020      	b.n	8001922 <fsm_tuning_run1+0xd6>
		if (timer2_flag ==1){
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <fsm_tuning_run1+0xe4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <fsm_tuning_run1+0xac>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 80018e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ec:	4814      	ldr	r0, [pc, #80]	; (8001940 <fsm_tuning_run1+0xf4>)
 80018ee:	f000 fd54 	bl	800239a <HAL_GPIO_TogglePin>
			setTimer2(250);
 80018f2:	20fa      	movs	r0, #250	; 0xfa
 80018f4:	f7ff fa1e 	bl	8000d34 <setTimer2>
		if(mode == MODE_1){
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <fsm_tuning_run1+0xec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d112      	bne.n	8001926 <fsm_tuning_run1+0xda>
			state_1 = AUTO_RED;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <fsm_tuning_run1+0xe0>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <fsm_tuning_run1+0xf0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fa0e 	bl	8000d34 <setTimer2>
		break;
 8001918:	e005      	b.n	8001926 <fsm_tuning_run1+0xda>
		break;
 800191a:	bf00      	nop
 800191c:	e004      	b.n	8001928 <fsm_tuning_run1+0xdc>
		break;
 800191e:	bf00      	nop
 8001920:	e002      	b.n	8001928 <fsm_tuning_run1+0xdc>
		break;
 8001922:	bf00      	nop
 8001924:	e000      	b.n	8001928 <fsm_tuning_run1+0xdc>
		break;
 8001926:	bf00      	nop
	}
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200000fc 	.word	0x200000fc
 8001930:	20000114 	.word	0x20000114
 8001934:	40010c00 	.word	0x40010c00
 8001938:	20000104 	.word	0x20000104
 800193c:	20000050 	.word	0x20000050
 8001940:	40010800 	.word	0x40010800

08001944 <fsm_tuning_run2>:

void fsm_tuning_run2(){
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	switch(state_2){
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <fsm_tuning_run2+0xdc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b17      	cmp	r3, #23
 800194e:	d006      	beq.n	800195e <fsm_tuning_run2+0x1a>
 8001950:	2b17      	cmp	r3, #23
 8001952:	dc5c      	bgt.n	8001a0e <fsm_tuning_run2+0xca>
 8001954:	2b15      	cmp	r3, #21
 8001956:	d03e      	beq.n	80019d6 <fsm_tuning_run2+0x92>
 8001958:	2b16      	cmp	r3, #22
 800195a:	d01c      	beq.n	8001996 <fsm_tuning_run2+0x52>
			setTimer3(greenTime*1000);
		}

		break;
	default:
		break;
 800195c:	e057      	b.n	8001a0e <fsm_tuning_run2+0xca>
		if (timer3_flag ==1){
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <fsm_tuning_run2+0xe0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <fsm_tuning_run2+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 8001966:	2110      	movs	r1, #16
 8001968:	482f      	ldr	r0, [pc, #188]	; (8001a28 <fsm_tuning_run2+0xe4>)
 800196a:	f000 fd16 	bl	800239a <HAL_GPIO_TogglePin>
			setTimer3(250);
 800196e:	20fa      	movs	r0, #250	; 0xfa
 8001970:	f7ff f9fc 	bl	8000d6c <setTimer3>
		if(mode == MODE_1){
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <fsm_tuning_run2+0xe8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d14a      	bne.n	8001a12 <fsm_tuning_run2+0xce>
			state_2 = AUTO_GREEN;
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <fsm_tuning_run2+0xdc>)
 800197e:	2203      	movs	r2, #3
 8001980:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <fsm_tuning_run2+0xec>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9ec 	bl	8000d6c <setTimer3>
		break;
 8001994:	e03d      	b.n	8001a12 <fsm_tuning_run2+0xce>
		if (timer3_flag ==1){
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <fsm_tuning_run2+0xe0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10a      	bne.n	80019b4 <fsm_tuning_run2+0x70>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 800199e:	2120      	movs	r1, #32
 80019a0:	4821      	ldr	r0, [pc, #132]	; (8001a28 <fsm_tuning_run2+0xe4>)
 80019a2:	f000 fcfa 	bl	800239a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 80019a6:	2110      	movs	r1, #16
 80019a8:	481f      	ldr	r0, [pc, #124]	; (8001a28 <fsm_tuning_run2+0xe4>)
 80019aa:	f000 fcf6 	bl	800239a <HAL_GPIO_TogglePin>
			setTimer3(250);
 80019ae:	20fa      	movs	r0, #250	; 0xfa
 80019b0:	f7ff f9dc 	bl	8000d6c <setTimer3>
		if(mode == MODE_1){
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <fsm_tuning_run2+0xe8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d12c      	bne.n	8001a16 <fsm_tuning_run2+0xd2>
			state_2 = AUTO_GREEN;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <fsm_tuning_run2+0xdc>)
 80019be:	2203      	movs	r2, #3
 80019c0:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <fsm_tuning_run2+0xec>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9cc 	bl	8000d6c <setTimer3>
		break;
 80019d4:	e01f      	b.n	8001a16 <fsm_tuning_run2+0xd2>
		if (timer3_flag ==1){
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <fsm_tuning_run2+0xe0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d106      	bne.n	80019ec <fsm_tuning_run2+0xa8>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 80019de:	2120      	movs	r1, #32
 80019e0:	4811      	ldr	r0, [pc, #68]	; (8001a28 <fsm_tuning_run2+0xe4>)
 80019e2:	f000 fcda 	bl	800239a <HAL_GPIO_TogglePin>
			setTimer3(250);
 80019e6:	20fa      	movs	r0, #250	; 0xfa
 80019e8:	f7ff f9c0 	bl	8000d6c <setTimer3>
		if(mode == MODE_1){
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <fsm_tuning_run2+0xe8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d112      	bne.n	8001a1a <fsm_tuning_run2+0xd6>
			state_2 = AUTO_GREEN;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <fsm_tuning_run2+0xdc>)
 80019f6:	2203      	movs	r2, #3
 80019f8:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <fsm_tuning_run2+0xec>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f9b0 	bl	8000d6c <setTimer3>
		break;
 8001a0c:	e005      	b.n	8001a1a <fsm_tuning_run2+0xd6>
		break;
 8001a0e:	bf00      	nop
 8001a10:	e004      	b.n	8001a1c <fsm_tuning_run2+0xd8>
		break;
 8001a12:	bf00      	nop
 8001a14:	e002      	b.n	8001a1c <fsm_tuning_run2+0xd8>
		break;
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <fsm_tuning_run2+0xd8>
		break;
 8001a1a:	bf00      	nop
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000100 	.word	0x20000100
 8001a24:	2000011c 	.word	0x2000011c
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	20000104 	.word	0x20000104
 8001a30:	20000058 	.word	0x20000058

08001a34 <uartRun>:
UART_HandleTypeDef huart2;
char str1[10];
char str2[10];
char str3[10];

void uartRun(){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	switch(state_1){
 8001a38:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <uartRun+0x140>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b17      	cmp	r3, #23
 8001a3e:	d016      	beq.n	8001a6e <uartRun+0x3a>
 8001a40:	2b17      	cmp	r3, #23
 8001a42:	dc34      	bgt.n	8001aae <uartRun+0x7a>
 8001a44:	2b15      	cmp	r3, #21
 8001a46:	d002      	beq.n	8001a4e <uartRun+0x1a>
 8001a48:	2b16      	cmp	r3, #22
 8001a4a:	d020      	beq.n	8001a8e <uartRun+0x5a>
		break;
	case TUN_AMBER:
		HAL_UART_Transmit (&huart2, (void*)str2, sprintf (str2 , "!A:%d#", amberTime), 500);
		break;
	default:
		break;
 8001a4c:	e02f      	b.n	8001aae <uartRun+0x7a>
		HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!R:%d#", redTime), 500);
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <uartRun+0x144>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4949      	ldr	r1, [pc, #292]	; (8001b7c <uartRun+0x148>)
 8001a56:	484a      	ldr	r0, [pc, #296]	; (8001b80 <uartRun+0x14c>)
 8001a58:	f002 fd3a 	bl	80044d0 <siprintf>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a64:	4946      	ldr	r1, [pc, #280]	; (8001b80 <uartRun+0x14c>)
 8001a66:	4847      	ldr	r0, [pc, #284]	; (8001b84 <uartRun+0x150>)
 8001a68:	f002 f875 	bl	8003b56 <HAL_UART_Transmit>
		break;
 8001a6c:	e020      	b.n	8001ab0 <uartRun+0x7c>
		HAL_UART_Transmit (&huart2, (void*)str3, sprintf (str3 , "!G:%d#", greenTime), 500);
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <uartRun+0x154>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4945      	ldr	r1, [pc, #276]	; (8001b8c <uartRun+0x158>)
 8001a76:	4846      	ldr	r0, [pc, #280]	; (8001b90 <uartRun+0x15c>)
 8001a78:	f002 fd2a 	bl	80044d0 <siprintf>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a84:	4942      	ldr	r1, [pc, #264]	; (8001b90 <uartRun+0x15c>)
 8001a86:	483f      	ldr	r0, [pc, #252]	; (8001b84 <uartRun+0x150>)
 8001a88:	f002 f865 	bl	8003b56 <HAL_UART_Transmit>
		break;
 8001a8c:	e010      	b.n	8001ab0 <uartRun+0x7c>
		HAL_UART_Transmit (&huart2, (void*)str2, sprintf (str2 , "!A:%d#", amberTime), 500);
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <uartRun+0x160>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	4940      	ldr	r1, [pc, #256]	; (8001b98 <uartRun+0x164>)
 8001a96:	4841      	ldr	r0, [pc, #260]	; (8001b9c <uartRun+0x168>)
 8001a98:	f002 fd1a 	bl	80044d0 <siprintf>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aa4:	493d      	ldr	r1, [pc, #244]	; (8001b9c <uartRun+0x168>)
 8001aa6:	4837      	ldr	r0, [pc, #220]	; (8001b84 <uartRun+0x150>)
 8001aa8:	f002 f855 	bl	8003b56 <HAL_UART_Transmit>
		break;
 8001aac:	e000      	b.n	8001ab0 <uartRun+0x7c>
		break;
 8001aae:	bf00      	nop
	}

	if (mode == MODE_3){
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <uartRun+0x16c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d152      	bne.n	8001b5e <uartRun+0x12a>
		switch(state_1){
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <uartRun+0x140>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b17      	cmp	r3, #23
 8001abe:	d01e      	beq.n	8001afe <uartRun+0xca>
 8001ac0:	2b17      	cmp	r3, #23
 8001ac2:	dc4e      	bgt.n	8001b62 <uartRun+0x12e>
 8001ac4:	2b15      	cmp	r3, #21
 8001ac6:	d002      	beq.n	8001ace <uartRun+0x9a>
 8001ac8:	2b16      	cmp	r3, #22
 8001aca:	d030      	beq.n	8001b2e <uartRun+0xfa>
				HAL_UART_Transmit (&huart2, (void*)str2, sprintf (str2 , "!A:%d#", amberTime), 500);
				setTimer7(500);
			}
			break;
		default:
			break;
 8001acc:	e049      	b.n	8001b62 <uartRun+0x12e>
			if (timer7_flag ==1){
 8001ace:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <uartRun+0x170>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d147      	bne.n	8001b66 <uartRun+0x132>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!R:%d#", redTime), 500);
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <uartRun+0x144>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4927      	ldr	r1, [pc, #156]	; (8001b7c <uartRun+0x148>)
 8001ade:	4828      	ldr	r0, [pc, #160]	; (8001b80 <uartRun+0x14c>)
 8001ae0:	f002 fcf6 	bl	80044d0 <siprintf>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aec:	4924      	ldr	r1, [pc, #144]	; (8001b80 <uartRun+0x14c>)
 8001aee:	4825      	ldr	r0, [pc, #148]	; (8001b84 <uartRun+0x150>)
 8001af0:	f002 f831 	bl	8003b56 <HAL_UART_Transmit>
				setTimer7(500);
 8001af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af8:	f7ff f9a8 	bl	8000e4c <setTimer7>
			break;
 8001afc:	e033      	b.n	8001b66 <uartRun+0x132>
			if (timer7_flag ==1){
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <uartRun+0x170>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d131      	bne.n	8001b6a <uartRun+0x136>
				HAL_UART_Transmit (&huart2, (void*)str3, sprintf (str3 , "!G:%d#", greenTime), 500);
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <uartRun+0x154>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	491f      	ldr	r1, [pc, #124]	; (8001b8c <uartRun+0x158>)
 8001b0e:	4820      	ldr	r0, [pc, #128]	; (8001b90 <uartRun+0x15c>)
 8001b10:	f002 fcde 	bl	80044d0 <siprintf>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b1c:	491c      	ldr	r1, [pc, #112]	; (8001b90 <uartRun+0x15c>)
 8001b1e:	4819      	ldr	r0, [pc, #100]	; (8001b84 <uartRun+0x150>)
 8001b20:	f002 f819 	bl	8003b56 <HAL_UART_Transmit>
				setTimer7(500);
 8001b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b28:	f7ff f990 	bl	8000e4c <setTimer7>
			break;
 8001b2c:	e01d      	b.n	8001b6a <uartRun+0x136>
			if (timer7_flag ==1){
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <uartRun+0x170>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d11b      	bne.n	8001b6e <uartRun+0x13a>
				HAL_UART_Transmit (&huart2, (void*)str2, sprintf (str2 , "!A:%d#", amberTime), 500);
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <uartRun+0x160>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <uartRun+0x164>)
 8001b3e:	4817      	ldr	r0, [pc, #92]	; (8001b9c <uartRun+0x168>)
 8001b40:	f002 fcc6 	bl	80044d0 <siprintf>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b4c:	4913      	ldr	r1, [pc, #76]	; (8001b9c <uartRun+0x168>)
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <uartRun+0x150>)
 8001b50:	f002 f801 	bl	8003b56 <HAL_UART_Transmit>
				setTimer7(500);
 8001b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b58:	f7ff f978 	bl	8000e4c <setTimer7>
			break;
 8001b5c:	e007      	b.n	8001b6e <uartRun+0x13a>
		}
	}
 8001b5e:	bf00      	nop
 8001b60:	e006      	b.n	8001b70 <uartRun+0x13c>
			break;
 8001b62:	bf00      	nop
 8001b64:	e004      	b.n	8001b70 <uartRun+0x13c>
			break;
 8001b66:	bf00      	nop
 8001b68:	e002      	b.n	8001b70 <uartRun+0x13c>
			break;
 8001b6a:	bf00      	nop
 8001b6c:	e000      	b.n	8001b70 <uartRun+0x13c>
			break;
 8001b6e:	bf00      	nop
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200000fc 	.word	0x200000fc
 8001b78:	20000050 	.word	0x20000050
 8001b7c:	08004d5c 	.word	0x08004d5c
 8001b80:	200001ec 	.word	0x200001ec
 8001b84:	200001f8 	.word	0x200001f8
 8001b88:	20000058 	.word	0x20000058
 8001b8c:	08004d64 	.word	0x08004d64
 8001b90:	200001e0 	.word	0x200001e0
 8001b94:	20000054 	.word	0x20000054
 8001b98:	08004d6c 	.word	0x08004d6c
 8001b9c:	2000023c 	.word	0x2000023c
 8001ba0:	20000104 	.word	0x20000104
 8001ba4:	2000013c 	.word	0x2000013c

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bce:	f7ff fb81 	bl	80012d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f002 fc51 	bl	8004478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7fe fdd9 	bl	800078c <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001be4:	08004dd8 	.word	0x08004dd8
  ldr r2, =_sbss
 8001be8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001bec:	2000025c 	.word	0x2000025c

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f923 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fa00 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f93b 	bl	8001eba <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f903 	bl	8001e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000005c 	.word	0x2000005c
 8001c78:	20000064 	.word	0x20000064
 8001c7c:	20000060 	.word	0x20000060

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000064 	.word	0x20000064
 8001ca0:	20000248 	.word	0x20000248

08001ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	; (8001cb4 <HAL_GetTick+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000248 	.word	0x20000248

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4906      	ldr	r1, [pc, #24]	; (8001d50 <__NVIC_EnableIRQ+0x34>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	; (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
         );
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ff90 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff2d 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff42 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff90 	bl	8001da8 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5f 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff35 	bl	8001d1c <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa2 	bl	8001e0c <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d008      	beq.n	8001efa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2204      	movs	r2, #4
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e020      	b.n	8001f3c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 020e 	bic.w	r2, r2, #14
 8001f08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d005      	beq.n	8001f6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2204      	movs	r2, #4
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e051      	b.n	800200e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 020e 	bic.w	r2, r2, #14
 8001f78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a22      	ldr	r2, [pc, #136]	; (8002018 <HAL_DMA_Abort_IT+0xd0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d029      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0xa0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_DMA_Abort_IT+0xd4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d022      	beq.n	8001fe4 <HAL_DMA_Abort_IT+0x9c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <HAL_DMA_Abort_IT+0xd8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d01a      	beq.n	8001fde <HAL_DMA_Abort_IT+0x96>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_DMA_Abort_IT+0xdc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d012      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x90>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_DMA_Abort_IT+0xe0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00a      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0x8a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_DMA_Abort_IT+0xe4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d102      	bne.n	8001fcc <HAL_DMA_Abort_IT+0x84>
 8001fc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fca:	e00e      	b.n	8001fea <HAL_DMA_Abort_IT+0xa2>
 8001fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd0:	e00b      	b.n	8001fea <HAL_DMA_Abort_IT+0xa2>
 8001fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd6:	e008      	b.n	8001fea <HAL_DMA_Abort_IT+0xa2>
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	e005      	b.n	8001fea <HAL_DMA_Abort_IT+0xa2>
 8001fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe2:	e002      	b.n	8001fea <HAL_DMA_Abort_IT+0xa2>
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	e000      	b.n	8001fea <HAL_DMA_Abort_IT+0xa2>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_DMA_Abort_IT+0xe8>)
 8001fec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
    } 
  }
  return status;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40020008 	.word	0x40020008
 800201c:	4002001c 	.word	0x4002001c
 8002020:	40020030 	.word	0x40020030
 8002024:	40020044 	.word	0x40020044
 8002028:	40020058 	.word	0x40020058
 800202c:	4002006c 	.word	0x4002006c
 8002030:	40020000 	.word	0x40020000

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b08b      	sub	sp, #44	; 0x2c
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002046:	e169      	b.n	800231c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002048:	2201      	movs	r2, #1
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8158 	bne.w	8002316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a9a      	ldr	r2, [pc, #616]	; (80022d4 <HAL_GPIO_Init+0x2a0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d05e      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002070:	4a98      	ldr	r2, [pc, #608]	; (80022d4 <HAL_GPIO_Init+0x2a0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d875      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 8002076:	4a98      	ldr	r2, [pc, #608]	; (80022d8 <HAL_GPIO_Init+0x2a4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d058      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 800207c:	4a96      	ldr	r2, [pc, #600]	; (80022d8 <HAL_GPIO_Init+0x2a4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d86f      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 8002082:	4a96      	ldr	r2, [pc, #600]	; (80022dc <HAL_GPIO_Init+0x2a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d052      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002088:	4a94      	ldr	r2, [pc, #592]	; (80022dc <HAL_GPIO_Init+0x2a8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d869      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 800208e:	4a94      	ldr	r2, [pc, #592]	; (80022e0 <HAL_GPIO_Init+0x2ac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d04c      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002094:	4a92      	ldr	r2, [pc, #584]	; (80022e0 <HAL_GPIO_Init+0x2ac>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d863      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 800209a:	4a92      	ldr	r2, [pc, #584]	; (80022e4 <HAL_GPIO_Init+0x2b0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d046      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 80020a0:	4a90      	ldr	r2, [pc, #576]	; (80022e4 <HAL_GPIO_Init+0x2b0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d85d      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d82a      	bhi.n	8002100 <HAL_GPIO_Init+0xcc>
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d859      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 80020ae:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <HAL_GPIO_Init+0x80>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	0800212f 	.word	0x0800212f
 80020b8:	08002109 	.word	0x08002109
 80020bc:	0800211b 	.word	0x0800211b
 80020c0:	0800215d 	.word	0x0800215d
 80020c4:	08002163 	.word	0x08002163
 80020c8:	08002163 	.word	0x08002163
 80020cc:	08002163 	.word	0x08002163
 80020d0:	08002163 	.word	0x08002163
 80020d4:	08002163 	.word	0x08002163
 80020d8:	08002163 	.word	0x08002163
 80020dc:	08002163 	.word	0x08002163
 80020e0:	08002163 	.word	0x08002163
 80020e4:	08002163 	.word	0x08002163
 80020e8:	08002163 	.word	0x08002163
 80020ec:	08002163 	.word	0x08002163
 80020f0:	08002163 	.word	0x08002163
 80020f4:	08002163 	.word	0x08002163
 80020f8:	08002111 	.word	0x08002111
 80020fc:	08002125 	.word	0x08002125
 8002100:	4a79      	ldr	r2, [pc, #484]	; (80022e8 <HAL_GPIO_Init+0x2b4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002106:	e02c      	b.n	8002162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e029      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	3304      	adds	r3, #4
 8002116:	623b      	str	r3, [r7, #32]
          break;
 8002118:	e024      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	3308      	adds	r3, #8
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e01f      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	330c      	adds	r3, #12
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e01a      	b.n	8002164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002136:	2304      	movs	r3, #4
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e013      	b.n	8002164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002144:	2308      	movs	r3, #8
 8002146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	611a      	str	r2, [r3, #16]
          break;
 800214e:	e009      	b.n	8002164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002150:	2308      	movs	r3, #8
 8002152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	615a      	str	r2, [r3, #20]
          break;
 800215a:	e003      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x130>
          break;
 8002162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2bff      	cmp	r3, #255	; 0xff
 8002168:	d801      	bhi.n	800216e <HAL_GPIO_Init+0x13a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	e001      	b.n	8002172 <HAL_GPIO_Init+0x13e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	; 0xff
 8002178:	d802      	bhi.n	8002180 <HAL_GPIO_Init+0x14c>
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x152>
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	3b08      	subs	r3, #8
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	210f      	movs	r1, #15
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	431a      	orrs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80b1 	beq.w	8002316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b4:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_GPIO_Init+0x2b8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a4c      	ldr	r2, [pc, #304]	; (80022ec <HAL_GPIO_Init+0x2b8>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_GPIO_Init+0x2b8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <HAL_GPIO_Init+0x2bc>)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a40      	ldr	r2, [pc, #256]	; (80022f4 <HAL_GPIO_Init+0x2c0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_GPIO_Init+0x1ec>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <HAL_GPIO_Init+0x2c4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00d      	beq.n	800221c <HAL_GPIO_Init+0x1e8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3e      	ldr	r2, [pc, #248]	; (80022fc <HAL_GPIO_Init+0x2c8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1e4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3d      	ldr	r2, [pc, #244]	; (8002300 <HAL_GPIO_Init+0x2cc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_Init+0x1e0>
 8002210:	2303      	movs	r3, #3
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002214:	2304      	movs	r3, #4
 8002216:	e004      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002218:	2302      	movs	r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002220:	2300      	movs	r3, #0
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	4093      	lsls	r3, r2
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002232:	492f      	ldr	r1, [pc, #188]	; (80022f0 <HAL_GPIO_Init+0x2bc>)
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	492c      	ldr	r1, [pc, #176]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4928      	ldr	r1, [pc, #160]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 8002264:	4013      	ands	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4922      	ldr	r1, [pc, #136]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	43db      	mvns	r3, r3
 800228a:	491e      	ldr	r1, [pc, #120]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800228c:	4013      	ands	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	4918      	ldr	r1, [pc, #96]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4914      	ldr	r1, [pc, #80]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d021      	beq.n	8002308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60cb      	str	r3, [r1, #12]
 80022d0:	e021      	b.n	8002316 <HAL_GPIO_Init+0x2e2>
 80022d2:	bf00      	nop
 80022d4:	10320000 	.word	0x10320000
 80022d8:	10310000 	.word	0x10310000
 80022dc:	10220000 	.word	0x10220000
 80022e0:	10210000 	.word	0x10210000
 80022e4:	10120000 	.word	0x10120000
 80022e8:	10110000 	.word	0x10110000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40010800 	.word	0x40010800
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	40011000 	.word	0x40011000
 8002300:	40011400 	.word	0x40011400
 8002304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_GPIO_Init+0x304>)
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	43db      	mvns	r3, r3
 8002310:	4909      	ldr	r1, [pc, #36]	; (8002338 <HAL_GPIO_Init+0x304>)
 8002312:	4013      	ands	r3, r2
 8002314:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	3301      	adds	r3, #1
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	f47f ae8e 	bne.w	8002048 <HAL_GPIO_Init+0x14>
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	372c      	adds	r7, #44	; 0x2c
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e001      	b.n	800235e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	807b      	strh	r3, [r7, #2]
 8002376:	4613      	mov	r3, r2
 8002378:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237a:	787b      	ldrb	r3, [r7, #1]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002380:	887a      	ldrh	r2, [r7, #2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002386:	e003      	b.n	8002390 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	041a      	lsls	r2, r3, #16
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	611a      	str	r2, [r3, #16]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ac:	887a      	ldrh	r2, [r7, #2]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	041a      	lsls	r2, r3, #16
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	400b      	ands	r3, r1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e26c      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8087 	beq.w	80024fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ec:	4b92      	ldr	r3, [pc, #584]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d00c      	beq.n	8002412 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f8:	4b8f      	ldr	r3, [pc, #572]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d112      	bne.n	800242a <HAL_RCC_OscConfig+0x5e>
 8002404:	4b8c      	ldr	r3, [pc, #560]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b89      	ldr	r3, [pc, #548]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d06c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x12c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d168      	bne.n	80024f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e246      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x76>
 8002434:	4b80      	ldr	r3, [pc, #512]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a7f      	ldr	r2, [pc, #508]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e02e      	b.n	80024a0 <HAL_RCC_OscConfig+0xd4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x98>
 800244a:	4b7b      	ldr	r3, [pc, #492]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7a      	ldr	r2, [pc, #488]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b78      	ldr	r3, [pc, #480]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a77      	ldr	r2, [pc, #476]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xd4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0xbc>
 800246e:	4b72      	ldr	r3, [pc, #456]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a71      	ldr	r2, [pc, #452]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6e      	ldr	r2, [pc, #440]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xd4>
 8002488:	4b6b      	ldr	r3, [pc, #428]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b68      	ldr	r3, [pc, #416]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a67      	ldr	r2, [pc, #412]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7ff fbfc 	bl	8001ca4 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff fbf8 	bl	8001ca4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1fa      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe4>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff fbe8 	bl	8001ca4 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff fbe4 	bl	8001ca4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1e6      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	4b53      	ldr	r3, [pc, #332]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x10c>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d063      	beq.n	80025ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002506:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002512:	4b49      	ldr	r3, [pc, #292]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x18c>
 800251e:	4b46      	ldr	r3, [pc, #280]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x176>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1ba      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4939      	ldr	r1, [pc, #228]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e03a      	b.n	80025ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7ff fb9d 	bl	8001ca4 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff fb99 	bl	8001ca4 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e19b      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4927      	ldr	r1, [pc, #156]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fb7c 	bl	8001ca4 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7ff fb78 	bl	8001ca4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e17a      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d03a      	beq.n	8002650 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d019      	beq.n	8002616 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e8:	f7ff fb5c 	bl	8001ca4 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f0:	f7ff fb58 	bl	8001ca4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e15a      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800260e:	2001      	movs	r0, #1
 8002610:	f000 fad8 	bl	8002bc4 <RCC_Delay>
 8002614:	e01c      	b.n	8002650 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7ff fb42 	bl	8001ca4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002622:	e00f      	b.n	8002644 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7ff fb3e 	bl	8001ca4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d908      	bls.n	8002644 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e140      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	42420000 	.word	0x42420000
 8002640:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b9e      	ldr	r3, [pc, #632]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e9      	bne.n	8002624 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80a6 	beq.w	80027aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b97      	ldr	r3, [pc, #604]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	4b94      	ldr	r3, [pc, #592]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a93      	ldr	r2, [pc, #588]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	61d3      	str	r3, [r2, #28]
 800267a:	4b91      	ldr	r3, [pc, #580]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	4b8e      	ldr	r3, [pc, #568]	; (80028c4 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_RCC_OscConfig+0x4f8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a8a      	ldr	r2, [pc, #552]	; (80028c4 <HAL_RCC_OscConfig+0x4f8>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a2:	f7ff faff 	bl	8001ca4 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7ff fafb 	bl	8001ca4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b64      	cmp	r3, #100	; 0x64
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e0fd      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCC_OscConfig+0x4f8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x312>
 80026d0:	4b7b      	ldr	r3, [pc, #492]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4a7a      	ldr	r2, [pc, #488]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6213      	str	r3, [r2, #32]
 80026dc:	e02d      	b.n	800273a <HAL_RCC_OscConfig+0x36e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x334>
 80026e6:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a75      	ldr	r2, [pc, #468]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	4b73      	ldr	r3, [pc, #460]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a72      	ldr	r2, [pc, #456]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	e01c      	b.n	800273a <HAL_RCC_OscConfig+0x36e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d10c      	bne.n	8002722 <HAL_RCC_OscConfig+0x356>
 8002708:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4a6c      	ldr	r2, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6213      	str	r3, [r2, #32]
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a69      	ldr	r2, [pc, #420]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	e00b      	b.n	800273a <HAL_RCC_OscConfig+0x36e>
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a66      	ldr	r2, [pc, #408]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6213      	str	r3, [r2, #32]
 800272e:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4a63      	ldr	r2, [pc, #396]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d015      	beq.n	800276e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7ff faaf 	bl	8001ca4 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7ff faab 	bl	8001ca4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0ab      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ee      	beq.n	800274a <HAL_RCC_OscConfig+0x37e>
 800276c:	e014      	b.n	8002798 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7ff fa99 	bl	8001ca4 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7ff fa95 	bl	8001ca4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e095      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ee      	bne.n	8002776 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279e:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4a47      	ldr	r2, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8081 	beq.w	80028b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b4:	4b42      	ldr	r3, [pc, #264]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d061      	beq.n	8002884 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d146      	bne.n	8002856 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c8:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_OscConfig+0x4fc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7ff fa69 	bl	8001ca4 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7ff fa65 	bl	8001ca4 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e067      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e8:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fc:	d108      	bne.n	8002810 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	492d      	ldr	r1, [pc, #180]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a19      	ldr	r1, [r3, #32]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	430b      	orrs	r3, r1
 8002822:	4927      	ldr	r1, [pc, #156]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x4fc>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7ff fa39 	bl	8001ca4 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002836:	f7ff fa35 	bl	8001ca4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e037      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x46a>
 8002854:	e02f      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <HAL_RCC_OscConfig+0x4fc>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff fa22 	bl	8001ca4 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff fa1e 	bl	8001ca4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e020      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x498>
 8002882:	e018      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e013      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x4f4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42420060 	.word	0x42420060

080028cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d0      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d910      	bls.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4965      	ldr	r1, [pc, #404]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800294a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d040      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d115      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e073      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06b      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4936      	ldr	r1, [pc, #216]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7ff f972 	bl	8001ca4 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7ff f96e 	bl	8001ca4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e053      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d210      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4922      	ldr	r1, [pc, #136]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1cc>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f8d0 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	08004d84 	.word	0x08004d84
 8002a98:	2000005c 	.word	0x2000005c
 8002a9c:	20000060 	.word	0x20000060

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b490      	push	{r4, r7}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002aa8:	1d3c      	adds	r4, r7, #4
 8002aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ab0:	f240 2301 	movw	r3, #513	; 0x201
 8002ab4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x46>
 8002ade:	e02d      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae2:	623b      	str	r3, [r7, #32]
      break;
 8002ae4:	e02d      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	0c9b      	lsrs	r3, r3, #18
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002af2:	4413      	add	r3, r2
 8002af4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002af8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	0c5b      	lsrs	r3, r3, #17
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b12:	4413      	add	r3, r2
 8002b14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1e:	fb02 f203 	mul.w	r2, r2, r3
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2a:	e004      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	623b      	str	r3, [r7, #32]
      break;
 8002b3a:	e002      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3e:	623b      	str	r3, [r7, #32]
      break;
 8002b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b42:	6a3b      	ldr	r3, [r7, #32]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc90      	pop	{r4, r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	08004d74 	.word	0x08004d74
 8002b54:	40021000 	.word	0x40021000
 8002b58:	007a1200 	.word	0x007a1200
 8002b5c:	003d0900 	.word	0x003d0900

08002b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b02      	ldr	r3, [pc, #8]	; (8002b70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	2000005c 	.word	0x2000005c

08002b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b78:	f7ff fff2 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	08004d94 	.word	0x08004d94

08002b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba0:	f7ff ffde 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	0adb      	lsrs	r3, r3, #11
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08004d94 	.word	0x08004d94

08002bc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <RCC_Delay+0x34>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <RCC_Delay+0x38>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0a5b      	lsrs	r3, r3, #9
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
 8002bde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002be0:	bf00      	nop
  }
  while (Delay --);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1e5a      	subs	r2, r3, #1
 8002be6:	60fa      	str	r2, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f9      	bne.n	8002be0 <RCC_Delay+0x1c>
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	2000005c 	.word	0x2000005c
 8002bfc:	10624dd3 	.word	0x10624dd3

08002c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e041      	b.n	8002c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fa26 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 fc28 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d001      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e03a      	b.n	8002d2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_TIM_Base_Start_IT+0x98>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x58>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d009      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x58>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <HAL_TIM_Base_Start_IT+0x9c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x58>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d111      	bne.n	8002d1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d010      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1a:	e007      	b.n	8002d2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800

08002d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e041      	b.n	8002dda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f839 	bl	8002de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f000 fb86 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_TIM_PWM_Start+0x24>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e022      	b.n	8002e5e <HAL_TIM_PWM_Start+0x6a>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d109      	bne.n	8002e32 <HAL_TIM_PWM_Start+0x3e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e015      	b.n	8002e5e <HAL_TIM_PWM_Start+0x6a>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d109      	bne.n	8002e4c <HAL_TIM_PWM_Start+0x58>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e008      	b.n	8002e5e <HAL_TIM_PWM_Start+0x6a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e05e      	b.n	8002f24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x82>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e74:	e013      	b.n	8002e9e <HAL_TIM_PWM_Start+0xaa>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_PWM_Start+0x92>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e84:	e00b      	b.n	8002e9e <HAL_TIM_PWM_Start+0xaa>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_PWM_Start+0xa2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e94:	e003      	b.n	8002e9e <HAL_TIM_PWM_Start+0xaa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	6839      	ldr	r1, [r7, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fd74 	bl	8003994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <HAL_TIM_PWM_Start+0x138>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_TIM_PWM_Start+0x138>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00e      	beq.n	8002eee <HAL_TIM_PWM_Start+0xfa>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d009      	beq.n	8002eee <HAL_TIM_PWM_Start+0xfa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <HAL_TIM_PWM_Start+0x13c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d004      	beq.n	8002eee <HAL_TIM_PWM_Start+0xfa>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <HAL_TIM_PWM_Start+0x140>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d111      	bne.n	8002f12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d010      	beq.n	8002f22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f10:	e007      	b.n	8002f22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40012c00 	.word	0x40012c00
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800

08002f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d122      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d11b      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0202 	mvn.w	r2, #2
 8002f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa6f 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa62 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fa71 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0204 	mvn.w	r2, #4
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa45 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fa38 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fa47 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b08      	cmp	r3, #8
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0208 	mvn.w	r2, #8
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa1b 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa0e 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa1d 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b10      	cmp	r3, #16
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0210 	mvn.w	r2, #16
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2208      	movs	r2, #8
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f9f1 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9e4 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f9f3 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0201 	mvn.w	r2, #1
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fd34 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fce1 	bl	8003aaa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d10e      	bne.n	8003114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d107      	bne.n	8003114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9b7 	bl	8003482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b20      	cmp	r3, #32
 8003120:	d10e      	bne.n	8003140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b20      	cmp	r3, #32
 800312e:	d107      	bne.n	8003140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0220 	mvn.w	r2, #32
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fcac 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800315e:	2302      	movs	r3, #2
 8003160:	e0ac      	b.n	80032bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	f200 809f 	bhi.w	80032b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	080031ad 	.word	0x080031ad
 800317c:	080032b1 	.word	0x080032b1
 8003180:	080032b1 	.word	0x080032b1
 8003184:	080032b1 	.word	0x080032b1
 8003188:	080031ed 	.word	0x080031ed
 800318c:	080032b1 	.word	0x080032b1
 8003190:	080032b1 	.word	0x080032b1
 8003194:	080032b1 	.word	0x080032b1
 8003198:	0800322f 	.word	0x0800322f
 800319c:	080032b1 	.word	0x080032b1
 80031a0:	080032b1 	.word	0x080032b1
 80031a4:	080032b1 	.word	0x080032b1
 80031a8:	0800326f 	.word	0x0800326f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f9d0 	bl	8003558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0208 	orr.w	r2, r2, #8
 80031c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0204 	bic.w	r2, r2, #4
 80031d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6999      	ldr	r1, [r3, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	619a      	str	r2, [r3, #24]
      break;
 80031ea:	e062      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fa16 	bl	8003624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6999      	ldr	r1, [r3, #24]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	021a      	lsls	r2, r3, #8
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	619a      	str	r2, [r3, #24]
      break;
 800322c:	e041      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fa5f 	bl	80036f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0208 	orr.w	r2, r2, #8
 8003248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0204 	bic.w	r2, r2, #4
 8003258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69d9      	ldr	r1, [r3, #28]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	61da      	str	r2, [r3, #28]
      break;
 800326c:	e021      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 faa9 	bl	80037cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69d9      	ldr	r1, [r3, #28]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	021a      	lsls	r2, r3, #8
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	61da      	str	r2, [r3, #28]
      break;
 80032ae:	e000      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_TIM_ConfigClockSource+0x18>
 80032d8:	2302      	movs	r3, #2
 80032da:	e0b3      	b.n	8003444 <HAL_TIM_ConfigClockSource+0x180>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003302:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003314:	d03e      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0xd0>
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	f200 8087 	bhi.w	800342c <HAL_TIM_ConfigClockSource+0x168>
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003322:	f000 8085 	beq.w	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d87f      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x168>
 800332c:	2b70      	cmp	r3, #112	; 0x70
 800332e:	d01a      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xa2>
 8003330:	2b70      	cmp	r3, #112	; 0x70
 8003332:	d87b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x168>
 8003334:	2b60      	cmp	r3, #96	; 0x60
 8003336:	d050      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x116>
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d877      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x168>
 800333c:	2b50      	cmp	r3, #80	; 0x50
 800333e:	d03c      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0xf6>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d873      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x168>
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d058      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x136>
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d86f      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x168>
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d064      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x156>
 8003350:	2b30      	cmp	r3, #48	; 0x30
 8003352:	d86b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x168>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d060      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x156>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d867      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x168>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05c      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x156>
 8003360:	2b10      	cmp	r3, #16
 8003362:	d05a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003364:	e062      	b.n	800342c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f000 faee 	bl	8003956 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003388:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	609a      	str	r2, [r3, #8]
      break;
 8003392:	e04e      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f000 fad7 	bl	8003956 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b6:	609a      	str	r2, [r3, #8]
      break;
 80033b8:	e03b      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 fa4e 	bl	8003868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2150      	movs	r1, #80	; 0x50
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 faa5 	bl	8003922 <TIM_ITRx_SetConfig>
      break;
 80033d8:	e02b      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 fa6c 	bl	80038c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2160      	movs	r1, #96	; 0x60
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fa95 	bl	8003922 <TIM_ITRx_SetConfig>
      break;
 80033f8:	e01b      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	461a      	mov	r2, r3
 8003408:	f000 fa2e 	bl	8003868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fa85 	bl	8003922 <TIM_ITRx_SetConfig>
      break;
 8003418:	e00b      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f000 fa7c 	bl	8003922 <TIM_ITRx_SetConfig>
        break;
 800342a:	e002      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800342c:	bf00      	nop
 800342e:	e000      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003430:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <TIM_Base_SetConfig+0xb8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00b      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d007      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a26      	ldr	r2, [pc, #152]	; (8003550 <TIM_Base_SetConfig+0xbc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a25      	ldr	r2, [pc, #148]	; (8003554 <TIM_Base_SetConfig+0xc0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d108      	bne.n	80034d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <TIM_Base_SetConfig+0xb8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d007      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <TIM_Base_SetConfig+0xbc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a18      	ldr	r2, [pc, #96]	; (8003554 <TIM_Base_SetConfig+0xc0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d108      	bne.n	8003508 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a07      	ldr	r2, [pc, #28]	; (800354c <TIM_Base_SetConfig+0xb8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	615a      	str	r2, [r3, #20]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 0302 	bic.w	r3, r3, #2
 80035a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <TIM_OC1_SetConfig+0xc8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10c      	bne.n	80035ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0308 	bic.w	r3, r3, #8
 80035ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f023 0304 	bic.w	r3, r3, #4
 80035cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <TIM_OC1_SetConfig+0xc8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d111      	bne.n	80035fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40012c00 	.word	0x40012c00

08003624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f023 0210 	bic.w	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0320 	bic.w	r3, r3, #32
 800366e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <TIM_OC2_SetConfig+0xd0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10d      	bne.n	80036a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <TIM_OC2_SetConfig+0xd0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d113      	bne.n	80036d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	40012c00 	.word	0x40012c00

080036f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <TIM_OC3_SetConfig+0xd0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10d      	bne.n	8003772 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800375c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <TIM_OC3_SetConfig+0xd0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d113      	bne.n	80037a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	621a      	str	r2, [r3, #32]
}
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40012c00 	.word	0x40012c00

080037cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	031b      	lsls	r3, r3, #12
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <TIM_OC4_SetConfig+0x98>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d109      	bne.n	8003840 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	40012c00 	.word	0x40012c00

08003868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f023 030a 	bic.w	r3, r3, #10
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f023 0210 	bic.w	r2, r3, #16
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	031b      	lsls	r3, r3, #12
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003900:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	f043 0307 	orr.w	r3, r3, #7
 8003944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	609a      	str	r2, [r3, #8]
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003956:	b480      	push	{r7}
 8003958:	b087      	sub	sp, #28
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003970:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	021a      	lsls	r2, r3, #8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	431a      	orrs	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4313      	orrs	r3, r2
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	609a      	str	r2, [r3, #8]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	2201      	movs	r2, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	401a      	ands	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e046      	b.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d009      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e03f      	b.n	8003b4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fd fb32 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fc25 	bl	8004350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b08a      	sub	sp, #40	; 0x28
 8003b5a:	af02      	add	r7, sp, #8
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d17c      	bne.n	8003c70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_UART_Transmit+0x2c>
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e075      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_UART_Transmit+0x3e>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e06e      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2221      	movs	r2, #33	; 0x21
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003baa:	f7fe f87b 	bl	8001ca4 <HAL_GetTick>
 8003bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc4:	d108      	bne.n	8003bd8 <HAL_UART_Transmit+0x82>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e003      	b.n	8003be0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003be8:	e02a      	b.n	8003c40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fa11 	bl	800401c <UART_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e036      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	e007      	b.n	8003c32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1cf      	bne.n	8003bea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f9e1 	bl	800401c <UART_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e006      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e000      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_UART_IRQHandler+0x52>
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa99 	bl	80041fe <UART_Receive_IT>
      return;
 8003ccc:	e17b      	b.n	8003fc6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80b1 	beq.w	8003e38 <HAL_UART_IRQHandler+0x1bc>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <HAL_UART_IRQHandler+0x70>
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80a6 	beq.w	8003e38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_UART_IRQHandler+0x90>
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_UART_IRQHandler+0xb0>
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f043 0202 	orr.w	r2, r3, #2
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_UART_IRQHandler+0xd0>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0204 	orr.w	r2, r3, #4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00f      	beq.n	8003d76 <HAL_UART_IRQHandler+0xfa>
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_UART_IRQHandler+0xee>
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f043 0208 	orr.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 811e 	beq.w	8003fbc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_UART_IRQHandler+0x11e>
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fa32 	bl	80041fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x146>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d031      	beq.n	8003e26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f974 	bl	80040b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d023      	beq.n	8003e1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d013      	beq.n	8003e16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	4a76      	ldr	r2, [pc, #472]	; (8003fcc <HAL_UART_IRQHandler+0x350>)
 8003df4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe f8a4 	bl	8001f48 <HAL_DMA_Abort_IT>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e10:	4610      	mov	r0, r2
 8003e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e00e      	b.n	8003e34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8ec 	bl	8003ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	e00a      	b.n	8003e34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8e8 	bl	8003ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	e006      	b.n	8003e34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8e4 	bl	8003ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e32:	e0c3      	b.n	8003fbc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	bf00      	nop
    return;
 8003e36:	e0c1      	b.n	8003fbc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f040 80a1 	bne.w	8003f84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 809b 	beq.w	8003f84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8095 	beq.w	8003f84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04e      	beq.n	8003f1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e88:	8a3b      	ldrh	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8098 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e94:	8a3a      	ldrh	r2, [r7, #16]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	f080 8092 	bcs.w	8003fc0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8a3a      	ldrh	r2, [r7, #16]
 8003ea0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d02b      	beq.n	8003f04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0210 	bic.w	r2, r2, #16
 8003ef8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd ffe7 	bl	8001ed2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f876 	bl	8004006 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f1a:	e051      	b.n	8003fc0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d047      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f34:	8a7b      	ldrh	r3, [r7, #18]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d044      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0210 	bic.w	r2, r2, #16
 8003f76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f78:	8a7b      	ldrh	r3, [r7, #18]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f842 	bl	8004006 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f82:	e01f      	b.n	8003fc4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x324>
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f8c9 	bl	8004130 <UART_Transmit_IT>
    return;
 8003f9e:	e012      	b.n	8003fc6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x34a>
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f90a 	bl	80041ce <UART_EndTransmit_IT>
    return;
 8003fba:	e004      	b.n	8003fc6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003fbc:	bf00      	nop
 8003fbe:	e002      	b.n	8003fc6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003fc4:	bf00      	nop
  }
}
 8003fc6:	3728      	adds	r7, #40	; 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	08004109 	.word	0x08004109

08003fd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402c:	e02c      	b.n	8004088 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d028      	beq.n	8004088 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x30>
 800403c:	f7fd fe32 	bl	8001ca4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	429a      	cmp	r2, r3
 800404a:	d21d      	bcs.n	8004088 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800405a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e00f      	b.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	429a      	cmp	r2, r3
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d0c3      	beq.n	800402e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0210 	bic.w	r2, r2, #16
 80040ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff ff66 	bl	8003ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b21      	cmp	r3, #33	; 0x21
 8004142:	d13e      	bne.n	80041c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d114      	bne.n	8004178 <UART_Transmit_IT+0x48>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d110      	bne.n	8004178 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	1c9a      	adds	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]
 8004176:	e008      	b.n	800418a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	1c59      	adds	r1, r3, #1
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6211      	str	r1, [r2, #32]
 8004182:	781a      	ldrb	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29b      	uxth	r3, r3
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4619      	mov	r1, r3
 8004198:	84d1      	strh	r1, [r2, #38]	; 0x26
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e000      	b.n	80041c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
  }
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff feee 	bl	8003fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b22      	cmp	r3, #34	; 0x22
 8004210:	f040 8099 	bne.w	8004346 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	d117      	bne.n	800424e <UART_Receive_IT+0x50>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d113      	bne.n	800424e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423c:	b29a      	uxth	r2, r3
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	1c9a      	adds	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
 800424c:	e026      	b.n	800429c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d007      	beq.n	8004272 <UART_Receive_IT+0x74>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <UART_Receive_IT+0x82>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e008      	b.n	8004292 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800428c:	b2da      	uxtb	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4619      	mov	r1, r3
 80042aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d148      	bne.n	8004342 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0220 	bic.w	r2, r2, #32
 80042be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d123      	bne.n	8004338 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0210 	bic.w	r2, r2, #16
 8004304:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b10      	cmp	r3, #16
 8004312:	d10a      	bne.n	800432a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fe68 	bl	8004006 <HAL_UARTEx_RxEventCallback>
 8004336:	e002      	b.n	800433e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff fe52 	bl	8003fe2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e002      	b.n	8004348 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	e000      	b.n	8004348 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004346:	2302      	movs	r3, #2
  }
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800438a:	f023 030c 	bic.w	r3, r3, #12
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	430b      	orrs	r3, r1
 8004396:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2c      	ldr	r2, [pc, #176]	; (8004464 <UART_SetConfig+0x114>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe fbf0 	bl	8002b9c <HAL_RCC_GetPCLK2Freq>
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	e002      	b.n	80043c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043c0:	f7fe fbd8 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80043c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009a      	lsls	r2, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	4a22      	ldr	r2, [pc, #136]	; (8004468 <UART_SetConfig+0x118>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	0119      	lsls	r1, r3, #4
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <UART_SetConfig+0x118>)
 80043fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2064      	movs	r0, #100	; 0x64
 8004406:	fb00 f303 	mul.w	r3, r0, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <UART_SetConfig+0x118>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441c:	4419      	add	r1, r3
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	fbb2 f2f3 	udiv	r2, r2, r3
 8004434:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <UART_SetConfig+0x118>)
 8004436:	fba3 0302 	umull	r0, r3, r3, r2
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2064      	movs	r0, #100	; 0x64
 800443e:	fb00 f303 	mul.w	r3, r0, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	3332      	adds	r3, #50	; 0x32
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <UART_SetConfig+0x118>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	f003 020f 	and.w	r2, r3, #15
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	440a      	add	r2, r1
 800445a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40013800 	.word	0x40013800
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <__errno>:
 800446c:	4b01      	ldr	r3, [pc, #4]	; (8004474 <__errno+0x8>)
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000068 	.word	0x20000068

08004478 <__libc_init_array>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	2600      	movs	r6, #0
 800447c:	4d0c      	ldr	r5, [pc, #48]	; (80044b0 <__libc_init_array+0x38>)
 800447e:	4c0d      	ldr	r4, [pc, #52]	; (80044b4 <__libc_init_array+0x3c>)
 8004480:	1b64      	subs	r4, r4, r5
 8004482:	10a4      	asrs	r4, r4, #2
 8004484:	42a6      	cmp	r6, r4
 8004486:	d109      	bne.n	800449c <__libc_init_array+0x24>
 8004488:	f000 fc5c 	bl	8004d44 <_init>
 800448c:	2600      	movs	r6, #0
 800448e:	4d0a      	ldr	r5, [pc, #40]	; (80044b8 <__libc_init_array+0x40>)
 8004490:	4c0a      	ldr	r4, [pc, #40]	; (80044bc <__libc_init_array+0x44>)
 8004492:	1b64      	subs	r4, r4, r5
 8004494:	10a4      	asrs	r4, r4, #2
 8004496:	42a6      	cmp	r6, r4
 8004498:	d105      	bne.n	80044a6 <__libc_init_array+0x2e>
 800449a:	bd70      	pop	{r4, r5, r6, pc}
 800449c:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a0:	4798      	blx	r3
 80044a2:	3601      	adds	r6, #1
 80044a4:	e7ee      	b.n	8004484 <__libc_init_array+0xc>
 80044a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044aa:	4798      	blx	r3
 80044ac:	3601      	adds	r6, #1
 80044ae:	e7f2      	b.n	8004496 <__libc_init_array+0x1e>
 80044b0:	08004dd0 	.word	0x08004dd0
 80044b4:	08004dd0 	.word	0x08004dd0
 80044b8:	08004dd0 	.word	0x08004dd0
 80044bc:	08004dd4 	.word	0x08004dd4

080044c0 <memset>:
 80044c0:	4603      	mov	r3, r0
 80044c2:	4402      	add	r2, r0
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d100      	bne.n	80044ca <memset+0xa>
 80044c8:	4770      	bx	lr
 80044ca:	f803 1b01 	strb.w	r1, [r3], #1
 80044ce:	e7f9      	b.n	80044c4 <memset+0x4>

080044d0 <siprintf>:
 80044d0:	b40e      	push	{r1, r2, r3}
 80044d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044d6:	b500      	push	{lr}
 80044d8:	b09c      	sub	sp, #112	; 0x70
 80044da:	ab1d      	add	r3, sp, #116	; 0x74
 80044dc:	9002      	str	r0, [sp, #8]
 80044de:	9006      	str	r0, [sp, #24]
 80044e0:	9107      	str	r1, [sp, #28]
 80044e2:	9104      	str	r1, [sp, #16]
 80044e4:	4808      	ldr	r0, [pc, #32]	; (8004508 <siprintf+0x38>)
 80044e6:	4909      	ldr	r1, [pc, #36]	; (800450c <siprintf+0x3c>)
 80044e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ec:	9105      	str	r1, [sp, #20]
 80044ee:	6800      	ldr	r0, [r0, #0]
 80044f0:	a902      	add	r1, sp, #8
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	f000 f868 	bl	80045c8 <_svfiprintf_r>
 80044f8:	2200      	movs	r2, #0
 80044fa:	9b02      	ldr	r3, [sp, #8]
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	b01c      	add	sp, #112	; 0x70
 8004500:	f85d eb04 	ldr.w	lr, [sp], #4
 8004504:	b003      	add	sp, #12
 8004506:	4770      	bx	lr
 8004508:	20000068 	.word	0x20000068
 800450c:	ffff0208 	.word	0xffff0208

08004510 <__ssputs_r>:
 8004510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004514:	688e      	ldr	r6, [r1, #8]
 8004516:	4682      	mov	sl, r0
 8004518:	429e      	cmp	r6, r3
 800451a:	460c      	mov	r4, r1
 800451c:	4690      	mov	r8, r2
 800451e:	461f      	mov	r7, r3
 8004520:	d838      	bhi.n	8004594 <__ssputs_r+0x84>
 8004522:	898a      	ldrh	r2, [r1, #12]
 8004524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004528:	d032      	beq.n	8004590 <__ssputs_r+0x80>
 800452a:	6825      	ldr	r5, [r4, #0]
 800452c:	6909      	ldr	r1, [r1, #16]
 800452e:	3301      	adds	r3, #1
 8004530:	eba5 0901 	sub.w	r9, r5, r1
 8004534:	6965      	ldr	r5, [r4, #20]
 8004536:	444b      	add	r3, r9
 8004538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800453c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004540:	106d      	asrs	r5, r5, #1
 8004542:	429d      	cmp	r5, r3
 8004544:	bf38      	it	cc
 8004546:	461d      	movcc	r5, r3
 8004548:	0553      	lsls	r3, r2, #21
 800454a:	d531      	bpl.n	80045b0 <__ssputs_r+0xa0>
 800454c:	4629      	mov	r1, r5
 800454e:	f000 fb53 	bl	8004bf8 <_malloc_r>
 8004552:	4606      	mov	r6, r0
 8004554:	b950      	cbnz	r0, 800456c <__ssputs_r+0x5c>
 8004556:	230c      	movs	r3, #12
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	f8ca 3000 	str.w	r3, [sl]
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	464a      	mov	r2, r9
 800456e:	6921      	ldr	r1, [r4, #16]
 8004570:	f000 face 	bl	8004b10 <memcpy>
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800457a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457e:	81a3      	strh	r3, [r4, #12]
 8004580:	6126      	str	r6, [r4, #16]
 8004582:	444e      	add	r6, r9
 8004584:	6026      	str	r6, [r4, #0]
 8004586:	463e      	mov	r6, r7
 8004588:	6165      	str	r5, [r4, #20]
 800458a:	eba5 0509 	sub.w	r5, r5, r9
 800458e:	60a5      	str	r5, [r4, #8]
 8004590:	42be      	cmp	r6, r7
 8004592:	d900      	bls.n	8004596 <__ssputs_r+0x86>
 8004594:	463e      	mov	r6, r7
 8004596:	4632      	mov	r2, r6
 8004598:	4641      	mov	r1, r8
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	f000 fac6 	bl	8004b2c <memmove>
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	6822      	ldr	r2, [r4, #0]
 80045a4:	1b9b      	subs	r3, r3, r6
 80045a6:	4432      	add	r2, r6
 80045a8:	2000      	movs	r0, #0
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	e7db      	b.n	8004568 <__ssputs_r+0x58>
 80045b0:	462a      	mov	r2, r5
 80045b2:	f000 fb7b 	bl	8004cac <_realloc_r>
 80045b6:	4606      	mov	r6, r0
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d1e1      	bne.n	8004580 <__ssputs_r+0x70>
 80045bc:	4650      	mov	r0, sl
 80045be:	6921      	ldr	r1, [r4, #16]
 80045c0:	f000 face 	bl	8004b60 <_free_r>
 80045c4:	e7c7      	b.n	8004556 <__ssputs_r+0x46>
	...

080045c8 <_svfiprintf_r>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	4698      	mov	r8, r3
 80045ce:	898b      	ldrh	r3, [r1, #12]
 80045d0:	4607      	mov	r7, r0
 80045d2:	061b      	lsls	r3, r3, #24
 80045d4:	460d      	mov	r5, r1
 80045d6:	4614      	mov	r4, r2
 80045d8:	b09d      	sub	sp, #116	; 0x74
 80045da:	d50e      	bpl.n	80045fa <_svfiprintf_r+0x32>
 80045dc:	690b      	ldr	r3, [r1, #16]
 80045de:	b963      	cbnz	r3, 80045fa <_svfiprintf_r+0x32>
 80045e0:	2140      	movs	r1, #64	; 0x40
 80045e2:	f000 fb09 	bl	8004bf8 <_malloc_r>
 80045e6:	6028      	str	r0, [r5, #0]
 80045e8:	6128      	str	r0, [r5, #16]
 80045ea:	b920      	cbnz	r0, 80045f6 <_svfiprintf_r+0x2e>
 80045ec:	230c      	movs	r3, #12
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	e0d1      	b.n	800479a <_svfiprintf_r+0x1d2>
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	616b      	str	r3, [r5, #20]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9309      	str	r3, [sp, #36]	; 0x24
 80045fe:	2320      	movs	r3, #32
 8004600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004604:	2330      	movs	r3, #48	; 0x30
 8004606:	f04f 0901 	mov.w	r9, #1
 800460a:	f8cd 800c 	str.w	r8, [sp, #12]
 800460e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047b4 <_svfiprintf_r+0x1ec>
 8004612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004616:	4623      	mov	r3, r4
 8004618:	469a      	mov	sl, r3
 800461a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800461e:	b10a      	cbz	r2, 8004624 <_svfiprintf_r+0x5c>
 8004620:	2a25      	cmp	r2, #37	; 0x25
 8004622:	d1f9      	bne.n	8004618 <_svfiprintf_r+0x50>
 8004624:	ebba 0b04 	subs.w	fp, sl, r4
 8004628:	d00b      	beq.n	8004642 <_svfiprintf_r+0x7a>
 800462a:	465b      	mov	r3, fp
 800462c:	4622      	mov	r2, r4
 800462e:	4629      	mov	r1, r5
 8004630:	4638      	mov	r0, r7
 8004632:	f7ff ff6d 	bl	8004510 <__ssputs_r>
 8004636:	3001      	adds	r0, #1
 8004638:	f000 80aa 	beq.w	8004790 <_svfiprintf_r+0x1c8>
 800463c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800463e:	445a      	add	r2, fp
 8004640:	9209      	str	r2, [sp, #36]	; 0x24
 8004642:	f89a 3000 	ldrb.w	r3, [sl]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80a2 	beq.w	8004790 <_svfiprintf_r+0x1c8>
 800464c:	2300      	movs	r3, #0
 800464e:	f04f 32ff 	mov.w	r2, #4294967295
 8004652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004656:	f10a 0a01 	add.w	sl, sl, #1
 800465a:	9304      	str	r3, [sp, #16]
 800465c:	9307      	str	r3, [sp, #28]
 800465e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004662:	931a      	str	r3, [sp, #104]	; 0x68
 8004664:	4654      	mov	r4, sl
 8004666:	2205      	movs	r2, #5
 8004668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466c:	4851      	ldr	r0, [pc, #324]	; (80047b4 <_svfiprintf_r+0x1ec>)
 800466e:	f000 fa41 	bl	8004af4 <memchr>
 8004672:	9a04      	ldr	r2, [sp, #16]
 8004674:	b9d8      	cbnz	r0, 80046ae <_svfiprintf_r+0xe6>
 8004676:	06d0      	lsls	r0, r2, #27
 8004678:	bf44      	itt	mi
 800467a:	2320      	movmi	r3, #32
 800467c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004680:	0711      	lsls	r1, r2, #28
 8004682:	bf44      	itt	mi
 8004684:	232b      	movmi	r3, #43	; 0x2b
 8004686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468a:	f89a 3000 	ldrb.w	r3, [sl]
 800468e:	2b2a      	cmp	r3, #42	; 0x2a
 8004690:	d015      	beq.n	80046be <_svfiprintf_r+0xf6>
 8004692:	4654      	mov	r4, sl
 8004694:	2000      	movs	r0, #0
 8004696:	f04f 0c0a 	mov.w	ip, #10
 800469a:	9a07      	ldr	r2, [sp, #28]
 800469c:	4621      	mov	r1, r4
 800469e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046a2:	3b30      	subs	r3, #48	; 0x30
 80046a4:	2b09      	cmp	r3, #9
 80046a6:	d94e      	bls.n	8004746 <_svfiprintf_r+0x17e>
 80046a8:	b1b0      	cbz	r0, 80046d8 <_svfiprintf_r+0x110>
 80046aa:	9207      	str	r2, [sp, #28]
 80046ac:	e014      	b.n	80046d8 <_svfiprintf_r+0x110>
 80046ae:	eba0 0308 	sub.w	r3, r0, r8
 80046b2:	fa09 f303 	lsl.w	r3, r9, r3
 80046b6:	4313      	orrs	r3, r2
 80046b8:	46a2      	mov	sl, r4
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	e7d2      	b.n	8004664 <_svfiprintf_r+0x9c>
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	1d19      	adds	r1, r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	9103      	str	r1, [sp, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bfbb      	ittet	lt
 80046ca:	425b      	neglt	r3, r3
 80046cc:	f042 0202 	orrlt.w	r2, r2, #2
 80046d0:	9307      	strge	r3, [sp, #28]
 80046d2:	9307      	strlt	r3, [sp, #28]
 80046d4:	bfb8      	it	lt
 80046d6:	9204      	strlt	r2, [sp, #16]
 80046d8:	7823      	ldrb	r3, [r4, #0]
 80046da:	2b2e      	cmp	r3, #46	; 0x2e
 80046dc:	d10c      	bne.n	80046f8 <_svfiprintf_r+0x130>
 80046de:	7863      	ldrb	r3, [r4, #1]
 80046e0:	2b2a      	cmp	r3, #42	; 0x2a
 80046e2:	d135      	bne.n	8004750 <_svfiprintf_r+0x188>
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	3402      	adds	r4, #2
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9203      	str	r2, [sp, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfb8      	it	lt
 80046f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046f6:	9305      	str	r3, [sp, #20]
 80046f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047c4 <_svfiprintf_r+0x1fc>
 80046fc:	2203      	movs	r2, #3
 80046fe:	4650      	mov	r0, sl
 8004700:	7821      	ldrb	r1, [r4, #0]
 8004702:	f000 f9f7 	bl	8004af4 <memchr>
 8004706:	b140      	cbz	r0, 800471a <_svfiprintf_r+0x152>
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	eba0 000a 	sub.w	r0, r0, sl
 800470e:	fa03 f000 	lsl.w	r0, r3, r0
 8004712:	9b04      	ldr	r3, [sp, #16]
 8004714:	3401      	adds	r4, #1
 8004716:	4303      	orrs	r3, r0
 8004718:	9304      	str	r3, [sp, #16]
 800471a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800471e:	2206      	movs	r2, #6
 8004720:	4825      	ldr	r0, [pc, #148]	; (80047b8 <_svfiprintf_r+0x1f0>)
 8004722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004726:	f000 f9e5 	bl	8004af4 <memchr>
 800472a:	2800      	cmp	r0, #0
 800472c:	d038      	beq.n	80047a0 <_svfiprintf_r+0x1d8>
 800472e:	4b23      	ldr	r3, [pc, #140]	; (80047bc <_svfiprintf_r+0x1f4>)
 8004730:	bb1b      	cbnz	r3, 800477a <_svfiprintf_r+0x1b2>
 8004732:	9b03      	ldr	r3, [sp, #12]
 8004734:	3307      	adds	r3, #7
 8004736:	f023 0307 	bic.w	r3, r3, #7
 800473a:	3308      	adds	r3, #8
 800473c:	9303      	str	r3, [sp, #12]
 800473e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004740:	4433      	add	r3, r6
 8004742:	9309      	str	r3, [sp, #36]	; 0x24
 8004744:	e767      	b.n	8004616 <_svfiprintf_r+0x4e>
 8004746:	460c      	mov	r4, r1
 8004748:	2001      	movs	r0, #1
 800474a:	fb0c 3202 	mla	r2, ip, r2, r3
 800474e:	e7a5      	b.n	800469c <_svfiprintf_r+0xd4>
 8004750:	2300      	movs	r3, #0
 8004752:	f04f 0c0a 	mov.w	ip, #10
 8004756:	4619      	mov	r1, r3
 8004758:	3401      	adds	r4, #1
 800475a:	9305      	str	r3, [sp, #20]
 800475c:	4620      	mov	r0, r4
 800475e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004762:	3a30      	subs	r2, #48	; 0x30
 8004764:	2a09      	cmp	r2, #9
 8004766:	d903      	bls.n	8004770 <_svfiprintf_r+0x1a8>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0c5      	beq.n	80046f8 <_svfiprintf_r+0x130>
 800476c:	9105      	str	r1, [sp, #20]
 800476e:	e7c3      	b.n	80046f8 <_svfiprintf_r+0x130>
 8004770:	4604      	mov	r4, r0
 8004772:	2301      	movs	r3, #1
 8004774:	fb0c 2101 	mla	r1, ip, r1, r2
 8004778:	e7f0      	b.n	800475c <_svfiprintf_r+0x194>
 800477a:	ab03      	add	r3, sp, #12
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	462a      	mov	r2, r5
 8004780:	4638      	mov	r0, r7
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <_svfiprintf_r+0x1f8>)
 8004784:	a904      	add	r1, sp, #16
 8004786:	f3af 8000 	nop.w
 800478a:	1c42      	adds	r2, r0, #1
 800478c:	4606      	mov	r6, r0
 800478e:	d1d6      	bne.n	800473e <_svfiprintf_r+0x176>
 8004790:	89ab      	ldrh	r3, [r5, #12]
 8004792:	065b      	lsls	r3, r3, #25
 8004794:	f53f af2c 	bmi.w	80045f0 <_svfiprintf_r+0x28>
 8004798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800479a:	b01d      	add	sp, #116	; 0x74
 800479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a0:	ab03      	add	r3, sp, #12
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	462a      	mov	r2, r5
 80047a6:	4638      	mov	r0, r7
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <_svfiprintf_r+0x1f8>)
 80047aa:	a904      	add	r1, sp, #16
 80047ac:	f000 f87c 	bl	80048a8 <_printf_i>
 80047b0:	e7eb      	b.n	800478a <_svfiprintf_r+0x1c2>
 80047b2:	bf00      	nop
 80047b4:	08004d9c 	.word	0x08004d9c
 80047b8:	08004da6 	.word	0x08004da6
 80047bc:	00000000 	.word	0x00000000
 80047c0:	08004511 	.word	0x08004511
 80047c4:	08004da2 	.word	0x08004da2

080047c8 <_printf_common>:
 80047c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047cc:	4616      	mov	r6, r2
 80047ce:	4699      	mov	r9, r3
 80047d0:	688a      	ldr	r2, [r1, #8]
 80047d2:	690b      	ldr	r3, [r1, #16]
 80047d4:	4607      	mov	r7, r0
 80047d6:	4293      	cmp	r3, r2
 80047d8:	bfb8      	it	lt
 80047da:	4613      	movlt	r3, r2
 80047dc:	6033      	str	r3, [r6, #0]
 80047de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047e2:	460c      	mov	r4, r1
 80047e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e8:	b10a      	cbz	r2, 80047ee <_printf_common+0x26>
 80047ea:	3301      	adds	r3, #1
 80047ec:	6033      	str	r3, [r6, #0]
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	0699      	lsls	r1, r3, #26
 80047f2:	bf42      	ittt	mi
 80047f4:	6833      	ldrmi	r3, [r6, #0]
 80047f6:	3302      	addmi	r3, #2
 80047f8:	6033      	strmi	r3, [r6, #0]
 80047fa:	6825      	ldr	r5, [r4, #0]
 80047fc:	f015 0506 	ands.w	r5, r5, #6
 8004800:	d106      	bne.n	8004810 <_printf_common+0x48>
 8004802:	f104 0a19 	add.w	sl, r4, #25
 8004806:	68e3      	ldr	r3, [r4, #12]
 8004808:	6832      	ldr	r2, [r6, #0]
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	42ab      	cmp	r3, r5
 800480e:	dc28      	bgt.n	8004862 <_printf_common+0x9a>
 8004810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004814:	1e13      	subs	r3, r2, #0
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	bf18      	it	ne
 800481a:	2301      	movne	r3, #1
 800481c:	0692      	lsls	r2, r2, #26
 800481e:	d42d      	bmi.n	800487c <_printf_common+0xb4>
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004828:	47c0      	blx	r8
 800482a:	3001      	adds	r0, #1
 800482c:	d020      	beq.n	8004870 <_printf_common+0xa8>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	68e5      	ldr	r5, [r4, #12]
 8004832:	f003 0306 	and.w	r3, r3, #6
 8004836:	2b04      	cmp	r3, #4
 8004838:	bf18      	it	ne
 800483a:	2500      	movne	r5, #0
 800483c:	6832      	ldr	r2, [r6, #0]
 800483e:	f04f 0600 	mov.w	r6, #0
 8004842:	68a3      	ldr	r3, [r4, #8]
 8004844:	bf08      	it	eq
 8004846:	1aad      	subeq	r5, r5, r2
 8004848:	6922      	ldr	r2, [r4, #16]
 800484a:	bf08      	it	eq
 800484c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004850:	4293      	cmp	r3, r2
 8004852:	bfc4      	itt	gt
 8004854:	1a9b      	subgt	r3, r3, r2
 8004856:	18ed      	addgt	r5, r5, r3
 8004858:	341a      	adds	r4, #26
 800485a:	42b5      	cmp	r5, r6
 800485c:	d11a      	bne.n	8004894 <_printf_common+0xcc>
 800485e:	2000      	movs	r0, #0
 8004860:	e008      	b.n	8004874 <_printf_common+0xac>
 8004862:	2301      	movs	r3, #1
 8004864:	4652      	mov	r2, sl
 8004866:	4649      	mov	r1, r9
 8004868:	4638      	mov	r0, r7
 800486a:	47c0      	blx	r8
 800486c:	3001      	adds	r0, #1
 800486e:	d103      	bne.n	8004878 <_printf_common+0xb0>
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004878:	3501      	adds	r5, #1
 800487a:	e7c4      	b.n	8004806 <_printf_common+0x3e>
 800487c:	2030      	movs	r0, #48	; 0x30
 800487e:	18e1      	adds	r1, r4, r3
 8004880:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800488a:	4422      	add	r2, r4
 800488c:	3302      	adds	r3, #2
 800488e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004892:	e7c5      	b.n	8004820 <_printf_common+0x58>
 8004894:	2301      	movs	r3, #1
 8004896:	4622      	mov	r2, r4
 8004898:	4649      	mov	r1, r9
 800489a:	4638      	mov	r0, r7
 800489c:	47c0      	blx	r8
 800489e:	3001      	adds	r0, #1
 80048a0:	d0e6      	beq.n	8004870 <_printf_common+0xa8>
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7d9      	b.n	800485a <_printf_common+0x92>
	...

080048a8 <_printf_i>:
 80048a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	460c      	mov	r4, r1
 80048ae:	7e27      	ldrb	r7, [r4, #24]
 80048b0:	4691      	mov	r9, r2
 80048b2:	2f78      	cmp	r7, #120	; 0x78
 80048b4:	4680      	mov	r8, r0
 80048b6:	469a      	mov	sl, r3
 80048b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048be:	d807      	bhi.n	80048d0 <_printf_i+0x28>
 80048c0:	2f62      	cmp	r7, #98	; 0x62
 80048c2:	d80a      	bhi.n	80048da <_printf_i+0x32>
 80048c4:	2f00      	cmp	r7, #0
 80048c6:	f000 80d9 	beq.w	8004a7c <_printf_i+0x1d4>
 80048ca:	2f58      	cmp	r7, #88	; 0x58
 80048cc:	f000 80a4 	beq.w	8004a18 <_printf_i+0x170>
 80048d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048d8:	e03a      	b.n	8004950 <_printf_i+0xa8>
 80048da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048de:	2b15      	cmp	r3, #21
 80048e0:	d8f6      	bhi.n	80048d0 <_printf_i+0x28>
 80048e2:	a001      	add	r0, pc, #4	; (adr r0, 80048e8 <_printf_i+0x40>)
 80048e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048e8:	08004941 	.word	0x08004941
 80048ec:	08004955 	.word	0x08004955
 80048f0:	080048d1 	.word	0x080048d1
 80048f4:	080048d1 	.word	0x080048d1
 80048f8:	080048d1 	.word	0x080048d1
 80048fc:	080048d1 	.word	0x080048d1
 8004900:	08004955 	.word	0x08004955
 8004904:	080048d1 	.word	0x080048d1
 8004908:	080048d1 	.word	0x080048d1
 800490c:	080048d1 	.word	0x080048d1
 8004910:	080048d1 	.word	0x080048d1
 8004914:	08004a63 	.word	0x08004a63
 8004918:	08004985 	.word	0x08004985
 800491c:	08004a45 	.word	0x08004a45
 8004920:	080048d1 	.word	0x080048d1
 8004924:	080048d1 	.word	0x080048d1
 8004928:	08004a85 	.word	0x08004a85
 800492c:	080048d1 	.word	0x080048d1
 8004930:	08004985 	.word	0x08004985
 8004934:	080048d1 	.word	0x080048d1
 8004938:	080048d1 	.word	0x080048d1
 800493c:	08004a4d 	.word	0x08004a4d
 8004940:	680b      	ldr	r3, [r1, #0]
 8004942:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	600a      	str	r2, [r1, #0]
 800494c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004950:	2301      	movs	r3, #1
 8004952:	e0a4      	b.n	8004a9e <_printf_i+0x1f6>
 8004954:	6825      	ldr	r5, [r4, #0]
 8004956:	6808      	ldr	r0, [r1, #0]
 8004958:	062e      	lsls	r6, r5, #24
 800495a:	f100 0304 	add.w	r3, r0, #4
 800495e:	d50a      	bpl.n	8004976 <_printf_i+0xce>
 8004960:	6805      	ldr	r5, [r0, #0]
 8004962:	600b      	str	r3, [r1, #0]
 8004964:	2d00      	cmp	r5, #0
 8004966:	da03      	bge.n	8004970 <_printf_i+0xc8>
 8004968:	232d      	movs	r3, #45	; 0x2d
 800496a:	426d      	negs	r5, r5
 800496c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004970:	230a      	movs	r3, #10
 8004972:	485e      	ldr	r0, [pc, #376]	; (8004aec <_printf_i+0x244>)
 8004974:	e019      	b.n	80049aa <_printf_i+0x102>
 8004976:	f015 0f40 	tst.w	r5, #64	; 0x40
 800497a:	6805      	ldr	r5, [r0, #0]
 800497c:	600b      	str	r3, [r1, #0]
 800497e:	bf18      	it	ne
 8004980:	b22d      	sxthne	r5, r5
 8004982:	e7ef      	b.n	8004964 <_printf_i+0xbc>
 8004984:	680b      	ldr	r3, [r1, #0]
 8004986:	6825      	ldr	r5, [r4, #0]
 8004988:	1d18      	adds	r0, r3, #4
 800498a:	6008      	str	r0, [r1, #0]
 800498c:	0628      	lsls	r0, r5, #24
 800498e:	d501      	bpl.n	8004994 <_printf_i+0xec>
 8004990:	681d      	ldr	r5, [r3, #0]
 8004992:	e002      	b.n	800499a <_printf_i+0xf2>
 8004994:	0669      	lsls	r1, r5, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0xe8>
 8004998:	881d      	ldrh	r5, [r3, #0]
 800499a:	2f6f      	cmp	r7, #111	; 0x6f
 800499c:	bf0c      	ite	eq
 800499e:	2308      	moveq	r3, #8
 80049a0:	230a      	movne	r3, #10
 80049a2:	4852      	ldr	r0, [pc, #328]	; (8004aec <_printf_i+0x244>)
 80049a4:	2100      	movs	r1, #0
 80049a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049aa:	6866      	ldr	r6, [r4, #4]
 80049ac:	2e00      	cmp	r6, #0
 80049ae:	bfa8      	it	ge
 80049b0:	6821      	ldrge	r1, [r4, #0]
 80049b2:	60a6      	str	r6, [r4, #8]
 80049b4:	bfa4      	itt	ge
 80049b6:	f021 0104 	bicge.w	r1, r1, #4
 80049ba:	6021      	strge	r1, [r4, #0]
 80049bc:	b90d      	cbnz	r5, 80049c2 <_printf_i+0x11a>
 80049be:	2e00      	cmp	r6, #0
 80049c0:	d04d      	beq.n	8004a5e <_printf_i+0x1b6>
 80049c2:	4616      	mov	r6, r2
 80049c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049c8:	fb03 5711 	mls	r7, r3, r1, r5
 80049cc:	5dc7      	ldrb	r7, [r0, r7]
 80049ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049d2:	462f      	mov	r7, r5
 80049d4:	42bb      	cmp	r3, r7
 80049d6:	460d      	mov	r5, r1
 80049d8:	d9f4      	bls.n	80049c4 <_printf_i+0x11c>
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d10b      	bne.n	80049f6 <_printf_i+0x14e>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	07df      	lsls	r7, r3, #31
 80049e2:	d508      	bpl.n	80049f6 <_printf_i+0x14e>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	6861      	ldr	r1, [r4, #4]
 80049e8:	4299      	cmp	r1, r3
 80049ea:	bfde      	ittt	le
 80049ec:	2330      	movle	r3, #48	; 0x30
 80049ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049f6:	1b92      	subs	r2, r2, r6
 80049f8:	6122      	str	r2, [r4, #16]
 80049fa:	464b      	mov	r3, r9
 80049fc:	4621      	mov	r1, r4
 80049fe:	4640      	mov	r0, r8
 8004a00:	f8cd a000 	str.w	sl, [sp]
 8004a04:	aa03      	add	r2, sp, #12
 8004a06:	f7ff fedf 	bl	80047c8 <_printf_common>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d14c      	bne.n	8004aa8 <_printf_i+0x200>
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a12:	b004      	add	sp, #16
 8004a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a18:	4834      	ldr	r0, [pc, #208]	; (8004aec <_printf_i+0x244>)
 8004a1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a1e:	680e      	ldr	r6, [r1, #0]
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a26:	061f      	lsls	r7, r3, #24
 8004a28:	600e      	str	r6, [r1, #0]
 8004a2a:	d514      	bpl.n	8004a56 <_printf_i+0x1ae>
 8004a2c:	07d9      	lsls	r1, r3, #31
 8004a2e:	bf44      	itt	mi
 8004a30:	f043 0320 	orrmi.w	r3, r3, #32
 8004a34:	6023      	strmi	r3, [r4, #0]
 8004a36:	b91d      	cbnz	r5, 8004a40 <_printf_i+0x198>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	f023 0320 	bic.w	r3, r3, #32
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	2310      	movs	r3, #16
 8004a42:	e7af      	b.n	80049a4 <_printf_i+0xfc>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	f043 0320 	orr.w	r3, r3, #32
 8004a4a:	6023      	str	r3, [r4, #0]
 8004a4c:	2378      	movs	r3, #120	; 0x78
 8004a4e:	4828      	ldr	r0, [pc, #160]	; (8004af0 <_printf_i+0x248>)
 8004a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a54:	e7e3      	b.n	8004a1e <_printf_i+0x176>
 8004a56:	065e      	lsls	r6, r3, #25
 8004a58:	bf48      	it	mi
 8004a5a:	b2ad      	uxthmi	r5, r5
 8004a5c:	e7e6      	b.n	8004a2c <_printf_i+0x184>
 8004a5e:	4616      	mov	r6, r2
 8004a60:	e7bb      	b.n	80049da <_printf_i+0x132>
 8004a62:	680b      	ldr	r3, [r1, #0]
 8004a64:	6826      	ldr	r6, [r4, #0]
 8004a66:	1d1d      	adds	r5, r3, #4
 8004a68:	6960      	ldr	r0, [r4, #20]
 8004a6a:	600d      	str	r5, [r1, #0]
 8004a6c:	0635      	lsls	r5, r6, #24
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	d501      	bpl.n	8004a76 <_printf_i+0x1ce>
 8004a72:	6018      	str	r0, [r3, #0]
 8004a74:	e002      	b.n	8004a7c <_printf_i+0x1d4>
 8004a76:	0671      	lsls	r1, r6, #25
 8004a78:	d5fb      	bpl.n	8004a72 <_printf_i+0x1ca>
 8004a7a:	8018      	strh	r0, [r3, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4616      	mov	r6, r2
 8004a80:	6123      	str	r3, [r4, #16]
 8004a82:	e7ba      	b.n	80049fa <_printf_i+0x152>
 8004a84:	680b      	ldr	r3, [r1, #0]
 8004a86:	1d1a      	adds	r2, r3, #4
 8004a88:	600a      	str	r2, [r1, #0]
 8004a8a:	681e      	ldr	r6, [r3, #0]
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4630      	mov	r0, r6
 8004a90:	6862      	ldr	r2, [r4, #4]
 8004a92:	f000 f82f 	bl	8004af4 <memchr>
 8004a96:	b108      	cbz	r0, 8004a9c <_printf_i+0x1f4>
 8004a98:	1b80      	subs	r0, r0, r6
 8004a9a:	6060      	str	r0, [r4, #4]
 8004a9c:	6863      	ldr	r3, [r4, #4]
 8004a9e:	6123      	str	r3, [r4, #16]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa6:	e7a8      	b.n	80049fa <_printf_i+0x152>
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	4649      	mov	r1, r9
 8004aac:	4640      	mov	r0, r8
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	47d0      	blx	sl
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d0ab      	beq.n	8004a0e <_printf_i+0x166>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	079b      	lsls	r3, r3, #30
 8004aba:	d413      	bmi.n	8004ae4 <_printf_i+0x23c>
 8004abc:	68e0      	ldr	r0, [r4, #12]
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	4298      	cmp	r0, r3
 8004ac2:	bfb8      	it	lt
 8004ac4:	4618      	movlt	r0, r3
 8004ac6:	e7a4      	b.n	8004a12 <_printf_i+0x16a>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	4632      	mov	r2, r6
 8004acc:	4649      	mov	r1, r9
 8004ace:	4640      	mov	r0, r8
 8004ad0:	47d0      	blx	sl
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d09b      	beq.n	8004a0e <_printf_i+0x166>
 8004ad6:	3501      	adds	r5, #1
 8004ad8:	68e3      	ldr	r3, [r4, #12]
 8004ada:	9903      	ldr	r1, [sp, #12]
 8004adc:	1a5b      	subs	r3, r3, r1
 8004ade:	42ab      	cmp	r3, r5
 8004ae0:	dcf2      	bgt.n	8004ac8 <_printf_i+0x220>
 8004ae2:	e7eb      	b.n	8004abc <_printf_i+0x214>
 8004ae4:	2500      	movs	r5, #0
 8004ae6:	f104 0619 	add.w	r6, r4, #25
 8004aea:	e7f5      	b.n	8004ad8 <_printf_i+0x230>
 8004aec:	08004dad 	.word	0x08004dad
 8004af0:	08004dbe 	.word	0x08004dbe

08004af4 <memchr>:
 8004af4:	4603      	mov	r3, r0
 8004af6:	b510      	push	{r4, lr}
 8004af8:	b2c9      	uxtb	r1, r1
 8004afa:	4402      	add	r2, r0
 8004afc:	4293      	cmp	r3, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	d101      	bne.n	8004b06 <memchr+0x12>
 8004b02:	2000      	movs	r0, #0
 8004b04:	e003      	b.n	8004b0e <memchr+0x1a>
 8004b06:	7804      	ldrb	r4, [r0, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	428c      	cmp	r4, r1
 8004b0c:	d1f6      	bne.n	8004afc <memchr+0x8>
 8004b0e:	bd10      	pop	{r4, pc}

08004b10 <memcpy>:
 8004b10:	440a      	add	r2, r1
 8004b12:	4291      	cmp	r1, r2
 8004b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b18:	d100      	bne.n	8004b1c <memcpy+0xc>
 8004b1a:	4770      	bx	lr
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b22:	4291      	cmp	r1, r2
 8004b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b28:	d1f9      	bne.n	8004b1e <memcpy+0xe>
 8004b2a:	bd10      	pop	{r4, pc}

08004b2c <memmove>:
 8004b2c:	4288      	cmp	r0, r1
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	eb01 0402 	add.w	r4, r1, r2
 8004b34:	d902      	bls.n	8004b3c <memmove+0x10>
 8004b36:	4284      	cmp	r4, r0
 8004b38:	4623      	mov	r3, r4
 8004b3a:	d807      	bhi.n	8004b4c <memmove+0x20>
 8004b3c:	1e43      	subs	r3, r0, #1
 8004b3e:	42a1      	cmp	r1, r4
 8004b40:	d008      	beq.n	8004b54 <memmove+0x28>
 8004b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4a:	e7f8      	b.n	8004b3e <memmove+0x12>
 8004b4c:	4601      	mov	r1, r0
 8004b4e:	4402      	add	r2, r0
 8004b50:	428a      	cmp	r2, r1
 8004b52:	d100      	bne.n	8004b56 <memmove+0x2a>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b5e:	e7f7      	b.n	8004b50 <memmove+0x24>

08004b60 <_free_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4605      	mov	r5, r0
 8004b64:	2900      	cmp	r1, #0
 8004b66:	d043      	beq.n	8004bf0 <_free_r+0x90>
 8004b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b6c:	1f0c      	subs	r4, r1, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bfb8      	it	lt
 8004b72:	18e4      	addlt	r4, r4, r3
 8004b74:	f000 f8d0 	bl	8004d18 <__malloc_lock>
 8004b78:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <_free_r+0x94>)
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	b933      	cbnz	r3, 8004b8e <_free_r+0x2e>
 8004b80:	6063      	str	r3, [r4, #4]
 8004b82:	6014      	str	r4, [r2, #0]
 8004b84:	4628      	mov	r0, r5
 8004b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b8a:	f000 b8cb 	b.w	8004d24 <__malloc_unlock>
 8004b8e:	42a3      	cmp	r3, r4
 8004b90:	d90a      	bls.n	8004ba8 <_free_r+0x48>
 8004b92:	6821      	ldr	r1, [r4, #0]
 8004b94:	1862      	adds	r2, r4, r1
 8004b96:	4293      	cmp	r3, r2
 8004b98:	bf01      	itttt	eq
 8004b9a:	681a      	ldreq	r2, [r3, #0]
 8004b9c:	685b      	ldreq	r3, [r3, #4]
 8004b9e:	1852      	addeq	r2, r2, r1
 8004ba0:	6022      	streq	r2, [r4, #0]
 8004ba2:	6063      	str	r3, [r4, #4]
 8004ba4:	6004      	str	r4, [r0, #0]
 8004ba6:	e7ed      	b.n	8004b84 <_free_r+0x24>
 8004ba8:	461a      	mov	r2, r3
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	b10b      	cbz	r3, 8004bb2 <_free_r+0x52>
 8004bae:	42a3      	cmp	r3, r4
 8004bb0:	d9fa      	bls.n	8004ba8 <_free_r+0x48>
 8004bb2:	6811      	ldr	r1, [r2, #0]
 8004bb4:	1850      	adds	r0, r2, r1
 8004bb6:	42a0      	cmp	r0, r4
 8004bb8:	d10b      	bne.n	8004bd2 <_free_r+0x72>
 8004bba:	6820      	ldr	r0, [r4, #0]
 8004bbc:	4401      	add	r1, r0
 8004bbe:	1850      	adds	r0, r2, r1
 8004bc0:	4283      	cmp	r3, r0
 8004bc2:	6011      	str	r1, [r2, #0]
 8004bc4:	d1de      	bne.n	8004b84 <_free_r+0x24>
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4401      	add	r1, r0
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	6053      	str	r3, [r2, #4]
 8004bd0:	e7d8      	b.n	8004b84 <_free_r+0x24>
 8004bd2:	d902      	bls.n	8004bda <_free_r+0x7a>
 8004bd4:	230c      	movs	r3, #12
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	e7d4      	b.n	8004b84 <_free_r+0x24>
 8004bda:	6820      	ldr	r0, [r4, #0]
 8004bdc:	1821      	adds	r1, r4, r0
 8004bde:	428b      	cmp	r3, r1
 8004be0:	bf01      	itttt	eq
 8004be2:	6819      	ldreq	r1, [r3, #0]
 8004be4:	685b      	ldreq	r3, [r3, #4]
 8004be6:	1809      	addeq	r1, r1, r0
 8004be8:	6021      	streq	r1, [r4, #0]
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	6054      	str	r4, [r2, #4]
 8004bee:	e7c9      	b.n	8004b84 <_free_r+0x24>
 8004bf0:	bd38      	pop	{r3, r4, r5, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000148 	.word	0x20000148

08004bf8 <_malloc_r>:
 8004bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfa:	1ccd      	adds	r5, r1, #3
 8004bfc:	f025 0503 	bic.w	r5, r5, #3
 8004c00:	3508      	adds	r5, #8
 8004c02:	2d0c      	cmp	r5, #12
 8004c04:	bf38      	it	cc
 8004c06:	250c      	movcc	r5, #12
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	db01      	blt.n	8004c12 <_malloc_r+0x1a>
 8004c0e:	42a9      	cmp	r1, r5
 8004c10:	d903      	bls.n	8004c1a <_malloc_r+0x22>
 8004c12:	230c      	movs	r3, #12
 8004c14:	6033      	str	r3, [r6, #0]
 8004c16:	2000      	movs	r0, #0
 8004c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1a:	f000 f87d 	bl	8004d18 <__malloc_lock>
 8004c1e:	4921      	ldr	r1, [pc, #132]	; (8004ca4 <_malloc_r+0xac>)
 8004c20:	680a      	ldr	r2, [r1, #0]
 8004c22:	4614      	mov	r4, r2
 8004c24:	b99c      	cbnz	r4, 8004c4e <_malloc_r+0x56>
 8004c26:	4f20      	ldr	r7, [pc, #128]	; (8004ca8 <_malloc_r+0xb0>)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	b923      	cbnz	r3, 8004c36 <_malloc_r+0x3e>
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4630      	mov	r0, r6
 8004c30:	f000 f862 	bl	8004cf8 <_sbrk_r>
 8004c34:	6038      	str	r0, [r7, #0]
 8004c36:	4629      	mov	r1, r5
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f000 f85d 	bl	8004cf8 <_sbrk_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	d123      	bne.n	8004c8a <_malloc_r+0x92>
 8004c42:	230c      	movs	r3, #12
 8004c44:	4630      	mov	r0, r6
 8004c46:	6033      	str	r3, [r6, #0]
 8004c48:	f000 f86c 	bl	8004d24 <__malloc_unlock>
 8004c4c:	e7e3      	b.n	8004c16 <_malloc_r+0x1e>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	1b5b      	subs	r3, r3, r5
 8004c52:	d417      	bmi.n	8004c84 <_malloc_r+0x8c>
 8004c54:	2b0b      	cmp	r3, #11
 8004c56:	d903      	bls.n	8004c60 <_malloc_r+0x68>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	441c      	add	r4, r3
 8004c5c:	6025      	str	r5, [r4, #0]
 8004c5e:	e004      	b.n	8004c6a <_malloc_r+0x72>
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	42a2      	cmp	r2, r4
 8004c64:	bf0c      	ite	eq
 8004c66:	600b      	streq	r3, [r1, #0]
 8004c68:	6053      	strne	r3, [r2, #4]
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f000 f85a 	bl	8004d24 <__malloc_unlock>
 8004c70:	f104 000b 	add.w	r0, r4, #11
 8004c74:	1d23      	adds	r3, r4, #4
 8004c76:	f020 0007 	bic.w	r0, r0, #7
 8004c7a:	1ac2      	subs	r2, r0, r3
 8004c7c:	d0cc      	beq.n	8004c18 <_malloc_r+0x20>
 8004c7e:	1a1b      	subs	r3, r3, r0
 8004c80:	50a3      	str	r3, [r4, r2]
 8004c82:	e7c9      	b.n	8004c18 <_malloc_r+0x20>
 8004c84:	4622      	mov	r2, r4
 8004c86:	6864      	ldr	r4, [r4, #4]
 8004c88:	e7cc      	b.n	8004c24 <_malloc_r+0x2c>
 8004c8a:	1cc4      	adds	r4, r0, #3
 8004c8c:	f024 0403 	bic.w	r4, r4, #3
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d0e3      	beq.n	8004c5c <_malloc_r+0x64>
 8004c94:	1a21      	subs	r1, r4, r0
 8004c96:	4630      	mov	r0, r6
 8004c98:	f000 f82e 	bl	8004cf8 <_sbrk_r>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d1dd      	bne.n	8004c5c <_malloc_r+0x64>
 8004ca0:	e7cf      	b.n	8004c42 <_malloc_r+0x4a>
 8004ca2:	bf00      	nop
 8004ca4:	20000148 	.word	0x20000148
 8004ca8:	2000014c 	.word	0x2000014c

08004cac <_realloc_r>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	4607      	mov	r7, r0
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	460e      	mov	r6, r1
 8004cb4:	b921      	cbnz	r1, 8004cc0 <_realloc_r+0x14>
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cbc:	f7ff bf9c 	b.w	8004bf8 <_malloc_r>
 8004cc0:	b922      	cbnz	r2, 8004ccc <_realloc_r+0x20>
 8004cc2:	f7ff ff4d 	bl	8004b60 <_free_r>
 8004cc6:	4625      	mov	r5, r4
 8004cc8:	4628      	mov	r0, r5
 8004cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ccc:	f000 f830 	bl	8004d30 <_malloc_usable_size_r>
 8004cd0:	42a0      	cmp	r0, r4
 8004cd2:	d20f      	bcs.n	8004cf4 <_realloc_r+0x48>
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f7ff ff8e 	bl	8004bf8 <_malloc_r>
 8004cdc:	4605      	mov	r5, r0
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d0f2      	beq.n	8004cc8 <_realloc_r+0x1c>
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	f7ff ff13 	bl	8004b10 <memcpy>
 8004cea:	4631      	mov	r1, r6
 8004cec:	4638      	mov	r0, r7
 8004cee:	f7ff ff37 	bl	8004b60 <_free_r>
 8004cf2:	e7e9      	b.n	8004cc8 <_realloc_r+0x1c>
 8004cf4:	4635      	mov	r5, r6
 8004cf6:	e7e7      	b.n	8004cc8 <_realloc_r+0x1c>

08004cf8 <_sbrk_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4d05      	ldr	r5, [pc, #20]	; (8004d14 <_sbrk_r+0x1c>)
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4608      	mov	r0, r1
 8004d02:	602b      	str	r3, [r5, #0]
 8004d04:	f7fc fab0 	bl	8001268 <_sbrk>
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	d102      	bne.n	8004d12 <_sbrk_r+0x1a>
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	b103      	cbz	r3, 8004d12 <_sbrk_r+0x1a>
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	2000024c 	.word	0x2000024c

08004d18 <__malloc_lock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_lock+0x8>)
 8004d1a:	f000 b811 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004d1e:	bf00      	nop
 8004d20:	20000254 	.word	0x20000254

08004d24 <__malloc_unlock>:
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <__malloc_unlock+0x8>)
 8004d26:	f000 b80c 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	20000254 	.word	0x20000254

08004d30 <_malloc_usable_size_r>:
 8004d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d34:	1f18      	subs	r0, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfbc      	itt	lt
 8004d3a:	580b      	ldrlt	r3, [r1, r0]
 8004d3c:	18c0      	addlt	r0, r0, r3
 8004d3e:	4770      	bx	lr

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <_init>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr

08004d50 <_fini>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr
