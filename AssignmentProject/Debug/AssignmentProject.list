
AssignmentProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004e08  08004e08  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e08  08004e08  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000cc  08004edc  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004edc  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018382  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003004  00000000  00000000  00038477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0003b480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  0003c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fed  00000000  00000000  0003cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001263f  00000000  00000000  00056ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b208  00000000  00000000  00069524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f472c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000f4780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d88 	.word	0x08004d88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08004d88 	.word	0x08004d88

0800014c <isButton1Pressed>:

int KeyReg3[4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int timeForKeyPressed[4] = {300/TICK, 300/TICK, 300/TICK, 300/TICK};

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag ==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000e8 	.word	0x200000e8

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag ==1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ec 	.word	0x200000ec

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag ==1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000f0 	.word	0x200000f0

080001b8 <isButtonPedesPressed>:

int isButtonPedesPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if (buttonPedes_flag ==1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButtonPedesPressed+0x16>
		buttonPedes_flag =0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButtonPedesPressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000f4 	.word	0x200000f4

080001dc <doProcess>:

void doProcess(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d81a      	bhi.n	8000220 <doProcess+0x44>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <doProcess+0x14>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000201 	.word	0x08000201
 80001f4:	08000209 	.word	0x08000209
 80001f8:	08000211 	.word	0x08000211
 80001fc:	08000219 	.word	0x08000219
	switch (i){
	case 0:
		button1_flag =1;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <doProcess+0x50>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
		break;
 8000206:	e00c      	b.n	8000222 <doProcess+0x46>
	case 1:
		button2_flag =1;
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <doProcess+0x54>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
		break;
 800020e:	e008      	b.n	8000222 <doProcess+0x46>
	case 2:
		button3_flag =1;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <doProcess+0x58>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
		break;
 8000216:	e004      	b.n	8000222 <doProcess+0x46>
	case 3:
		buttonPedes_flag =1;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <doProcess+0x5c>)
 800021a:	2201      	movs	r2, #1
 800021c:	601a      	str	r2, [r3, #0]
		break;
 800021e:	e000      	b.n	8000222 <doProcess+0x46>
	default:
		break;
 8000220:	bf00      	nop
	}
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	200000e8 	.word	0x200000e8
 8000230:	200000ec 	.word	0x200000ec
 8000234:	200000f0 	.word	0x200000f0
 8000238:	200000f4 	.word	0x200000f4

0800023c <readPin>:


int readPin(int i){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d822      	bhi.n	8000290 <readPin+0x54>
 800024a:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <readPin+0x14>)
 800024c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000250:	08000261 	.word	0x08000261
 8000254:	0800026d 	.word	0x0800026d
 8000258:	08000279 	.word	0x08000279
 800025c:	08000285 	.word	0x08000285
	switch(i){
	case 0:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON1_Pin);
 8000260:	2102      	movs	r1, #2
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <readPin+0x60>)
 8000264:	f002 f88c 	bl	8002380 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	e012      	b.n	8000292 <readPin+0x56>
		break;
	case 1:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON2_Pin);
 800026c:	2110      	movs	r1, #16
 800026e:	480b      	ldr	r0, [pc, #44]	; (800029c <readPin+0x60>)
 8000270:	f002 f886 	bl	8002380 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	e00c      	b.n	8000292 <readPin+0x56>
		break;
	case 2:
		return HAL_GPIO_ReadPin(GPIOB, BUTTON3_Pin);
 8000278:	2101      	movs	r1, #1
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <readPin+0x64>)
 800027c:	f002 f880 	bl	8002380 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	e006      	b.n	8000292 <readPin+0x56>
		break;
	case 3:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON_PEDES_Pin);
 8000284:	2101      	movs	r1, #1
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <readPin+0x60>)
 8000288:	f002 f87a 	bl	8002380 <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	e000      	b.n	8000292 <readPin+0x56>
		break;
	default:
		return GPIO_PIN_RESET;
 8000290:	2300      	movs	r3, #0
		break;
	}
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <getKeyInput>:


void getKeyInput(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	for (int i =0; i<4; i++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e068      	b.n	8000382 <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 80002b0:	4a38      	ldr	r2, [pc, #224]	; (8000394 <getKeyInput+0xf0>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	4937      	ldr	r1, [pc, #220]	; (8000398 <getKeyInput+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80002c0:	4a36      	ldr	r2, [pc, #216]	; (800039c <getKeyInput+0xf8>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c8:	4932      	ldr	r1, [pc, #200]	; (8000394 <getKeyInput+0xf0>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = readPin(i);
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f7ff ffb3 	bl	800023c <readPin>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4930      	ldr	r1, [pc, #192]	; (800039c <getKeyInput+0xf8>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 80002e0:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <getKeyInput+0xf4>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e8:	492a      	ldr	r1, [pc, #168]	; (8000394 <getKeyInput+0xf0>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d143      	bne.n	800037c <getKeyInput+0xd8>
 80002f4:	4a27      	ldr	r2, [pc, #156]	; (8000394 <getKeyInput+0xf0>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fc:	4927      	ldr	r1, [pc, #156]	; (800039c <getKeyInput+0xf8>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000304:	429a      	cmp	r2, r3
 8000306:	d139      	bne.n	800037c <getKeyInput+0xd8>
			if (KeyReg2[i] != KeyReg3[i]){
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <getKeyInput+0xf8>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4923      	ldr	r1, [pc, #140]	; (80003a0 <getKeyInput+0xfc>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d016      	beq.n	800034a <getKeyInput+0xa6>
				KeyReg3[i] = KeyReg2[i];
 800031c:	4a1f      	ldr	r2, [pc, #124]	; (800039c <getKeyInput+0xf8>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	491e      	ldr	r1, [pc, #120]	; (80003a0 <getKeyInput+0xfc>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <getKeyInput+0xf8>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d121      	bne.n	800037c <getKeyInput+0xd8>
					timeForKeyPressed[i] = 300/TICK;
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <getKeyInput+0x100>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	211e      	movs	r1, #30
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					doProcess(i);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff4a 	bl	80001dc <doProcess>
 8000348:	e018      	b.n	800037c <getKeyInput+0xd8>
				}
			}else {
				timeForKeyPressed[i]--;
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <getKeyInput+0x100>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4913      	ldr	r1, [pc, #76]	; (80003a4 <getKeyInput+0x100>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeForKeyPressed[i] ==0){
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <getKeyInput+0x100>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d109      	bne.n	800037c <getKeyInput+0xd8>
					KeyReg3[i] =NORMAL_STATE;
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <getKeyInput+0xfc>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2101      	movs	r1, #1
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeForKeyPressed[i] = 300/TICK;
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <getKeyInput+0x100>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	211e      	movs	r1, #30
 8000378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0; i<4; i++){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b03      	cmp	r3, #3
 8000386:	dd93      	ble.n	80002b0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000010 	.word	0x20000010
 8000398:	20000000 	.word	0x20000000
 800039c:	20000020 	.word	0x20000020
 80003a0:	20000030 	.word	0x20000030
 80003a4:	20000040 	.word	0x20000040

080003a8 <buzzerRun>:

TIM_HandleTypeDef htim3;

int buzzer_flag =0;

void buzzerRun(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	switch (buzzer_flag){
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <buzzerRun+0x74>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <buzzerRun+0x12>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d00b      	beq.n	80003d0 <buzzerRun+0x28>
			setTimer7(250);
		}

		break;
	default:
		break;
 80003b8:	e02d      	b.n	8000416 <buzzerRun+0x6e>
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <buzzerRun+0x78>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2200      	movs	r2, #0
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(10);
 80003c2:	200a      	movs	r0, #10
 80003c4:	f000 fd36 	bl	8000e34 <setTimer6>
		setTimer7(50);
 80003c8:	2032      	movs	r0, #50	; 0x32
 80003ca:	f000 fd4f 	bl	8000e6c <setTimer7>
		break;
 80003ce:	e022      	b.n	8000416 <buzzerRun+0x6e>
		if (timer6_flag == 1){
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <buzzerRun+0x7c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d112      	bne.n	80003fe <buzzerRun+0x56>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, (100 /(get_timer4_counter()/1000 +1)));
 80003d8:	f000 fd8e 	bl	8000ef8 <get_timer4_counter>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <buzzerRun+0x80>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	1192      	asrs	r2, r2, #6
 80003e6:	17db      	asrs	r3, r3, #31
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	3301      	adds	r3, #1
 80003ec:	2264      	movs	r2, #100	; 0x64
 80003ee:	fb92 f2f3 	sdiv	r2, r2, r3
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <buzzerRun+0x78>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer6(250);
 80003f8:	20fa      	movs	r0, #250	; 0xfa
 80003fa:	f000 fd1b 	bl	8000e34 <setTimer6>
		if (timer7_flag ==1){
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <buzzerRun+0x84>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d106      	bne.n	8000414 <buzzerRun+0x6c>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <buzzerRun+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer7(250);
 800040e:	20fa      	movs	r0, #250	; 0xfa
 8000410:	f000 fd2c 	bl	8000e6c <setTimer7>
		break;
 8000414:	bf00      	nop
	}
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000f8 	.word	0x200000f8
 8000420:	20000158 	.word	0x20000158
 8000424:	20000134 	.word	0x20000134
 8000428:	10624dd3 	.word	0x10624dd3
 800042c:	2000013c 	.word	0x2000013c

08000430 <modeRun>:
 */


#include "fsm_mode.h"

void modeRun(){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	switch(mode){
 8000434:	4baf      	ldr	r3, [pc, #700]	; (80006f4 <modeRun+0x2c4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b03      	cmp	r3, #3
 800043a:	f200 818c 	bhi.w	8000756 <modeRun+0x326>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <modeRun+0x14>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000455 	.word	0x08000455
 8000448:	0800045d 	.word	0x0800045d
 800044c:	08000471 	.word	0x08000471
 8000450:	080005bf 	.word	0x080005bf
	case INIT_MODE:
		mode = MODE_1;
 8000454:	4ba7      	ldr	r3, [pc, #668]	; (80006f4 <modeRun+0x2c4>)
 8000456:	2201      	movs	r2, #1
 8000458:	601a      	str	r2, [r3, #0]
		break;
 800045a:	e17c      	b.n	8000756 <modeRun+0x326>
	case MODE_1:
		if (isButton1Pressed()){
 800045c:	f7ff fe76 	bl	800014c <isButton1Pressed>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	f000 8172 	beq.w	800074c <modeRun+0x31c>
			mode = MODE_2;
 8000468:	4ba2      	ldr	r3, [pc, #648]	; (80006f4 <modeRun+0x2c4>)
 800046a:	2202      	movs	r2, #2
 800046c:	601a      	str	r2, [r3, #0]
		}
		break;
 800046e:	e16d      	b.n	800074c <modeRun+0x31c>
	case MODE_2:
		if (isButton1Pressed()){
 8000470:	f7ff fe6c 	bl	800014c <isButton1Pressed>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <modeRun+0x50>
			mode = MODE_3;
 800047a:	4b9e      	ldr	r3, [pc, #632]	; (80006f4 <modeRun+0x2c4>)
 800047c:	2203      	movs	r2, #3
 800047e:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 8000480:	f7ff fe76 	bl	8000170 <isButton2Pressed>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d046      	beq.n	8000518 <modeRun+0xe8>
			switch(state_1){
 800048a:	4b9b      	ldr	r3, [pc, #620]	; (80006f8 <modeRun+0x2c8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b0d      	cmp	r3, #13
 8000490:	d00e      	beq.n	80004b0 <modeRun+0x80>
 8000492:	2b0d      	cmp	r3, #13
 8000494:	dc1c      	bgt.n	80004d0 <modeRun+0xa0>
 8000496:	2b0b      	cmp	r3, #11
 8000498:	d002      	beq.n	80004a0 <modeRun+0x70>
 800049a:	2b0c      	cmp	r3, #12
 800049c:	d010      	beq.n	80004c0 <modeRun+0x90>
			case MAN_AMBER:
				state_1= MAN_RED;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 800049e:	e017      	b.n	80004d0 <modeRun+0xa0>
				state_1= MAN_GREEN;
 80004a0:	4b95      	ldr	r3, [pc, #596]	; (80006f8 <modeRun+0x2c8>)
 80004a2:	220d      	movs	r2, #13
 80004a4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004aa:	f000 fc53 	bl	8000d54 <setTimer2>
				break;
 80004ae:	e010      	b.n	80004d2 <modeRun+0xa2>
				state_1= MAN_AMBER;
 80004b0:	4b91      	ldr	r3, [pc, #580]	; (80006f8 <modeRun+0x2c8>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ba:	f000 fc4b 	bl	8000d54 <setTimer2>
				break;
 80004be:	e008      	b.n	80004d2 <modeRun+0xa2>
				state_1= MAN_RED;
 80004c0:	4b8d      	ldr	r3, [pc, #564]	; (80006f8 <modeRun+0x2c8>)
 80004c2:	220b      	movs	r2, #11
 80004c4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ca:	f000 fc43 	bl	8000d54 <setTimer2>
				break;
 80004ce:	e000      	b.n	80004d2 <modeRun+0xa2>
				break;
 80004d0:	bf00      	nop
			}

			switch(state_2){
 80004d2:	4b8a      	ldr	r3, [pc, #552]	; (80006fc <modeRun+0x2cc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b0d      	cmp	r3, #13
 80004d8:	d00e      	beq.n	80004f8 <modeRun+0xc8>
 80004da:	2b0d      	cmp	r3, #13
 80004dc:	dc1e      	bgt.n	800051c <modeRun+0xec>
 80004de:	2b0b      	cmp	r3, #11
 80004e0:	d002      	beq.n	80004e8 <modeRun+0xb8>
 80004e2:	2b0c      	cmp	r3, #12
 80004e4:	d010      	beq.n	8000508 <modeRun+0xd8>
			case MAN_AMBER:
				state_2= MAN_RED;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 80004e6:	e019      	b.n	800051c <modeRun+0xec>
				state_2= MAN_GREEN;
 80004e8:	4b84      	ldr	r3, [pc, #528]	; (80006fc <modeRun+0x2cc>)
 80004ea:	220d      	movs	r2, #13
 80004ec:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80004ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80004f2:	f000 fc4b 	bl	8000d8c <setTimer3>
				break;
 80004f6:	e012      	b.n	800051e <modeRun+0xee>
				state_2= MAN_AMBER;
 80004f8:	4b80      	ldr	r3, [pc, #512]	; (80006fc <modeRun+0x2cc>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80004fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000502:	f000 fc43 	bl	8000d8c <setTimer3>
				break;
 8000506:	e00a      	b.n	800051e <modeRun+0xee>
				state_2= MAN_RED;
 8000508:	4b7c      	ldr	r3, [pc, #496]	; (80006fc <modeRun+0x2cc>)
 800050a:	220b      	movs	r2, #11
 800050c:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800050e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000512:	f000 fc3b 	bl	8000d8c <setTimer3>
				break;
 8000516:	e002      	b.n	800051e <modeRun+0xee>
			}
		}
 8000518:	bf00      	nop
 800051a:	e000      	b.n	800051e <modeRun+0xee>
				break;
 800051c:	bf00      	nop

		if (isButton3Pressed()){
 800051e:	f7ff fe39 	bl	8000194 <isButton3Pressed>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d046      	beq.n	80005b6 <modeRun+0x186>
			switch(state_1){
 8000528:	4b73      	ldr	r3, [pc, #460]	; (80006f8 <modeRun+0x2c8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b0d      	cmp	r3, #13
 800052e:	d00e      	beq.n	800054e <modeRun+0x11e>
 8000530:	2b0d      	cmp	r3, #13
 8000532:	dc1c      	bgt.n	800056e <modeRun+0x13e>
 8000534:	2b0b      	cmp	r3, #11
 8000536:	d002      	beq.n	800053e <modeRun+0x10e>
 8000538:	2b0c      	cmp	r3, #12
 800053a:	d010      	beq.n	800055e <modeRun+0x12e>
			case MAN_AMBER:
				state_1=MAN_GREEN;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 800053c:	e017      	b.n	800056e <modeRun+0x13e>
				state_1=MAN_AMBER;
 800053e:	4b6e      	ldr	r3, [pc, #440]	; (80006f8 <modeRun+0x2c8>)
 8000540:	220c      	movs	r2, #12
 8000542:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000544:	f242 7010 	movw	r0, #10000	; 0x2710
 8000548:	f000 fc04 	bl	8000d54 <setTimer2>
				break;
 800054c:	e010      	b.n	8000570 <modeRun+0x140>
				state_1=MAN_RED;
 800054e:	4b6a      	ldr	r3, [pc, #424]	; (80006f8 <modeRun+0x2c8>)
 8000550:	220b      	movs	r2, #11
 8000552:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000554:	f242 7010 	movw	r0, #10000	; 0x2710
 8000558:	f000 fbfc 	bl	8000d54 <setTimer2>
				break;
 800055c:	e008      	b.n	8000570 <modeRun+0x140>
				state_1=MAN_GREEN;
 800055e:	4b66      	ldr	r3, [pc, #408]	; (80006f8 <modeRun+0x2c8>)
 8000560:	220d      	movs	r2, #13
 8000562:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000564:	f242 7010 	movw	r0, #10000	; 0x2710
 8000568:	f000 fbf4 	bl	8000d54 <setTimer2>
				break;
 800056c:	e000      	b.n	8000570 <modeRun+0x140>
				break;
 800056e:	bf00      	nop
			}

			switch(state_2){
 8000570:	4b62      	ldr	r3, [pc, #392]	; (80006fc <modeRun+0x2cc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b0d      	cmp	r3, #13
 8000576:	d00e      	beq.n	8000596 <modeRun+0x166>
 8000578:	2b0d      	cmp	r3, #13
 800057a:	dc1e      	bgt.n	80005ba <modeRun+0x18a>
 800057c:	2b0b      	cmp	r3, #11
 800057e:	d002      	beq.n	8000586 <modeRun+0x156>
 8000580:	2b0c      	cmp	r3, #12
 8000582:	d010      	beq.n	80005a6 <modeRun+0x176>
			case MAN_AMBER:
				state_2=MAN_GREEN;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 8000584:	e019      	b.n	80005ba <modeRun+0x18a>
				state_2=MAN_AMBER;
 8000586:	4b5d      	ldr	r3, [pc, #372]	; (80006fc <modeRun+0x2cc>)
 8000588:	220c      	movs	r2, #12
 800058a:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800058c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000590:	f000 fbfc 	bl	8000d8c <setTimer3>
				break;
 8000594:	e012      	b.n	80005bc <modeRun+0x18c>
				state_2=MAN_RED;
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <modeRun+0x2cc>)
 8000598:	220b      	movs	r2, #11
 800059a:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800059c:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a0:	f000 fbf4 	bl	8000d8c <setTimer3>
				break;
 80005a4:	e00a      	b.n	80005bc <modeRun+0x18c>
				state_2=MAN_GREEN;
 80005a6:	4b55      	ldr	r3, [pc, #340]	; (80006fc <modeRun+0x2cc>)
 80005a8:	220d      	movs	r2, #13
 80005aa:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80005ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80005b0:	f000 fbec 	bl	8000d8c <setTimer3>
				break;
 80005b4:	e002      	b.n	80005bc <modeRun+0x18c>
			}
		}
 80005b6:	bf00      	nop
 80005b8:	e0cd      	b.n	8000756 <modeRun+0x326>
				break;
 80005ba:	bf00      	nop
		break;
 80005bc:	e0cb      	b.n	8000756 <modeRun+0x326>
	case MODE_3:
		if (isButton1Pressed()){
 80005be:	f7ff fdc5 	bl	800014c <isButton1Pressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <modeRun+0x19e>
			mode = MODE_1;
 80005c8:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <modeRun+0x2c4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 80005ce:	f7ff fdcf 	bl	8000170 <isButton2Pressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d06a      	beq.n	80006ae <modeRun+0x27e>
			switch(state_1){
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <modeRun+0x2c8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b17      	cmp	r3, #23
 80005de:	d013      	beq.n	8000608 <modeRun+0x1d8>
 80005e0:	2b17      	cmp	r3, #23
 80005e2:	dc2f      	bgt.n	8000644 <modeRun+0x214>
 80005e4:	2b15      	cmp	r3, #21
 80005e6:	d002      	beq.n	80005ee <modeRun+0x1be>
 80005e8:	2b16      	cmp	r3, #22
 80005ea:	d01f      	beq.n	800062c <modeRun+0x1fc>
				state_1 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
				setTimer2(250);
				break;
			default:
				break;
 80005ec:	e02a      	b.n	8000644 <modeRun+0x214>
				state_1 =TUN_GREEN;
 80005ee:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <modeRun+0x2c8>)
 80005f0:	2217      	movs	r2, #23
 80005f2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <modeRun+0x2d0>)
 80005fc:	f001 fed7 	bl	80023ae <HAL_GPIO_WritePin>
				setTimer2(250);
 8000600:	20fa      	movs	r0, #250	; 0xfa
 8000602:	f000 fba7 	bl	8000d54 <setTimer2>
				break;
 8000606:	e01e      	b.n	8000646 <modeRun+0x216>
				state_1 =TUN_AMBER;
 8000608:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <modeRun+0x2c8>)
 800060a:	2216      	movs	r2, #22
 800060c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	483a      	ldr	r0, [pc, #232]	; (8000700 <modeRun+0x2d0>)
 8000616:	f001 feca 	bl	80023ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2108      	movs	r1, #8
 800061e:	4839      	ldr	r0, [pc, #228]	; (8000704 <modeRun+0x2d4>)
 8000620:	f001 fec5 	bl	80023ae <HAL_GPIO_WritePin>
				setTimer2(250);
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 fb95 	bl	8000d54 <setTimer2>
				break;
 800062a:	e00c      	b.n	8000646 <modeRun+0x216>
				state_1 =TUN_RED;
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <modeRun+0x2c8>)
 800062e:	2215      	movs	r2, #21
 8000630:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2108      	movs	r1, #8
 8000636:	4833      	ldr	r0, [pc, #204]	; (8000704 <modeRun+0x2d4>)
 8000638:	f001 feb9 	bl	80023ae <HAL_GPIO_WritePin>
				setTimer2(250);
 800063c:	20fa      	movs	r0, #250	; 0xfa
 800063e:	f000 fb89 	bl	8000d54 <setTimer2>
				break;
 8000642:	e000      	b.n	8000646 <modeRun+0x216>
				break;
 8000644:	bf00      	nop
			}

			switch(state_2){
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <modeRun+0x2cc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b17      	cmp	r3, #23
 800064c:	d012      	beq.n	8000674 <modeRun+0x244>
 800064e:	2b17      	cmp	r3, #23
 8000650:	dc2f      	bgt.n	80006b2 <modeRun+0x282>
 8000652:	2b15      	cmp	r3, #21
 8000654:	d002      	beq.n	800065c <modeRun+0x22c>
 8000656:	2b16      	cmp	r3, #22
 8000658:	d01d      	beq.n	8000696 <modeRun+0x266>
				state_2 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
				setTimer3(250);
				break;
			default:
				break;
 800065a:	e02a      	b.n	80006b2 <modeRun+0x282>
				state_2 =TUN_GREEN;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <modeRun+0x2cc>)
 800065e:	2217      	movs	r2, #23
 8000660:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4827      	ldr	r0, [pc, #156]	; (8000704 <modeRun+0x2d4>)
 8000668:	f001 fea1 	bl	80023ae <HAL_GPIO_WritePin>
				setTimer3(250);
 800066c:	20fa      	movs	r0, #250	; 0xfa
 800066e:	f000 fb8d 	bl	8000d8c <setTimer3>
				break;
 8000672:	e01f      	b.n	80006b4 <modeRun+0x284>
				state_2 =TUN_AMBER;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <modeRun+0x2cc>)
 8000676:	2216      	movs	r2, #22
 8000678:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <modeRun+0x2d4>)
 8000680:	f001 fe95 	bl	80023ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	481e      	ldr	r0, [pc, #120]	; (8000704 <modeRun+0x2d4>)
 800068a:	f001 fe90 	bl	80023ae <HAL_GPIO_WritePin>
				setTimer3(250);
 800068e:	20fa      	movs	r0, #250	; 0xfa
 8000690:	f000 fb7c 	bl	8000d8c <setTimer3>
				break;
 8000694:	e00e      	b.n	80006b4 <modeRun+0x284>
				state_2 =TUN_RED;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <modeRun+0x2cc>)
 8000698:	2215      	movs	r2, #21
 800069a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <modeRun+0x2d4>)
 80006a2:	f001 fe84 	bl	80023ae <HAL_GPIO_WritePin>
				setTimer3(250);
 80006a6:	20fa      	movs	r0, #250	; 0xfa
 80006a8:	f000 fb70 	bl	8000d8c <setTimer3>
				break;
 80006ac:	e002      	b.n	80006b4 <modeRun+0x284>
			}
		}
 80006ae:	bf00      	nop
 80006b0:	e000      	b.n	80006b4 <modeRun+0x284>
				break;
 80006b2:	bf00      	nop

		if (isButton3Pressed()){
 80006b4:	f7ff fd6e 	bl	8000194 <isButton3Pressed>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d048      	beq.n	8000750 <modeRun+0x320>
			switch (state_1){
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <modeRun+0x2c8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b17      	cmp	r3, #23
 80006c4:	d006      	beq.n	80006d4 <modeRun+0x2a4>
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	dc44      	bgt.n	8000754 <modeRun+0x324>
 80006ca:	2b15      	cmp	r3, #21
 80006cc:	d02e      	beq.n	800072c <modeRun+0x2fc>
 80006ce:	2b16      	cmp	r3, #22
 80006d0:	d01c      	beq.n	800070c <modeRun+0x2dc>
				if (redTime <99) redTime++;
				else redTime =1;
				uartRun();
				break;
			default:
				break;
 80006d2:	e03f      	b.n	8000754 <modeRun+0x324>
				if (greenTime <99) greenTime++;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <modeRun+0x2d8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b62      	cmp	r3, #98	; 0x62
 80006da:	dc05      	bgt.n	80006e8 <modeRun+0x2b8>
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <modeRun+0x2d8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a09      	ldr	r2, [pc, #36]	; (8000708 <modeRun+0x2d8>)
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e002      	b.n	80006ee <modeRun+0x2be>
				else greenTime =1;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <modeRun+0x2d8>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
				uartRun();
 80006ee:	f001 f9e3 	bl	8001ab8 <uartRun>
				break;
 80006f2:	e030      	b.n	8000756 <modeRun+0x326>
 80006f4:	20000104 	.word	0x20000104
 80006f8:	200000fc 	.word	0x200000fc
 80006fc:	20000100 	.word	0x20000100
 8000700:	40010800 	.word	0x40010800
 8000704:	40010c00 	.word	0x40010c00
 8000708:	20000058 	.word	0x20000058
				if (amberTime <99) amberTime++;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <modeRun+0x32c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b62      	cmp	r3, #98	; 0x62
 8000712:	dc05      	bgt.n	8000720 <modeRun+0x2f0>
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <modeRun+0x32c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <modeRun+0x32c>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	e002      	b.n	8000726 <modeRun+0x2f6>
				else amberTime =1;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <modeRun+0x32c>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
				uartRun();
 8000726:	f001 f9c7 	bl	8001ab8 <uartRun>
				break;
 800072a:	e014      	b.n	8000756 <modeRun+0x326>
				if (redTime <99) redTime++;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <modeRun+0x330>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b62      	cmp	r3, #98	; 0x62
 8000732:	dc05      	bgt.n	8000740 <modeRun+0x310>
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <modeRun+0x330>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <modeRun+0x330>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	e002      	b.n	8000746 <modeRun+0x316>
				else redTime =1;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <modeRun+0x330>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
				uartRun();
 8000746:	f001 f9b7 	bl	8001ab8 <uartRun>
				break;
 800074a:	e004      	b.n	8000756 <modeRun+0x326>
		break;
 800074c:	bf00      	nop
 800074e:	e002      	b.n	8000756 <modeRun+0x326>
			}
		}
 8000750:	bf00      	nop
 8000752:	e000      	b.n	8000756 <modeRun+0x326>
				break;
 8000754:	bf00      	nop
	}
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000054 	.word	0x20000054
 8000760:	20000050 	.word	0x20000050

08000764 <ledBlink>:
int mode = 0;
int redTime = 5;
int amberTime = 2;
int greenTime = 3;

void ledBlink(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if (timer1_flag ==1){
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <ledBlink+0x20>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d106      	bne.n	800077e <ledBlink+0x1a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000770:	2120      	movs	r1, #32
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <ledBlink+0x24>)
 8000774:	f001 fe33 	bl	80023de <HAL_GPIO_TogglePin>
		setTimer1(250);
 8000778:	20fa      	movs	r0, #250	; 0xfa
 800077a:	f000 facf 	bl	8000d1c <setTimer1>
	}
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000010c 	.word	0x2000010c
 8000788:	40010800 	.word	0x40010800

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f001 fa52 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f82a 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f956 	bl	8000a48 <MX_GPIO_Init>
  MX_TIM2_Init();
 800079c:	f000 f868 	bl	8000870 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 f928 	bl	80009f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007a4:	f000 f8b0 	bl	8000908 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <main+0x58>)
 80007aa:	f002 fa9b 	bl	8002ce4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ae:	2100      	movs	r1, #0
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <main+0x5c>)
 80007b2:	f002 fb41 	bl	8002e38 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timerInit();
 80007b6:	f000 fbad 	bl	8000f14 <timerInit>
  while (1)
  {
	  ledBlink();
 80007ba:	f7ff ffd3 	bl	8000764 <ledBlink>
	  modeRun();
 80007be:	f7ff fe37 	bl	8000430 <modeRun>
	  pedes_light_fsm();
 80007c2:	f000 f9c1 	bl	8000b48 <pedes_light_fsm>
	  fsm_automatic_run1();
 80007c6:	f000 fdcd 	bl	8001364 <fsm_automatic_run1>
	  fsm_automatic_run2();
 80007ca:	f000 fe79 	bl	80014c0 <fsm_automatic_run2>
	  fsm_manual_run1();
 80007ce:	f000 ff21 	bl	8001614 <fsm_manual_run1>
	  fsm_manual_run2();
 80007d2:	f000 ffd5 	bl	8001780 <fsm_manual_run2>
	  fsm_tuning_run1();
 80007d6:	f001 f87b 	bl	80018d0 <fsm_tuning_run1>
	  fsm_tuning_run2();
 80007da:	f001 f8f5 	bl	80019c8 <fsm_tuning_run2>
	  buzzerRun();
 80007de:	f7ff fde3 	bl	80003a8 <buzzerRun>
	  ledBlink();
 80007e2:	e7ea      	b.n	80007ba <main+0x2e>
 80007e4:	200001a0 	.word	0x200001a0
 80007e8:	20000158 	.word	0x20000158

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	; 0x40
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fe82 	bl	8004504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800081e:	2300      	movs	r3, #0
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000822:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fdef 	bl	8002410 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000838:	f000 f980 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f85a 	bl	8002910 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000862:	f000 f96b 	bl	8000b3c <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3740      	adds	r7, #64	; 0x40
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_TIM2_Init+0x94>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_TIM2_Init+0x94>)
 8000896:	f242 720f 	movw	r2, #9999	; 0x270f
 800089a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_TIM2_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM2_Init+0x94>)
 80008a4:	223f      	movs	r2, #63	; 0x3f
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_TIM2_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b6:	f002 f9c5 	bl	8002c44 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c0:	f000 f93c 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM2_Init+0x94>)
 80008d2:	f002 fd19 	bl	8003308 <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f92e 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM2_Init+0x94>)
 80008ee:	f003 f897 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f920 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200001a0 	.word	0x200001a0

08000908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <MX_TIM3_Init+0xe4>)
 800093a:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <MX_TIM3_Init+0xe8>)
 800093c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000940:	223f      	movs	r2, #63	; 0x3f
 8000942:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_TIM3_Init+0xe4>)
 800094c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_TIM3_Init+0xe4>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800095e:	4823      	ldr	r0, [pc, #140]	; (80009ec <MX_TIM3_Init+0xe4>)
 8000960:	f002 f970 	bl	8002c44 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800096a:	f000 f8e7 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000978:	4619      	mov	r1, r3
 800097a:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_TIM3_Init+0xe4>)
 800097c:	f002 fcc4 	bl	8003308 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000986:	f000 f8d9 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098a:	4818      	ldr	r0, [pc, #96]	; (80009ec <MX_TIM3_Init+0xe4>)
 800098c:	f002 f9fc 	bl	8002d88 <HAL_TIM_PWM_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000996:	f000 f8d1 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	4619      	mov	r1, r3
 80009a8:	4810      	ldr	r0, [pc, #64]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009aa:	f003 f839 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009b4:	f000 f8c2 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b8:	2360      	movs	r3, #96	; 0x60
 80009ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009d0:	f002 fbdc 	bl	800318c <HAL_TIM_PWM_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009da:	f000 f8af 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <MX_TIM3_Init+0xe4>)
 80009e0:	f000 fbc4 	bl	800116c <HAL_TIM_MspPostInit>

}
 80009e4:	bf00      	nop
 80009e6:	3738      	adds	r7, #56	; 0x38
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000158 	.word	0x20000158
 80009f0:	40000400 	.word	0x40000400

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f003 f868 	bl	8003b00 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f881 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001f4 	.word	0x200001f4
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_GPIO_Init+0xd0>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000a92:	4822      	ldr	r0, [pc, #136]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000a94:	f001 fc8b 	bl	80023ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a9e:	4820      	ldr	r0, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000aa0:	f001 fc85 	bl	80023ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDES_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDES_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000aa4:	2313      	movs	r3, #19
 8000aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000ab8:	f001 fade 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin PLED_GREEN_Pin TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin;
 8000abc:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_GPIO_Init+0xd4>)
 8000ad6:	f001 facf 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000ada:	2301      	movs	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000aee:	f001 fac3 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLED_RED_Pin TRAFFIC1_0_Pin TRAFFIC2_0_Pin TRAFFIC2_1_Pin */
  GPIO_InitStruct.Pin = PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin;
 8000af2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0xd8>)
 8000b0c:	f001 fab4 	bl	8002078 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000b2c:	f000 fa0e 	bl	8000f4c <timerRun>
	getKeyInput();
 8000b30:	f7ff fbb8 	bl	80002a4 <getKeyInput>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <pedes_light_fsm>:
#include "pedestrian_light.h"

int pedes_state = PEDES_INIT;
int pedes_flag =0;

void pedes_light_fsm(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	switch(pedes_state){
 8000b4c:	4b68      	ldr	r3, [pc, #416]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	f200 80c3 	bhi.w	8000cdc <pedes_light_fsm+0x194>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <pedes_light_fsm+0x14>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000c81 	.word	0x08000c81
 8000b68:	08000c1f 	.word	0x08000c1f
	case PEDES_INIT:
		pedes_state = PEDES_OFF;
 8000b6c:	4b60      	ldr	r3, [pc, #384]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

		break;
 8000b72:	e0ba      	b.n	8000cea <pedes_light_fsm+0x1a2>
	case PEDES_OFF:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	485e      	ldr	r0, [pc, #376]	; (8000cf4 <pedes_light_fsm+0x1ac>)
 8000b7c:	f001 fc17 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	485c      	ldr	r0, [pc, #368]	; (8000cf8 <pedes_light_fsm+0x1b0>)
 8000b88:	f001 fc11 	bl	80023ae <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_OFF;
 8000b8c:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <pedes_light_fsm+0x1b4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]

		if (isButtonPedesPressed()){
 8000b92:	f7ff fb11 	bl	80001b8 <isButtonPedesPressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 80a1 	beq.w	8000ce0 <pedes_light_fsm+0x198>
			if (state_1 == AUTO_RED){
 8000b9e:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <pedes_light_fsm+0x1b8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d109      	bne.n	8000bba <pedes_light_fsm+0x72>
				setTimer4(get_timer2_counter());
 8000ba6:	f000 f999 	bl	8000edc <get_timer2_counter>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f909 	bl	8000dc4 <setTimer4>
				pedes_state = PEDES_GREEN;
 8000bb2:	4b4f      	ldr	r3, [pc, #316]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e021      	b.n	8000bfe <pedes_light_fsm+0xb6>
			}else if (state_1 == AUTO_GREEN){
 8000bba:	4b51      	ldr	r3, [pc, #324]	; (8000d00 <pedes_light_fsm+0x1b8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d110      	bne.n	8000be4 <pedes_light_fsm+0x9c>
				setTimer4(get_timer2_counter() + amberTime*1000);
 8000bc2:	f000 f98b 	bl	8000edc <get_timer2_counter>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <pedes_light_fsm+0x1bc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd0:	fb01 f303 	mul.w	r3, r1, r3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f8f4 	bl	8000dc4 <setTimer4>
				pedes_state = PEDES_RED;
 8000bdc:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e00c      	b.n	8000bfe <pedes_light_fsm+0xb6>
			}else if (state_1 == AUTO_AMBER){
 8000be4:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <pedes_light_fsm+0x1b8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d108      	bne.n	8000bfe <pedes_light_fsm+0xb6>
				setTimer4(get_timer2_counter());
 8000bec:	f000 f976 	bl	8000edc <get_timer2_counter>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f8e6 	bl	8000dc4 <setTimer4>
				pedes_state = PEDES_RED;
 8000bf8:	4b3d      	ldr	r3, [pc, #244]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	601a      	str	r2, [r3, #0]
			}

			setTimer5((redTime + amberTime + greenTime) *2000);
 8000bfe:	4b42      	ldr	r3, [pc, #264]	; (8000d08 <pedes_light_fsm+0x1c0>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <pedes_light_fsm+0x1bc>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	441a      	add	r2, r3
 8000c08:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <pedes_light_fsm+0x1c4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c12:	fb02 f303 	mul.w	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f8f0 	bl	8000dfc <setTimer5>
		}
		break;
 8000c1c:	e060      	b.n	8000ce0 <pedes_light_fsm+0x198>
	case PEDES_GREEN:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	4833      	ldr	r0, [pc, #204]	; (8000cf4 <pedes_light_fsm+0x1ac>)
 8000c26:	f001 fbc2 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	4831      	ldr	r0, [pc, #196]	; (8000cf8 <pedes_light_fsm+0x1b0>)
 8000c32:	f001 fbbc 	bl	80023ae <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_ON;
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <pedes_light_fsm+0x1b4>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

		if (timer4_flag ==1){
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <pedes_light_fsm+0x1c8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10e      	bne.n	8000c62 <pedes_light_fsm+0x11a>
			pedes_state = PEDES_RED;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	601a      	str	r2, [r3, #0]
			setTimer4((greenTime +amberTime) *1000);
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <pedes_light_fsm+0x1c4>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <pedes_light_fsm+0x1bc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f8b1 	bl	8000dc4 <setTimer4>
		}
		if (timer5_flag ==1){
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <pedes_light_fsm+0x1cc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d102      	bne.n	8000c70 <pedes_light_fsm+0x128>
			pedes_state = PEDES_OFF;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
		}

		if (mode != MODE_1){
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <pedes_light_fsm+0x1d0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d035      	beq.n	8000ce4 <pedes_light_fsm+0x19c>
			pedes_state = PEDES_OFF;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c7e:	e031      	b.n	8000ce4 <pedes_light_fsm+0x19c>
	case PEDES_RED:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	481b      	ldr	r0, [pc, #108]	; (8000cf4 <pedes_light_fsm+0x1ac>)
 8000c88:	f001 fb91 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	4819      	ldr	r0, [pc, #100]	; (8000cf8 <pedes_light_fsm+0x1b0>)
 8000c94:	f001 fb8b 	bl	80023ae <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_OFF;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <pedes_light_fsm+0x1b4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]

		if (timer4_flag ==1){
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <pedes_light_fsm+0x1c8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10b      	bne.n	8000cbe <pedes_light_fsm+0x176>
			pedes_state = PEDES_GREEN;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000ca8:	2203      	movs	r2, #3
 8000caa:	601a      	str	r2, [r3, #0]
			setTimer4(redTime *1000);
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <pedes_light_fsm+0x1c0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f883 	bl	8000dc4 <setTimer4>
		}
		if (timer5_flag ==1){
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <pedes_light_fsm+0x1cc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d102      	bne.n	8000ccc <pedes_light_fsm+0x184>
			pedes_state = PEDES_OFF;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
		}

		if (mode != MODE_1){
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <pedes_light_fsm+0x1d0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d009      	beq.n	8000ce8 <pedes_light_fsm+0x1a0>
			pedes_state = PEDES_OFF;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <pedes_light_fsm+0x1a8>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000cda:	e005      	b.n	8000ce8 <pedes_light_fsm+0x1a0>
	default:
		break;
 8000cdc:	bf00      	nop
 8000cde:	e004      	b.n	8000cea <pedes_light_fsm+0x1a2>
		break;
 8000ce0:	bf00      	nop
 8000ce2:	e002      	b.n	8000cea <pedes_light_fsm+0x1a2>
		break;
 8000ce4:	bf00      	nop
 8000ce6:	e000      	b.n	8000cea <pedes_light_fsm+0x1a2>
		break;
 8000ce8:	bf00      	nop
	}
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000108 	.word	0x20000108
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00
 8000cfc:	200000f8 	.word	0x200000f8
 8000d00:	200000fc 	.word	0x200000fc
 8000d04:	20000054 	.word	0x20000054
 8000d08:	20000050 	.word	0x20000050
 8000d0c:	20000058 	.word	0x20000058
 8000d10:	20000124 	.word	0x20000124
 8000d14:	2000012c 	.word	0x2000012c
 8000d18:	20000104 	.word	0x20000104

08000d1c <setTimer1>:
int timer7_counter =0;

int timer8_flag =0;
int timer8_counter =0;

void setTimer1(int duration){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <setTimer1+0x2c>)
 8000d28:	fb82 1203 	smull	r1, r2, r2, r3
 8000d2c:	1092      	asrs	r2, r2, #2
 8000d2e:	17db      	asrs	r3, r3, #31
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <setTimer1+0x30>)
 8000d34:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <setTimer1+0x34>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	66666667 	.word	0x66666667
 8000d4c:	20000110 	.word	0x20000110
 8000d50:	2000010c 	.word	0x2000010c

08000d54 <setTimer2>:

void setTimer2(int duration){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <setTimer2+0x2c>)
 8000d60:	fb82 1203 	smull	r1, r2, r2, r3
 8000d64:	1092      	asrs	r2, r2, #2
 8000d66:	17db      	asrs	r3, r3, #31
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <setTimer2+0x30>)
 8000d6c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <setTimer2+0x34>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	66666667 	.word	0x66666667
 8000d84:	20000118 	.word	0x20000118
 8000d88:	20000114 	.word	0x20000114

08000d8c <setTimer3>:
void setTimer3(int duration){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <setTimer3+0x2c>)
 8000d98:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9c:	1092      	asrs	r2, r2, #2
 8000d9e:	17db      	asrs	r3, r3, #31
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <setTimer3+0x30>)
 8000da4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <setTimer3+0x34>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	66666667 	.word	0x66666667
 8000dbc:	20000120 	.word	0x20000120
 8000dc0:	2000011c 	.word	0x2000011c

08000dc4 <setTimer4>:
void setTimer4(int duration){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <setTimer4+0x2c>)
 8000dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd4:	1092      	asrs	r2, r2, #2
 8000dd6:	17db      	asrs	r3, r3, #31
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <setTimer4+0x30>)
 8000ddc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <setTimer4+0x34>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	66666667 	.word	0x66666667
 8000df4:	20000128 	.word	0x20000128
 8000df8:	20000124 	.word	0x20000124

08000dfc <setTimer5>:
void setTimer5(int duration){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <setTimer5+0x2c>)
 8000e08:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0c:	1092      	asrs	r2, r2, #2
 8000e0e:	17db      	asrs	r3, r3, #31
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <setTimer5+0x30>)
 8000e14:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <setTimer5+0x34>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	66666667 	.word	0x66666667
 8000e2c:	20000130 	.word	0x20000130
 8000e30:	2000012c 	.word	0x2000012c

08000e34 <setTimer6>:
void setTimer6(int duration){
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <setTimer6+0x2c>)
 8000e40:	fb82 1203 	smull	r1, r2, r2, r3
 8000e44:	1092      	asrs	r2, r2, #2
 8000e46:	17db      	asrs	r3, r3, #31
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <setTimer6+0x30>)
 8000e4c:	6013      	str	r3, [r2, #0]
	timer6_flag =0;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <setTimer6+0x34>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	66666667 	.word	0x66666667
 8000e64:	20000138 	.word	0x20000138
 8000e68:	20000134 	.word	0x20000134

08000e6c <setTimer7>:
void setTimer7(int duration){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <setTimer7+0x2c>)
 8000e78:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7c:	1092      	asrs	r2, r2, #2
 8000e7e:	17db      	asrs	r3, r3, #31
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <setTimer7+0x30>)
 8000e84:	6013      	str	r3, [r2, #0]
	timer7_flag =0;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <setTimer7+0x34>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	20000140 	.word	0x20000140
 8000ea0:	2000013c 	.word	0x2000013c

08000ea4 <setTimer8>:
void setTimer8(int duration){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <setTimer8+0x2c>)
 8000eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb4:	1092      	asrs	r2, r2, #2
 8000eb6:	17db      	asrs	r3, r3, #31
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <setTimer8+0x30>)
 8000ebc:	6013      	str	r3, [r2, #0]
	timer8_flag =0;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <setTimer8+0x34>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	66666667 	.word	0x66666667
 8000ed4:	20000148 	.word	0x20000148
 8000ed8:	20000144 	.word	0x20000144

08000edc <get_timer2_counter>:

int get_timer2_counter(){
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return timer2_counter*TICK;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <get_timer2_counter+0x18>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	20000118 	.word	0x20000118

08000ef8 <get_timer4_counter>:

int get_timer4_counter(){
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return timer4_counter*TICK;
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <get_timer4_counter+0x18>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000128 	.word	0x20000128

08000f14 <timerInit>:

void timerInit(){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	setTimer1(30);
 8000f18:	201e      	movs	r0, #30
 8000f1a:	f7ff feff 	bl	8000d1c <setTimer1>
	setTimer2(50);
 8000f1e:	2032      	movs	r0, #50	; 0x32
 8000f20:	f7ff ff18 	bl	8000d54 <setTimer2>
	setTimer3(70);
 8000f24:	2046      	movs	r0, #70	; 0x46
 8000f26:	f7ff ff31 	bl	8000d8c <setTimer3>
	setTimer4(110);
 8000f2a:	206e      	movs	r0, #110	; 0x6e
 8000f2c:	f7ff ff4a 	bl	8000dc4 <setTimer4>
	setTimer5(130);
 8000f30:	2082      	movs	r0, #130	; 0x82
 8000f32:	f7ff ff63 	bl	8000dfc <setTimer5>
	setTimer6(170);
 8000f36:	20aa      	movs	r0, #170	; 0xaa
 8000f38:	f7ff ff7c 	bl	8000e34 <setTimer6>
	setTimer7(190);
 8000f3c:	20be      	movs	r0, #190	; 0xbe
 8000f3e:	f7ff ff95 	bl	8000e6c <setTimer7>
	setTimer8(230);
 8000f42:	20e6      	movs	r0, #230	; 0xe6
 8000f44:	f7ff ffae 	bl	8000ea4 <setTimer8>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <timerRun>:

void timerRun(){
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000f50:	4b41      	ldr	r3, [pc, #260]	; (8001058 <timerRun+0x10c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dd0b      	ble.n	8000f70 <timerRun+0x24>
		timer1_counter--;
 8000f58:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <timerRun+0x10c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	4a3e      	ldr	r2, [pc, #248]	; (8001058 <timerRun+0x10c>)
 8000f60:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000f62:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <timerRun+0x10c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dc02      	bgt.n	8000f70 <timerRun+0x24>
			timer1_flag = 1;
 8000f6a:	4b3c      	ldr	r3, [pc, #240]	; (800105c <timerRun+0x110>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <timerRun+0x114>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	dd0b      	ble.n	8000f90 <timerRun+0x44>
		timer2_counter--;
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <timerRun+0x114>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a38      	ldr	r2, [pc, #224]	; (8001060 <timerRun+0x114>)
 8000f80:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <timerRun+0x114>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	dc02      	bgt.n	8000f90 <timerRun+0x44>
			timer2_flag = 1;
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <timerRun+0x118>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000f90:	4b35      	ldr	r3, [pc, #212]	; (8001068 <timerRun+0x11c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dd0b      	ble.n	8000fb0 <timerRun+0x64>
		timer3_counter--;
 8000f98:	4b33      	ldr	r3, [pc, #204]	; (8001068 <timerRun+0x11c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	4a32      	ldr	r2, [pc, #200]	; (8001068 <timerRun+0x11c>)
 8000fa0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <timerRun+0x11c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	dc02      	bgt.n	8000fb0 <timerRun+0x64>
			timer3_flag = 1;
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <timerRun+0x120>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <timerRun+0x124>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd0b      	ble.n	8000fd0 <timerRun+0x84>
		timer4_counter--;
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <timerRun+0x124>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <timerRun+0x124>)
 8000fc0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <timerRun+0x124>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	dc02      	bgt.n	8000fd0 <timerRun+0x84>
			timer4_flag = 1;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <timerRun+0x128>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <timerRun+0x12c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dd0b      	ble.n	8000ff0 <timerRun+0xa4>
		timer5_counter--;
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <timerRun+0x12c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a26      	ldr	r2, [pc, #152]	; (8001078 <timerRun+0x12c>)
 8000fe0:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <timerRun+0x12c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dc02      	bgt.n	8000ff0 <timerRun+0xa4>
			timer5_flag = 1;
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <timerRun+0x130>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <timerRun+0x134>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dd0b      	ble.n	8001010 <timerRun+0xc4>
		timer6_counter--;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <timerRun+0x134>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	4a20      	ldr	r2, [pc, #128]	; (8001080 <timerRun+0x134>)
 8001000:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <timerRun+0x134>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	dc02      	bgt.n	8001010 <timerRun+0xc4>
			timer6_flag = 1;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <timerRun+0x138>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0){
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <timerRun+0x13c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd0b      	ble.n	8001030 <timerRun+0xe4>
		timer7_counter--;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <timerRun+0x13c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <timerRun+0x13c>)
 8001020:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0){
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <timerRun+0x13c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	dc02      	bgt.n	8001030 <timerRun+0xe4>
			timer7_flag = 1;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <timerRun+0x140>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer8_counter > 0){
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <timerRun+0x144>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	dd0b      	ble.n	8001050 <timerRun+0x104>
		timer8_counter--;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <timerRun+0x144>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <timerRun+0x144>)
 8001040:	6013      	str	r3, [r2, #0]
		if(timer8_counter <= 0){
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <timerRun+0x144>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dc02      	bgt.n	8001050 <timerRun+0x104>
			timer8_flag = 1;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <timerRun+0x148>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000110 	.word	0x20000110
 800105c:	2000010c 	.word	0x2000010c
 8001060:	20000118 	.word	0x20000118
 8001064:	20000114 	.word	0x20000114
 8001068:	20000120 	.word	0x20000120
 800106c:	2000011c 	.word	0x2000011c
 8001070:	20000128 	.word	0x20000128
 8001074:	20000124 	.word	0x20000124
 8001078:	20000130 	.word	0x20000130
 800107c:	2000012c 	.word	0x2000012c
 8001080:	20000138 	.word	0x20000138
 8001084:	20000134 	.word	0x20000134
 8001088:	20000140 	.word	0x20000140
 800108c:	2000013c 	.word	0x2000013c
 8001090:	20000148 	.word	0x20000148
 8001094:	20000144 	.word	0x20000144

08001098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_MspInit+0x5c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x5c>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_MspInit+0x60>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_MspInit+0x60>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000

080010fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d114      	bne.n	8001138 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	201c      	movs	r0, #28
 800112c:	f000 febd 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001130:	201c      	movs	r0, #28
 8001132:	f000 fed6 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001136:	e010      	b.n	800115a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_TIM_Base_MspInit+0x6c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10b      	bne.n	800115a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40000400 	.word	0x40000400

0800116c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_TIM_MspPostInit+0x58>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d117      	bne.n	80011bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_TIM_MspPostInit+0x5c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_TIM_MspPostInit+0x5c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_TIM_MspPostInit+0x5c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <HAL_TIM_MspPostInit+0x60>)
 80011b8:	f000 ff5e 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40000400 	.word	0x40000400
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010800 	.word	0x40010800

080011d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_UART_MspInit+0x98>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d137      	bne.n	8001260 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_UART_MspInit+0x9c>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <HAL_UART_MspInit+0x9c>)
 80011f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fa:	61d3      	str	r3, [r2, #28]
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_UART_MspInit+0x9c>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_UART_MspInit+0x9c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_UART_MspInit+0x9c>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_UART_MspInit+0x9c>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001220:	2304      	movs	r3, #4
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480f      	ldr	r0, [pc, #60]	; (8001270 <HAL_UART_MspInit+0xa0>)
 8001234:	f000 ff20 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001238:	2308      	movs	r3, #8
 800123a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4619      	mov	r1, r3
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <HAL_UART_MspInit+0xa0>)
 800124c:	f000 ff14 	bl	8002078 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2026      	movs	r0, #38	; 0x26
 8001256:	f000 fe28 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800125a:	2026      	movs	r0, #38	; 0x26
 800125c:	f000 fe41 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40004400 	.word	0x40004400
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <NMI_Handler+0x4>

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ba:	f000 fd03 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <TIM2_IRQHandler+0x10>)
 80012ca:	f001 fe57 	bl	8002f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001a0 	.word	0x200001a0

080012d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <USART2_IRQHandler+0x10>)
 80012de:	f002 fcef 	bl	8003cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001f4 	.word	0x200001f4

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d207      	bcs.n	800132c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800131c:	f003 f8c8 	bl	80044b0 <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	220c      	movs	r2, #12
 8001324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e009      	b.n	8001340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <_sbrk+0x64>)
 800133c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20005000 	.word	0x20005000
 800134c:	00000400 	.word	0x00000400
 8001350:	2000014c 	.word	0x2000014c
 8001354:	20000250 	.word	0x20000250

08001358 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <fsm_automatic_run1>:
 *      Author: duyvt
 */

#include "traffic_automatic.h"

void fsm_automatic_run1(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	switch(state_1){
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <fsm_automatic_run1+0x13c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b03      	cmp	r3, #3
 800136e:	f200 808d 	bhi.w	800148c <fsm_automatic_run1+0x128>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <fsm_automatic_run1+0x14>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	08001389 	.word	0x08001389
 800137c:	080013a3 	.word	0x080013a3
 8001380:	0800143f 	.word	0x0800143f
 8001384:	080013f1 	.word	0x080013f1
	case INIT:
		state_1 = AUTO_RED;
 8001388:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <fsm_automatic_run1+0x13c>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
		setTimer2(redTime*1000);
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <fsm_automatic_run1+0x140>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fcda 	bl	8000d54 <setTimer2>
		break;
 80013a0:	e07b      	b.n	800149a <fsm_automatic_run1+0x136>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a8:	483f      	ldr	r0, [pc, #252]	; (80014a8 <fsm_automatic_run1+0x144>)
 80013aa:	f001 f800 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2108      	movs	r1, #8
 80013b2:	483e      	ldr	r0, [pc, #248]	; (80014ac <fsm_automatic_run1+0x148>)
 80013b4:	f000 fffb 	bl	80023ae <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <fsm_automatic_run1+0x14c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10b      	bne.n	80013d8 <fsm_automatic_run1+0x74>
			state_1 = AUTO_GREEN;
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <fsm_automatic_run1+0x13c>)
 80013c2:	2203      	movs	r2, #3
 80013c4:	601a      	str	r2, [r3, #0]
			setTimer2(greenTime*1000);
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <fsm_automatic_run1+0x150>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fcbe 	bl	8000d54 <setTimer2>
		}

		if (mode == MODE_2){
 80013d8:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <fsm_automatic_run1+0x154>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d157      	bne.n	8001490 <fsm_automatic_run1+0x12c>
			state_1 = MAN_RED;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <fsm_automatic_run1+0x13c>)
 80013e2:	220b      	movs	r2, #11
 80013e4:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 80013e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80013ea:	f7ff fcb3 	bl	8000d54 <setTimer2>
		}
		break;
 80013ee:	e04f      	b.n	8001490 <fsm_automatic_run1+0x12c>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f6:	482c      	ldr	r0, [pc, #176]	; (80014a8 <fsm_automatic_run1+0x144>)
 80013f8:	f000 ffd9 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2108      	movs	r1, #8
 8001400:	482a      	ldr	r0, [pc, #168]	; (80014ac <fsm_automatic_run1+0x148>)
 8001402:	f000 ffd4 	bl	80023ae <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <fsm_automatic_run1+0x14c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10b      	bne.n	8001426 <fsm_automatic_run1+0xc2>
			state_1 = AUTO_AMBER;
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <fsm_automatic_run1+0x13c>)
 8001410:	2202      	movs	r2, #2
 8001412:	601a      	str	r2, [r3, #0]
			setTimer2(amberTime*1000);
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <fsm_automatic_run1+0x158>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fc97 	bl	8000d54 <setTimer2>
		}

		if (mode == MODE_2){
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <fsm_automatic_run1+0x154>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d132      	bne.n	8001494 <fsm_automatic_run1+0x130>
			state_1 = MAN_RED;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <fsm_automatic_run1+0x13c>)
 8001430:	220b      	movs	r2, #11
 8001432:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8001434:	f242 7010 	movw	r0, #10000	; 0x2710
 8001438:	f7ff fc8c 	bl	8000d54 <setTimer2>
		}
		break;
 800143c:	e02a      	b.n	8001494 <fsm_automatic_run1+0x130>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001444:	4818      	ldr	r0, [pc, #96]	; (80014a8 <fsm_automatic_run1+0x144>)
 8001446:	f000 ffb2 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 800144a:	2201      	movs	r2, #1
 800144c:	2108      	movs	r1, #8
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <fsm_automatic_run1+0x148>)
 8001450:	f000 ffad 	bl	80023ae <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <fsm_automatic_run1+0x14c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d10b      	bne.n	8001474 <fsm_automatic_run1+0x110>
			state_1 = AUTO_RED;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <fsm_automatic_run1+0x13c>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <fsm_automatic_run1+0x140>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc70 	bl	8000d54 <setTimer2>
		}

		if (mode == MODE_2){
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <fsm_automatic_run1+0x154>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d10d      	bne.n	8001498 <fsm_automatic_run1+0x134>
			state_1 = MAN_RED;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <fsm_automatic_run1+0x13c>)
 800147e:	220b      	movs	r2, #11
 8001480:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8001482:	f242 7010 	movw	r0, #10000	; 0x2710
 8001486:	f7ff fc65 	bl	8000d54 <setTimer2>
		}
		break;
 800148a:	e005      	b.n	8001498 <fsm_automatic_run1+0x134>
	default:
		break;
 800148c:	bf00      	nop
 800148e:	e004      	b.n	800149a <fsm_automatic_run1+0x136>
		break;
 8001490:	bf00      	nop
 8001492:	e002      	b.n	800149a <fsm_automatic_run1+0x136>
		break;
 8001494:	bf00      	nop
 8001496:	e000      	b.n	800149a <fsm_automatic_run1+0x136>
		break;
 8001498:	bf00      	nop
	}
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000fc 	.word	0x200000fc
 80014a4:	20000050 	.word	0x20000050
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	20000114 	.word	0x20000114
 80014b4:	20000058 	.word	0x20000058
 80014b8:	20000104 	.word	0x20000104
 80014bc:	20000054 	.word	0x20000054

080014c0 <fsm_automatic_run2>:

void fsm_automatic_run2(){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	switch(state_2){
 80014c4:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <fsm_automatic_run2+0x138>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	f200 808c 	bhi.w	80015e6 <fsm_automatic_run2+0x126>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <fsm_automatic_run2+0x14>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	0800159b 	.word	0x0800159b
 80014dc:	0800154f 	.word	0x0800154f
 80014e0:	080014ff 	.word	0x080014ff
	case INIT:
		state_2 = AUTO_GREEN;
 80014e4:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <fsm_automatic_run2+0x138>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	601a      	str	r2, [r3, #0]
		setTimer3(greenTime*1000);
 80014ea:	4b44      	ldr	r3, [pc, #272]	; (80015fc <fsm_automatic_run2+0x13c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc48 	bl	8000d8c <setTimer3>
		break;
 80014fc:	e07a      	b.n	80015f4 <fsm_automatic_run2+0x134>
	case AUTO_GREEN:
		ledBlink();
 80014fe:	f7ff f931 	bl	8000764 <ledBlink>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2120      	movs	r1, #32
 8001506:	483e      	ldr	r0, [pc, #248]	; (8001600 <fsm_automatic_run2+0x140>)
 8001508:	f000 ff51 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 800150c:	2201      	movs	r2, #1
 800150e:	2110      	movs	r1, #16
 8001510:	483b      	ldr	r0, [pc, #236]	; (8001600 <fsm_automatic_run2+0x140>)
 8001512:	f000 ff4c 	bl	80023ae <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <fsm_automatic_run2+0x144>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d10b      	bne.n	8001536 <fsm_automatic_run2+0x76>
			state_2 = AUTO_AMBER;
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <fsm_automatic_run2+0x138>)
 8001520:	2202      	movs	r2, #2
 8001522:	601a      	str	r2, [r3, #0]
			setTimer3(amberTime*1000);
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <fsm_automatic_run2+0x148>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fc2b 	bl	8000d8c <setTimer3>
		}

		if (mode == MODE_2){
 8001536:	4b35      	ldr	r3, [pc, #212]	; (800160c <fsm_automatic_run2+0x14c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d155      	bne.n	80015ea <fsm_automatic_run2+0x12a>
			state_2 = MAN_GREEN;
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <fsm_automatic_run2+0x138>)
 8001540:	220d      	movs	r2, #13
 8001542:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8001544:	f242 7010 	movw	r0, #10000	; 0x2710
 8001548:	f7ff fc20 	bl	8000d8c <setTimer3>
		}
		break;
 800154c:	e04d      	b.n	80015ea <fsm_automatic_run2+0x12a>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 800154e:	2201      	movs	r2, #1
 8001550:	2110      	movs	r1, #16
 8001552:	482b      	ldr	r0, [pc, #172]	; (8001600 <fsm_automatic_run2+0x140>)
 8001554:	f000 ff2b 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001558:	2201      	movs	r2, #1
 800155a:	2120      	movs	r1, #32
 800155c:	4828      	ldr	r0, [pc, #160]	; (8001600 <fsm_automatic_run2+0x140>)
 800155e:	f000 ff26 	bl	80023ae <HAL_GPIO_WritePin>
		if(timer3_flag ==1){
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <fsm_automatic_run2+0x144>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10b      	bne.n	8001582 <fsm_automatic_run2+0xc2>
			state_2 = AUTO_RED;
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <fsm_automatic_run2+0x138>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]
			setTimer3(redTime*1000);
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <fsm_automatic_run2+0x150>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fc05 	bl	8000d8c <setTimer3>
		}

		if (mode == MODE_2){
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <fsm_automatic_run2+0x14c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d131      	bne.n	80015ee <fsm_automatic_run2+0x12e>
			state_2 = MAN_GREEN;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <fsm_automatic_run2+0x138>)
 800158c:	220d      	movs	r2, #13
 800158e:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8001590:	f242 7010 	movw	r0, #10000	; 0x2710
 8001594:	f7ff fbfa 	bl	8000d8c <setTimer3>
		}
		break;
 8001598:	e029      	b.n	80015ee <fsm_automatic_run2+0x12e>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 800159a:	2201      	movs	r2, #1
 800159c:	2120      	movs	r1, #32
 800159e:	4818      	ldr	r0, [pc, #96]	; (8001600 <fsm_automatic_run2+0x140>)
 80015a0:	f000 ff05 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <fsm_automatic_run2+0x140>)
 80015aa:	f000 ff00 	bl	80023ae <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <fsm_automatic_run2+0x144>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10b      	bne.n	80015ce <fsm_automatic_run2+0x10e>
			state_2 = AUTO_GREEN;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <fsm_automatic_run2+0x138>)
 80015b8:	2203      	movs	r2, #3
 80015ba:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <fsm_automatic_run2+0x13c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fbdf 	bl	8000d8c <setTimer3>
		}

		if (mode == MODE_2){
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <fsm_automatic_run2+0x14c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d10d      	bne.n	80015f2 <fsm_automatic_run2+0x132>
			state_2 = MAN_GREEN;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <fsm_automatic_run2+0x138>)
 80015d8:	220d      	movs	r2, #13
 80015da:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 80015dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80015e0:	f7ff fbd4 	bl	8000d8c <setTimer3>
		}
		break;
 80015e4:	e005      	b.n	80015f2 <fsm_automatic_run2+0x132>
	default:
		break;
 80015e6:	bf00      	nop
 80015e8:	e004      	b.n	80015f4 <fsm_automatic_run2+0x134>
		break;
 80015ea:	bf00      	nop
 80015ec:	e002      	b.n	80015f4 <fsm_automatic_run2+0x134>
		break;
 80015ee:	bf00      	nop
 80015f0:	e000      	b.n	80015f4 <fsm_automatic_run2+0x134>
		break;
 80015f2:	bf00      	nop
	}
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000100 	.word	0x20000100
 80015fc:	20000058 	.word	0x20000058
 8001600:	40010c00 	.word	0x40010c00
 8001604:	2000011c 	.word	0x2000011c
 8001608:	20000054 	.word	0x20000054
 800160c:	20000104 	.word	0x20000104
 8001610:	20000050 	.word	0x20000050

08001614 <fsm_manual_run1>:
 */


#include "traffic_manual.h"

void fsm_manual_run1(){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	switch (state_1){
 8001618:	4b53      	ldr	r3, [pc, #332]	; (8001768 <fsm_manual_run1+0x154>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b0d      	cmp	r3, #13
 800161e:	d038      	beq.n	8001692 <fsm_manual_run1+0x7e>
 8001620:	2b0d      	cmp	r3, #13
 8001622:	f300 8098 	bgt.w	8001756 <fsm_manual_run1+0x142>
 8001626:	2b0b      	cmp	r3, #11
 8001628:	d002      	beq.n	8001630 <fsm_manual_run1+0x1c>
 800162a:	2b0c      	cmp	r3, #12
 800162c:	d062      	beq.n	80016f4 <fsm_manual_run1+0xe0>
			state_1 = AUTO_RED;
			setTimer2(redTime*1000);
		}
		break;
	default:
		break;
 800162e:	e092      	b.n	8001756 <fsm_manual_run1+0x142>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001636:	484d      	ldr	r0, [pc, #308]	; (800176c <fsm_manual_run1+0x158>)
 8001638:	f000 feb9 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2108      	movs	r1, #8
 8001640:	484b      	ldr	r0, [pc, #300]	; (8001770 <fsm_manual_run1+0x15c>)
 8001642:	f000 feb4 	bl	80023ae <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001646:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <fsm_manual_run1+0x160>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d10d      	bne.n	800166a <fsm_manual_run1+0x56>
			state_1= TUN_GREEN;
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <fsm_manual_run1+0x154>)
 8001650:	2217      	movs	r2, #23
 8001652:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	4844      	ldr	r0, [pc, #272]	; (800176c <fsm_manual_run1+0x158>)
 800165c:	f000 fea7 	bl	80023ae <HAL_GPIO_WritePin>
			uartRun();
 8001660:	f000 fa2a 	bl	8001ab8 <uartRun>
			setTimer2(250);
 8001664:	20fa      	movs	r0, #250	; 0xfa
 8001666:	f7ff fb75 	bl	8000d54 <setTimer2>
		if (timer2_flag ==1){
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <fsm_manual_run1+0x164>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d173      	bne.n	800175a <fsm_manual_run1+0x146>
			mode = MODE_1;
 8001672:	4b40      	ldr	r3, [pc, #256]	; (8001774 <fsm_manual_run1+0x160>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]
			state_1 = AUTO_RED;
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <fsm_manual_run1+0x154>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <fsm_manual_run1+0x168>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fb62 	bl	8000d54 <setTimer2>
		break;
 8001690:	e063      	b.n	800175a <fsm_manual_run1+0x146>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	4834      	ldr	r0, [pc, #208]	; (800176c <fsm_manual_run1+0x158>)
 800169a:	f000 fe88 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	2108      	movs	r1, #8
 80016a2:	4833      	ldr	r0, [pc, #204]	; (8001770 <fsm_manual_run1+0x15c>)
 80016a4:	f000 fe83 	bl	80023ae <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <fsm_manual_run1+0x160>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d10d      	bne.n	80016cc <fsm_manual_run1+0xb8>
			state_1= TUN_GREEN;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <fsm_manual_run1+0x154>)
 80016b2:	2217      	movs	r2, #23
 80016b4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016bc:	482b      	ldr	r0, [pc, #172]	; (800176c <fsm_manual_run1+0x158>)
 80016be:	f000 fe76 	bl	80023ae <HAL_GPIO_WritePin>
			uartRun();
 80016c2:	f000 f9f9 	bl	8001ab8 <uartRun>
			setTimer2(250);
 80016c6:	20fa      	movs	r0, #250	; 0xfa
 80016c8:	f7ff fb44 	bl	8000d54 <setTimer2>
		if (timer2_flag ==1){
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <fsm_manual_run1+0x164>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d144      	bne.n	800175e <fsm_manual_run1+0x14a>
			mode = MODE_1;
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <fsm_manual_run1+0x160>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
			state_1 = AUTO_RED;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <fsm_manual_run1+0x154>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <fsm_manual_run1+0x168>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fb31 	bl	8000d54 <setTimer2>
		break;
 80016f2:	e034      	b.n	800175e <fsm_manual_run1+0x14a>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fa:	481c      	ldr	r0, [pc, #112]	; (800176c <fsm_manual_run1+0x158>)
 80016fc:	f000 fe57 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 8001700:	2201      	movs	r2, #1
 8001702:	2108      	movs	r1, #8
 8001704:	481a      	ldr	r0, [pc, #104]	; (8001770 <fsm_manual_run1+0x15c>)
 8001706:	f000 fe52 	bl	80023ae <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <fsm_manual_run1+0x160>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d10d      	bne.n	800172e <fsm_manual_run1+0x11a>
			state_1= TUN_GREEN;
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <fsm_manual_run1+0x154>)
 8001714:	2217      	movs	r2, #23
 8001716:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <fsm_manual_run1+0x158>)
 8001720:	f000 fe45 	bl	80023ae <HAL_GPIO_WritePin>
			uartRun();
 8001724:	f000 f9c8 	bl	8001ab8 <uartRun>
			setTimer2(250);
 8001728:	20fa      	movs	r0, #250	; 0xfa
 800172a:	f7ff fb13 	bl	8000d54 <setTimer2>
		if (timer2_flag ==1){
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <fsm_manual_run1+0x164>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d115      	bne.n	8001762 <fsm_manual_run1+0x14e>
			mode = MODE_1;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <fsm_manual_run1+0x160>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
			state_1 = AUTO_RED;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <fsm_manual_run1+0x154>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <fsm_manual_run1+0x168>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb00 	bl	8000d54 <setTimer2>
		break;
 8001754:	e005      	b.n	8001762 <fsm_manual_run1+0x14e>
		break;
 8001756:	bf00      	nop
 8001758:	e004      	b.n	8001764 <fsm_manual_run1+0x150>
		break;
 800175a:	bf00      	nop
 800175c:	e002      	b.n	8001764 <fsm_manual_run1+0x150>
		break;
 800175e:	bf00      	nop
 8001760:	e000      	b.n	8001764 <fsm_manual_run1+0x150>
		break;
 8001762:	bf00      	nop
	}
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200000fc 	.word	0x200000fc
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00
 8001774:	20000104 	.word	0x20000104
 8001778:	20000114 	.word	0x20000114
 800177c:	20000050 	.word	0x20000050

08001780 <fsm_manual_run2>:

void fsm_manual_run2(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	switch (state_2){
 8001784:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <fsm_manual_run2+0x13c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b0d      	cmp	r3, #13
 800178a:	d007      	beq.n	800179c <fsm_manual_run2+0x1c>
 800178c:	2b0d      	cmp	r3, #13
 800178e:	f300 808c 	bgt.w	80018aa <fsm_manual_run2+0x12a>
 8001792:	2b0b      	cmp	r3, #11
 8001794:	d05c      	beq.n	8001850 <fsm_manual_run2+0xd0>
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d02d      	beq.n	80017f6 <fsm_manual_run2+0x76>
			state_2=AUTO_GREEN;
			setTimer3(greenTime*1000);
		}
		break;
	default:
		break;
 800179a:	e086      	b.n	80018aa <fsm_manual_run2+0x12a>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2120      	movs	r1, #32
 80017a0:	4847      	ldr	r0, [pc, #284]	; (80018c0 <fsm_manual_run2+0x140>)
 80017a2:	f000 fe04 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80017a6:	2201      	movs	r2, #1
 80017a8:	2110      	movs	r1, #16
 80017aa:	4845      	ldr	r0, [pc, #276]	; (80018c0 <fsm_manual_run2+0x140>)
 80017ac:	f000 fdff 	bl	80023ae <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <fsm_manual_run2+0x144>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d10a      	bne.n	80017ce <fsm_manual_run2+0x4e>
			state_2= TUN_GREEN;
 80017b8:	4b40      	ldr	r3, [pc, #256]	; (80018bc <fsm_manual_run2+0x13c>)
 80017ba:	2217      	movs	r2, #23
 80017bc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2120      	movs	r1, #32
 80017c2:	483f      	ldr	r0, [pc, #252]	; (80018c0 <fsm_manual_run2+0x140>)
 80017c4:	f000 fdf3 	bl	80023ae <HAL_GPIO_WritePin>
			setTimer3(250);
 80017c8:	20fa      	movs	r0, #250	; 0xfa
 80017ca:	f7ff fadf 	bl	8000d8c <setTimer3>
		if (timer3_flag ==1){
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <fsm_manual_run2+0x148>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d16b      	bne.n	80018ae <fsm_manual_run2+0x12e>
			mode = MODE_1;
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <fsm_manual_run2+0x144>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <fsm_manual_run2+0x13c>)
 80017de:	2203      	movs	r2, #3
 80017e0:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <fsm_manual_run2+0x14c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff facc 	bl	8000d8c <setTimer3>
		break;
 80017f4:	e05b      	b.n	80018ae <fsm_manual_run2+0x12e>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2110      	movs	r1, #16
 80017fa:	4831      	ldr	r0, [pc, #196]	; (80018c0 <fsm_manual_run2+0x140>)
 80017fc:	f000 fdd7 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001800:	2201      	movs	r2, #1
 8001802:	2120      	movs	r1, #32
 8001804:	482e      	ldr	r0, [pc, #184]	; (80018c0 <fsm_manual_run2+0x140>)
 8001806:	f000 fdd2 	bl	80023ae <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <fsm_manual_run2+0x144>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d10a      	bne.n	8001828 <fsm_manual_run2+0xa8>
			state_2= TUN_GREEN;
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <fsm_manual_run2+0x13c>)
 8001814:	2217      	movs	r2, #23
 8001816:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2120      	movs	r1, #32
 800181c:	4828      	ldr	r0, [pc, #160]	; (80018c0 <fsm_manual_run2+0x140>)
 800181e:	f000 fdc6 	bl	80023ae <HAL_GPIO_WritePin>
			setTimer3(250);
 8001822:	20fa      	movs	r0, #250	; 0xfa
 8001824:	f7ff fab2 	bl	8000d8c <setTimer3>
		if (timer3_flag ==1){
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <fsm_manual_run2+0x148>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d140      	bne.n	80018b2 <fsm_manual_run2+0x132>
			mode = MODE_1;
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <fsm_manual_run2+0x144>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <fsm_manual_run2+0x13c>)
 8001838:	2203      	movs	r2, #3
 800183a:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <fsm_manual_run2+0x14c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fa9f 	bl	8000d8c <setTimer3>
		break;
 800184e:	e030      	b.n	80018b2 <fsm_manual_run2+0x132>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001850:	2201      	movs	r2, #1
 8001852:	2120      	movs	r1, #32
 8001854:	481a      	ldr	r0, [pc, #104]	; (80018c0 <fsm_manual_run2+0x140>)
 8001856:	f000 fdaa 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2110      	movs	r1, #16
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <fsm_manual_run2+0x140>)
 8001860:	f000 fda5 	bl	80023ae <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <fsm_manual_run2+0x144>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d10a      	bne.n	8001882 <fsm_manual_run2+0x102>
			state_2= TUN_GREEN;
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <fsm_manual_run2+0x13c>)
 800186e:	2217      	movs	r2, #23
 8001870:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2120      	movs	r1, #32
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <fsm_manual_run2+0x140>)
 8001878:	f000 fd99 	bl	80023ae <HAL_GPIO_WritePin>
			setTimer3(250);
 800187c:	20fa      	movs	r0, #250	; 0xfa
 800187e:	f7ff fa85 	bl	8000d8c <setTimer3>
		if (timer3_flag ==1){
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <fsm_manual_run2+0x148>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d115      	bne.n	80018b6 <fsm_manual_run2+0x136>
			mode = MODE_1;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <fsm_manual_run2+0x144>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <fsm_manual_run2+0x13c>)
 8001892:	2203      	movs	r2, #3
 8001894:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <fsm_manual_run2+0x14c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fa72 	bl	8000d8c <setTimer3>
		break;
 80018a8:	e005      	b.n	80018b6 <fsm_manual_run2+0x136>
		break;
 80018aa:	bf00      	nop
 80018ac:	e004      	b.n	80018b8 <fsm_manual_run2+0x138>
		break;
 80018ae:	bf00      	nop
 80018b0:	e002      	b.n	80018b8 <fsm_manual_run2+0x138>
		break;
 80018b2:	bf00      	nop
 80018b4:	e000      	b.n	80018b8 <fsm_manual_run2+0x138>
		break;
 80018b6:	bf00      	nop
	}
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000100 	.word	0x20000100
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	20000104 	.word	0x20000104
 80018c8:	2000011c 	.word	0x2000011c
 80018cc:	20000058 	.word	0x20000058

080018d0 <fsm_tuning_run1>:
 *      Author: duyvt
 */

#include "traffic_tuning.h"

void fsm_tuning_run1(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	switch(state_1){
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <fsm_tuning_run1+0xe0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b17      	cmp	r3, #23
 80018da:	d006      	beq.n	80018ea <fsm_tuning_run1+0x1a>
 80018dc:	2b17      	cmp	r3, #23
 80018de:	dc5e      	bgt.n	800199e <fsm_tuning_run1+0xce>
 80018e0:	2b15      	cmp	r3, #21
 80018e2:	d03f      	beq.n	8001964 <fsm_tuning_run1+0x94>
 80018e4:	2b16      	cmp	r3, #22
 80018e6:	d01c      	beq.n	8001922 <fsm_tuning_run1+0x52>
			setTimer2(redTime*1000);
		}

		break;
	default:
		break;
 80018e8:	e059      	b.n	800199e <fsm_tuning_run1+0xce>
		if (timer2_flag ==1){
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <fsm_tuning_run1+0xe4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d106      	bne.n	8001900 <fsm_tuning_run1+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 80018f2:	2108      	movs	r1, #8
 80018f4:	4830      	ldr	r0, [pc, #192]	; (80019b8 <fsm_tuning_run1+0xe8>)
 80018f6:	f000 fd72 	bl	80023de <HAL_GPIO_TogglePin>
			setTimer2(250);
 80018fa:	20fa      	movs	r0, #250	; 0xfa
 80018fc:	f7ff fa2a 	bl	8000d54 <setTimer2>
		if(mode == MODE_1){
 8001900:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <fsm_tuning_run1+0xec>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d14c      	bne.n	80019a2 <fsm_tuning_run1+0xd2>
			state_1 = AUTO_RED;
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <fsm_tuning_run1+0xe0>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800190e:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <fsm_tuning_run1+0xf0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fa1a 	bl	8000d54 <setTimer2>
		break;
 8001920:	e03f      	b.n	80019a2 <fsm_tuning_run1+0xd2>
		if (timer2_flag ==1){
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <fsm_tuning_run1+0xe4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10b      	bne.n	8001942 <fsm_tuning_run1+0x72>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 800192a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192e:	4825      	ldr	r0, [pc, #148]	; (80019c4 <fsm_tuning_run1+0xf4>)
 8001930:	f000 fd55 	bl	80023de <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 8001934:	2108      	movs	r1, #8
 8001936:	4820      	ldr	r0, [pc, #128]	; (80019b8 <fsm_tuning_run1+0xe8>)
 8001938:	f000 fd51 	bl	80023de <HAL_GPIO_TogglePin>
			setTimer2(250);
 800193c:	20fa      	movs	r0, #250	; 0xfa
 800193e:	f7ff fa09 	bl	8000d54 <setTimer2>
		if(mode == MODE_1){
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <fsm_tuning_run1+0xec>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d12d      	bne.n	80019a6 <fsm_tuning_run1+0xd6>
			state_1 = AUTO_RED;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <fsm_tuning_run1+0xe0>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <fsm_tuning_run1+0xf0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f9f9 	bl	8000d54 <setTimer2>
		break;
 8001962:	e020      	b.n	80019a6 <fsm_tuning_run1+0xd6>
		if (timer2_flag ==1){
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <fsm_tuning_run1+0xe4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <fsm_tuning_run1+0xac>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 800196c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001970:	4814      	ldr	r0, [pc, #80]	; (80019c4 <fsm_tuning_run1+0xf4>)
 8001972:	f000 fd34 	bl	80023de <HAL_GPIO_TogglePin>
			setTimer2(250);
 8001976:	20fa      	movs	r0, #250	; 0xfa
 8001978:	f7ff f9ec 	bl	8000d54 <setTimer2>
		if(mode == MODE_1){
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <fsm_tuning_run1+0xec>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d112      	bne.n	80019aa <fsm_tuning_run1+0xda>
			state_1 = AUTO_RED;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <fsm_tuning_run1+0xe0>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <fsm_tuning_run1+0xf0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f9dc 	bl	8000d54 <setTimer2>
		break;
 800199c:	e005      	b.n	80019aa <fsm_tuning_run1+0xda>
		break;
 800199e:	bf00      	nop
 80019a0:	e004      	b.n	80019ac <fsm_tuning_run1+0xdc>
		break;
 80019a2:	bf00      	nop
 80019a4:	e002      	b.n	80019ac <fsm_tuning_run1+0xdc>
		break;
 80019a6:	bf00      	nop
 80019a8:	e000      	b.n	80019ac <fsm_tuning_run1+0xdc>
		break;
 80019aa:	bf00      	nop
	}
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200000fc 	.word	0x200000fc
 80019b4:	20000114 	.word	0x20000114
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	20000104 	.word	0x20000104
 80019c0:	20000050 	.word	0x20000050
 80019c4:	40010800 	.word	0x40010800

080019c8 <fsm_tuning_run2>:

void fsm_tuning_run2(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	switch(state_2){
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <fsm_tuning_run2+0xdc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b17      	cmp	r3, #23
 80019d2:	d006      	beq.n	80019e2 <fsm_tuning_run2+0x1a>
 80019d4:	2b17      	cmp	r3, #23
 80019d6:	dc5c      	bgt.n	8001a92 <fsm_tuning_run2+0xca>
 80019d8:	2b15      	cmp	r3, #21
 80019da:	d03e      	beq.n	8001a5a <fsm_tuning_run2+0x92>
 80019dc:	2b16      	cmp	r3, #22
 80019de:	d01c      	beq.n	8001a1a <fsm_tuning_run2+0x52>
			setTimer3(greenTime*1000);
		}

		break;
	default:
		break;
 80019e0:	e057      	b.n	8001a92 <fsm_tuning_run2+0xca>
		if (timer3_flag ==1){
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <fsm_tuning_run2+0xe0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d106      	bne.n	80019f8 <fsm_tuning_run2+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 80019ea:	2110      	movs	r1, #16
 80019ec:	482f      	ldr	r0, [pc, #188]	; (8001aac <fsm_tuning_run2+0xe4>)
 80019ee:	f000 fcf6 	bl	80023de <HAL_GPIO_TogglePin>
			setTimer3(250);
 80019f2:	20fa      	movs	r0, #250	; 0xfa
 80019f4:	f7ff f9ca 	bl	8000d8c <setTimer3>
		if(mode == MODE_1){
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <fsm_tuning_run2+0xe8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d14a      	bne.n	8001a96 <fsm_tuning_run2+0xce>
			state_2 = AUTO_GREEN;
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <fsm_tuning_run2+0xdc>)
 8001a02:	2203      	movs	r2, #3
 8001a04:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <fsm_tuning_run2+0xec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f9ba 	bl	8000d8c <setTimer3>
		break;
 8001a18:	e03d      	b.n	8001a96 <fsm_tuning_run2+0xce>
		if (timer3_flag ==1){
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <fsm_tuning_run2+0xe0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10a      	bne.n	8001a38 <fsm_tuning_run2+0x70>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 8001a22:	2120      	movs	r1, #32
 8001a24:	4821      	ldr	r0, [pc, #132]	; (8001aac <fsm_tuning_run2+0xe4>)
 8001a26:	f000 fcda 	bl	80023de <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	481f      	ldr	r0, [pc, #124]	; (8001aac <fsm_tuning_run2+0xe4>)
 8001a2e:	f000 fcd6 	bl	80023de <HAL_GPIO_TogglePin>
			setTimer3(250);
 8001a32:	20fa      	movs	r0, #250	; 0xfa
 8001a34:	f7ff f9aa 	bl	8000d8c <setTimer3>
		if(mode == MODE_1){
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <fsm_tuning_run2+0xe8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d12c      	bne.n	8001a9a <fsm_tuning_run2+0xd2>
			state_2 = AUTO_GREEN;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <fsm_tuning_run2+0xdc>)
 8001a42:	2203      	movs	r2, #3
 8001a44:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <fsm_tuning_run2+0xec>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f99a 	bl	8000d8c <setTimer3>
		break;
 8001a58:	e01f      	b.n	8001a9a <fsm_tuning_run2+0xd2>
		if (timer3_flag ==1){
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <fsm_tuning_run2+0xe0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d106      	bne.n	8001a70 <fsm_tuning_run2+0xa8>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 8001a62:	2120      	movs	r1, #32
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <fsm_tuning_run2+0xe4>)
 8001a66:	f000 fcba 	bl	80023de <HAL_GPIO_TogglePin>
			setTimer3(250);
 8001a6a:	20fa      	movs	r0, #250	; 0xfa
 8001a6c:	f7ff f98e 	bl	8000d8c <setTimer3>
		if(mode == MODE_1){
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <fsm_tuning_run2+0xe8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d112      	bne.n	8001a9e <fsm_tuning_run2+0xd6>
			state_2 = AUTO_GREEN;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <fsm_tuning_run2+0xdc>)
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <fsm_tuning_run2+0xec>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f97e 	bl	8000d8c <setTimer3>
		break;
 8001a90:	e005      	b.n	8001a9e <fsm_tuning_run2+0xd6>
		break;
 8001a92:	bf00      	nop
 8001a94:	e004      	b.n	8001aa0 <fsm_tuning_run2+0xd8>
		break;
 8001a96:	bf00      	nop
 8001a98:	e002      	b.n	8001aa0 <fsm_tuning_run2+0xd8>
		break;
 8001a9a:	bf00      	nop
 8001a9c:	e000      	b.n	8001aa0 <fsm_tuning_run2+0xd8>
		break;
 8001a9e:	bf00      	nop
	}
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000100 	.word	0x20000100
 8001aa8:	2000011c 	.word	0x2000011c
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	20000104 	.word	0x20000104
 8001ab4:	20000058 	.word	0x20000058

08001ab8 <uartRun>:
#include "uart.h"

UART_HandleTypeDef huart2;
char str1[10];

void uartRun(){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
//		break;
//	default:
//		break;
//	}

	if (mode == MODE_1){
 8001abc:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <uartRun+0x10c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d11d      	bne.n	8001b00 <uartRun+0x48>
		if (timer8_flag ==1){
 8001ac4:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <uartRun+0x110>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d119      	bne.n	8001b00 <uartRun+0x48>
			HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", (get_timer2_counter()/1000)), 500);
 8001acc:	f7ff fa06 	bl	8000edc <get_timer2_counter>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a3e      	ldr	r2, [pc, #248]	; (8001bcc <uartRun+0x114>)
 8001ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad8:	1192      	asrs	r2, r2, #6
 8001ada:	17db      	asrs	r3, r3, #31
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	493b      	ldr	r1, [pc, #236]	; (8001bd0 <uartRun+0x118>)
 8001ae2:	483c      	ldr	r0, [pc, #240]	; (8001bd4 <uartRun+0x11c>)
 8001ae4:	f002 fd16 	bl	8004514 <siprintf>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001af0:	4938      	ldr	r1, [pc, #224]	; (8001bd4 <uartRun+0x11c>)
 8001af2:	4839      	ldr	r0, [pc, #228]	; (8001bd8 <uartRun+0x120>)
 8001af4:	f002 f851 	bl	8003b9a <HAL_UART_Transmit>
			setTimer8(500);
 8001af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001afc:	f7ff f9d2 	bl	8000ea4 <setTimer8>
		}
	}

	if (mode == MODE_3){
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <uartRun+0x10c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d152      	bne.n	8001bae <uartRun+0xf6>
		switch(state_1){
 8001b08:	4b34      	ldr	r3, [pc, #208]	; (8001bdc <uartRun+0x124>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b17      	cmp	r3, #23
 8001b0e:	d01e      	beq.n	8001b4e <uartRun+0x96>
 8001b10:	2b17      	cmp	r3, #23
 8001b12:	dc4e      	bgt.n	8001bb2 <uartRun+0xfa>
 8001b14:	2b15      	cmp	r3, #21
 8001b16:	d002      	beq.n	8001b1e <uartRun+0x66>
 8001b18:	2b16      	cmp	r3, #22
 8001b1a:	d030      	beq.n	8001b7e <uartRun+0xc6>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", amberTime), 500);
				setTimer8(500);
			}
			break;
		default:
			break;
 8001b1c:	e049      	b.n	8001bb2 <uartRun+0xfa>
			if (timer8_flag ==1){
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <uartRun+0x110>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d147      	bne.n	8001bb6 <uartRun+0xfe>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", redTime), 500);
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <uartRun+0x128>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4928      	ldr	r1, [pc, #160]	; (8001bd0 <uartRun+0x118>)
 8001b2e:	4829      	ldr	r0, [pc, #164]	; (8001bd4 <uartRun+0x11c>)
 8001b30:	f002 fcf0 	bl	8004514 <siprintf>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b3c:	4925      	ldr	r1, [pc, #148]	; (8001bd4 <uartRun+0x11c>)
 8001b3e:	4826      	ldr	r0, [pc, #152]	; (8001bd8 <uartRun+0x120>)
 8001b40:	f002 f82b 	bl	8003b9a <HAL_UART_Transmit>
				setTimer8(500);
 8001b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b48:	f7ff f9ac 	bl	8000ea4 <setTimer8>
			break;
 8001b4c:	e033      	b.n	8001bb6 <uartRun+0xfe>
			if (timer8_flag ==1){
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <uartRun+0x110>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d131      	bne.n	8001bba <uartRun+0x102>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", greenTime), 500);
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <uartRun+0x12c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	491c      	ldr	r1, [pc, #112]	; (8001bd0 <uartRun+0x118>)
 8001b5e:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <uartRun+0x11c>)
 8001b60:	f002 fcd8 	bl	8004514 <siprintf>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b6c:	4919      	ldr	r1, [pc, #100]	; (8001bd4 <uartRun+0x11c>)
 8001b6e:	481a      	ldr	r0, [pc, #104]	; (8001bd8 <uartRun+0x120>)
 8001b70:	f002 f813 	bl	8003b9a <HAL_UART_Transmit>
				setTimer8(500);
 8001b74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b78:	f7ff f994 	bl	8000ea4 <setTimer8>
			break;
 8001b7c:	e01d      	b.n	8001bba <uartRun+0x102>
			if (timer8_flag ==1){
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <uartRun+0x110>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d11b      	bne.n	8001bbe <uartRun+0x106>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", amberTime), 500);
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <uartRun+0x130>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4910      	ldr	r1, [pc, #64]	; (8001bd0 <uartRun+0x118>)
 8001b8e:	4811      	ldr	r0, [pc, #68]	; (8001bd4 <uartRun+0x11c>)
 8001b90:	f002 fcc0 	bl	8004514 <siprintf>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b9c:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <uartRun+0x11c>)
 8001b9e:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <uartRun+0x120>)
 8001ba0:	f001 fffb 	bl	8003b9a <HAL_UART_Transmit>
				setTimer8(500);
 8001ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba8:	f7ff f97c 	bl	8000ea4 <setTimer8>
			break;
 8001bac:	e007      	b.n	8001bbe <uartRun+0x106>
		}
	}
 8001bae:	bf00      	nop
 8001bb0:	e006      	b.n	8001bc0 <uartRun+0x108>
			break;
 8001bb2:	bf00      	nop
 8001bb4:	e004      	b.n	8001bc0 <uartRun+0x108>
			break;
 8001bb6:	bf00      	nop
 8001bb8:	e002      	b.n	8001bc0 <uartRun+0x108>
			break;
 8001bba:	bf00      	nop
 8001bbc:	e000      	b.n	8001bc0 <uartRun+0x108>
			break;
 8001bbe:	bf00      	nop
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000104 	.word	0x20000104
 8001bc8:	20000144 	.word	0x20000144
 8001bcc:	10624dd3 	.word	0x10624dd3
 8001bd0:	08004da0 	.word	0x08004da0
 8001bd4:	200001e8 	.word	0x200001e8
 8001bd8:	200001f4 	.word	0x200001f4
 8001bdc:	200000fc 	.word	0x200000fc
 8001be0:	20000050 	.word	0x20000050
 8001be4:	20000058 	.word	0x20000058
 8001be8:	20000054 	.word	0x20000054

08001bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bee:	490d      	ldr	r1, [pc, #52]	; (8001c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c04:	4c0a      	ldr	r4, [pc, #40]	; (8001c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c12:	f7ff fba1 	bl	8001358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c16:	f002 fc51 	bl	80044bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c1a:	f7fe fdb7 	bl	800078c <main>
  bx lr
 8001c1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001c28:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8001c2c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001c30:	2000024c 	.word	0x2000024c

08001c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC1_2_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x28>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x28>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f923 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fa20 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f93b 	bl	8001efe <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f903 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000005c 	.word	0x2000005c
 8001cbc:	20000064 	.word	0x20000064
 8001cc0:	20000060 	.word	0x20000060

08001cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_IncTick+0x1c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	20000064 	.word	0x20000064
 8001ce4:	20000238 	.word	0x20000238

08001ce8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_GetTick+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000238 	.word	0x20000238

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4906      	ldr	r1, [pc, #24]	; (8001d94 <__NVIC_EnableIRQ+0x34>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff90 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff2d 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff42 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff90 	bl	8001dec <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5f 	bl	8001d98 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff35 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b085      	sub	sp, #20
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e020      	b.n	8001f80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 020e 	bic.w	r2, r2, #14
 8001f4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d005      	beq.n	8001fae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e051      	b.n	8002052 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020e 	bic.w	r2, r2, #14
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a22      	ldr	r2, [pc, #136]	; (800205c <HAL_DMA_Abort_IT+0xd0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d029      	beq.n	800202c <HAL_DMA_Abort_IT+0xa0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a20      	ldr	r2, [pc, #128]	; (8002060 <HAL_DMA_Abort_IT+0xd4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d022      	beq.n	8002028 <HAL_DMA_Abort_IT+0x9c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <HAL_DMA_Abort_IT+0xd8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d01a      	beq.n	8002022 <HAL_DMA_Abort_IT+0x96>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_DMA_Abort_IT+0xdc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d012      	beq.n	800201c <HAL_DMA_Abort_IT+0x90>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_DMA_Abort_IT+0xe0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00a      	beq.n	8002016 <HAL_DMA_Abort_IT+0x8a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_DMA_Abort_IT+0xe4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d102      	bne.n	8002010 <HAL_DMA_Abort_IT+0x84>
 800200a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800200e:	e00e      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8002010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002014:	e00b      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8002016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201a:	e008      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 800201c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002020:	e005      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8002022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002026:	e002      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8002028:	2310      	movs	r3, #16
 800202a:	e000      	b.n	800202e <HAL_DMA_Abort_IT+0xa2>
 800202c:	2301      	movs	r3, #1
 800202e:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_DMA_Abort_IT+0xe8>)
 8002030:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
    } 
  }
  return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40020008 	.word	0x40020008
 8002060:	4002001c 	.word	0x4002001c
 8002064:	40020030 	.word	0x40020030
 8002068:	40020044 	.word	0x40020044
 800206c:	40020058 	.word	0x40020058
 8002070:	4002006c 	.word	0x4002006c
 8002074:	40020000 	.word	0x40020000

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b08b      	sub	sp, #44	; 0x2c
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208a:	e169      	b.n	8002360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800208c:	2201      	movs	r2, #1
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f040 8158 	bne.w	800235a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a9a      	ldr	r2, [pc, #616]	; (8002318 <HAL_GPIO_Init+0x2a0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d05e      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020b4:	4a98      	ldr	r2, [pc, #608]	; (8002318 <HAL_GPIO_Init+0x2a0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d875      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020ba:	4a98      	ldr	r2, [pc, #608]	; (800231c <HAL_GPIO_Init+0x2a4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d058      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020c0:	4a96      	ldr	r2, [pc, #600]	; (800231c <HAL_GPIO_Init+0x2a4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d86f      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020c6:	4a96      	ldr	r2, [pc, #600]	; (8002320 <HAL_GPIO_Init+0x2a8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d052      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020cc:	4a94      	ldr	r2, [pc, #592]	; (8002320 <HAL_GPIO_Init+0x2a8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d869      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020d2:	4a94      	ldr	r2, [pc, #592]	; (8002324 <HAL_GPIO_Init+0x2ac>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04c      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020d8:	4a92      	ldr	r2, [pc, #584]	; (8002324 <HAL_GPIO_Init+0x2ac>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d863      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020de:	4a92      	ldr	r2, [pc, #584]	; (8002328 <HAL_GPIO_Init+0x2b0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d046      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020e4:	4a90      	ldr	r2, [pc, #576]	; (8002328 <HAL_GPIO_Init+0x2b0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d85d      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d82a      	bhi.n	8002144 <HAL_GPIO_Init+0xcc>
 80020ee:	2b12      	cmp	r3, #18
 80020f0:	d859      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <HAL_GPIO_Init+0x80>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002173 	.word	0x08002173
 80020fc:	0800214d 	.word	0x0800214d
 8002100:	0800215f 	.word	0x0800215f
 8002104:	080021a1 	.word	0x080021a1
 8002108:	080021a7 	.word	0x080021a7
 800210c:	080021a7 	.word	0x080021a7
 8002110:	080021a7 	.word	0x080021a7
 8002114:	080021a7 	.word	0x080021a7
 8002118:	080021a7 	.word	0x080021a7
 800211c:	080021a7 	.word	0x080021a7
 8002120:	080021a7 	.word	0x080021a7
 8002124:	080021a7 	.word	0x080021a7
 8002128:	080021a7 	.word	0x080021a7
 800212c:	080021a7 	.word	0x080021a7
 8002130:	080021a7 	.word	0x080021a7
 8002134:	080021a7 	.word	0x080021a7
 8002138:	080021a7 	.word	0x080021a7
 800213c:	08002155 	.word	0x08002155
 8002140:	08002169 	.word	0x08002169
 8002144:	4a79      	ldr	r2, [pc, #484]	; (800232c <HAL_GPIO_Init+0x2b4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800214a:	e02c      	b.n	80021a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	623b      	str	r3, [r7, #32]
          break;
 8002152:	e029      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	3304      	adds	r3, #4
 800215a:	623b      	str	r3, [r7, #32]
          break;
 800215c:	e024      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	3308      	adds	r3, #8
 8002164:	623b      	str	r3, [r7, #32]
          break;
 8002166:	e01f      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	330c      	adds	r3, #12
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e01a      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800217a:	2304      	movs	r3, #4
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e013      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002188:	2308      	movs	r3, #8
 800218a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	611a      	str	r2, [r3, #16]
          break;
 8002192:	e009      	b.n	80021a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002194:	2308      	movs	r3, #8
 8002196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	615a      	str	r2, [r3, #20]
          break;
 800219e:	e003      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
          break;
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          break;
 80021a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d801      	bhi.n	80021b2 <HAL_GPIO_Init+0x13a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	e001      	b.n	80021b6 <HAL_GPIO_Init+0x13e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2bff      	cmp	r3, #255	; 0xff
 80021bc:	d802      	bhi.n	80021c4 <HAL_GPIO_Init+0x14c>
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x152>
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	3b08      	subs	r3, #8
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	210f      	movs	r1, #15
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	6a39      	ldr	r1, [r7, #32]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	431a      	orrs	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80b1 	beq.w	800235a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f8:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <HAL_GPIO_Init+0x2b8>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_GPIO_Init+0x2b8>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <HAL_GPIO_Init+0x2b8>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_GPIO_Init+0x2bc>)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a40      	ldr	r2, [pc, #256]	; (8002338 <HAL_GPIO_Init+0x2c0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d013      	beq.n	8002264 <HAL_GPIO_Init+0x1ec>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3f      	ldr	r2, [pc, #252]	; (800233c <HAL_GPIO_Init+0x2c4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00d      	beq.n	8002260 <HAL_GPIO_Init+0x1e8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3e      	ldr	r2, [pc, #248]	; (8002340 <HAL_GPIO_Init+0x2c8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d007      	beq.n	800225c <HAL_GPIO_Init+0x1e4>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <HAL_GPIO_Init+0x2cc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_GPIO_Init+0x1e0>
 8002254:	2303      	movs	r3, #3
 8002256:	e006      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002258:	2304      	movs	r3, #4
 800225a:	e004      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 800225c:	2302      	movs	r3, #2
 800225e:	e002      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002264:	2300      	movs	r3, #0
 8002266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002268:	f002 0203 	and.w	r2, r2, #3
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	4093      	lsls	r3, r2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002276:	492f      	ldr	r1, [pc, #188]	; (8002334 <HAL_GPIO_Init+0x2bc>)
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	492c      	ldr	r1, [pc, #176]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4928      	ldr	r1, [pc, #160]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4922      	ldr	r1, [pc, #136]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	491e      	ldr	r1, [pc, #120]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	4918      	ldr	r1, [pc, #96]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4914      	ldr	r1, [pc, #80]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d021      	beq.n	800234c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
 8002314:	e021      	b.n	800235a <HAL_GPIO_Init+0x2e2>
 8002316:	bf00      	nop
 8002318:	10320000 	.word	0x10320000
 800231c:	10310000 	.word	0x10310000
 8002320:	10220000 	.word	0x10220000
 8002324:	10210000 	.word	0x10210000
 8002328:	10120000 	.word	0x10120000
 800232c:	10110000 	.word	0x10110000
 8002330:	40021000 	.word	0x40021000
 8002334:	40010000 	.word	0x40010000
 8002338:	40010800 	.word	0x40010800
 800233c:	40010c00 	.word	0x40010c00
 8002340:	40011000 	.word	0x40011000
 8002344:	40011400 	.word	0x40011400
 8002348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_GPIO_Init+0x304>)
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	43db      	mvns	r3, r3
 8002354:	4909      	ldr	r1, [pc, #36]	; (800237c <HAL_GPIO_Init+0x304>)
 8002356:	4013      	ands	r3, r2
 8002358:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	3301      	adds	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f47f ae8e 	bne.w	800208c <HAL_GPIO_Init+0x14>
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	372c      	adds	r7, #44	; 0x2c
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e001      	b.n	80023a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]
 80023ba:	4613      	mov	r3, r2
 80023bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023be:	787b      	ldrb	r3, [r7, #1]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c4:	887a      	ldrh	r2, [r7, #2]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ca:	e003      	b.n	80023d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	041a      	lsls	r2, r3, #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	611a      	str	r2, [r3, #16]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	041a      	lsls	r2, r3, #16
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	400b      	ands	r3, r1
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e26c      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8087 	beq.w	800253e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d00c      	beq.n	8002456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d112      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
 8002448:	4b8c      	ldr	r3, [pc, #560]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d06c      	beq.n	800253c <HAL_RCC_OscConfig+0x12c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d168      	bne.n	800253c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e246      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x76>
 8002478:	4b80      	ldr	r3, [pc, #512]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7f      	ldr	r2, [pc, #508]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e02e      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b78      	ldr	r3, [pc, #480]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0xbc>
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a71      	ldr	r2, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024cc:	4b6b      	ldr	r3, [pc, #428]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a67      	ldr	r2, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fbfc 	bl	8001ce8 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff fbf8 	bl	8001ce8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1fa      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe4>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff fbe8 	bl	8001ce8 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff fbe4 	bl	8001ce8 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1e6      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x10c>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254a:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002556:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
 8002562:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1ba      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4939      	ldr	r1, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fb9d 	bl	8001ce8 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff fb99 	bl	8001ce8 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e19b      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb7c 	bl	8001ce8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff fb78 	bl	8001ce8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e17a      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03a      	beq.n	8002694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff fb5c 	bl	8001ce8 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fb58 	bl	8001ce8 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e15a      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002652:	2001      	movs	r0, #1
 8002654:	f000 fad8 	bl	8002c08 <RCC_Delay>
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7ff fb42 	bl	8001ce8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002666:	e00f      	b.n	8002688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff fb3e 	bl	8001ce8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d908      	bls.n	8002688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e140      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	42420000 	.word	0x42420000
 8002684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b9e      	ldr	r3, [pc, #632]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e9      	bne.n	8002668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a6 	beq.w	80027ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b97      	ldr	r3, [pc, #604]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b94      	ldr	r3, [pc, #592]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a93      	ldr	r2, [pc, #588]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b91      	ldr	r3, [pc, #580]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b8e      	ldr	r3, [pc, #568]	; (8002908 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b8b      	ldr	r3, [pc, #556]	; (8002908 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a8a      	ldr	r2, [pc, #552]	; (8002908 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7ff faff 	bl	8001ce8 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7ff fafb 	bl	8001ce8 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0fd      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b81      	ldr	r3, [pc, #516]	; (8002908 <HAL_RCC_OscConfig+0x4f8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x312>
 8002714:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a7a      	ldr	r2, [pc, #488]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	e02d      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x334>
 800272a:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a75      	ldr	r2, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b73      	ldr	r3, [pc, #460]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a72      	ldr	r2, [pc, #456]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	e01c      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x356>
 800274c:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a6c      	ldr	r2, [pc, #432]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a69      	ldr	r2, [pc, #420]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a66      	ldr	r2, [pc, #408]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b64      	ldr	r3, [pc, #400]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a63      	ldr	r2, [pc, #396]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff faaf 	bl	8001ce8 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff faab 	bl	8001ce8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0ab      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x37e>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff fa99 	bl	8001ce8 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7ff fa95 	bl	8001ce8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e095      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b48      	ldr	r3, [pc, #288]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a47      	ldr	r2, [pc, #284]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8081 	beq.w	80028fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	4b42      	ldr	r3, [pc, #264]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d061      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d146      	bne.n	800289a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x4fc>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7ff fa69 	bl	8001ce8 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7ff fa65 	bl	8001ce8 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e067      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002842:	4b30      	ldr	r3, [pc, #192]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	492d      	ldr	r1, [pc, #180]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a19      	ldr	r1, [r3, #32]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	430b      	orrs	r3, r1
 8002866:	4927      	ldr	r1, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x4fc>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7ff fa39 	bl	8001ce8 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7ff fa35 	bl	8001ce8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e037      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x46a>
 8002898:	e02f      	b.n	80028fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_RCC_OscConfig+0x4fc>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff fa22 	bl	8001ce8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7ff fa1e 	bl	8001ce8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e020      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x498>
 80028c6:	e018      	b.n	80028fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e013      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420060 	.word	0x42420060

08002910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0d0      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d910      	bls.n	8002954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b67      	ldr	r3, [pc, #412]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 0207 	bic.w	r2, r3, #7
 800293a:	4965      	ldr	r1, [pc, #404]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800298e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d040      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d115      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e073      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06b      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ee:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4936      	ldr	r1, [pc, #216]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a00:	f7ff f972 	bl	8001ce8 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7ff f96e 	bl	8001ce8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e053      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1eb      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d210      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4922      	ldr	r1, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e032      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a9e:	f000 f821 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	490a      	ldr	r1, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	5ccb      	ldrb	r3, [r1, r3]
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1cc>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f8d0 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08004dbc 	.word	0x08004dbc
 8002adc:	2000005c 	.word	0x2000005c
 8002ae0:	20000060 	.word	0x20000060

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b490      	push	{r4, r7}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002aec:	1d3c      	adds	r4, r7, #4
 8002aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002af4:	f240 2301 	movw	r3, #513	; 0x201
 8002af8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x40>
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x46>
 8002b22:	e02d      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b26:	623b      	str	r3, [r7, #32]
      break;
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b36:	4413      	add	r3, r2
 8002b38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0c5b      	lsrs	r3, r3, #17
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b56:	4413      	add	r3, r2
 8002b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b62:	fb02 f203 	mul.w	r2, r2, r3
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	e004      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	623b      	str	r3, [r7, #32]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b82:	623b      	str	r3, [r7, #32]
      break;
 8002b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b86:	6a3b      	ldr	r3, [r7, #32]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3728      	adds	r7, #40	; 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc90      	pop	{r4, r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	08004dac 	.word	0x08004dac
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	007a1200 	.word	0x007a1200
 8002ba0:	003d0900 	.word	0x003d0900

08002ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	2000005c 	.word	0x2000005c

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bbc:	f7ff fff2 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08004dcc 	.word	0x08004dcc

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be4:	f7ff ffde 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	0adb      	lsrs	r3, r3, #11
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08004dcc 	.word	0x08004dcc

08002c08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <RCC_Delay+0x34>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <RCC_Delay+0x38>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0a5b      	lsrs	r3, r3, #9
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c24:	bf00      	nop
  }
  while (Delay --);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	60fa      	str	r2, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f9      	bne.n	8002c24 <RCC_Delay+0x1c>
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	2000005c 	.word	0x2000005c
 8002c40:	10624dd3 	.word	0x10624dd3

08002c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e041      	b.n	8002cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe fa46 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f000 fc28 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d001      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e03a      	b.n	8002d72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_TIM_Base_Start_IT+0x98>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d009      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d111      	bne.n	8002d60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d010      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	e007      	b.n	8002d70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800

08002d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e041      	b.n	8002e1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f839 	bl	8002e26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 fb86 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x24>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e022      	b.n	8002ea2 <HAL_TIM_PWM_Start+0x6a>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d109      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x3e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e015      	b.n	8002ea2 <HAL_TIM_PWM_Start+0x6a>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d109      	bne.n	8002e90 <HAL_TIM_PWM_Start+0x58>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e008      	b.n	8002ea2 <HAL_TIM_PWM_Start+0x6a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e05e      	b.n	8002f68 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start+0x82>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb8:	e013      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xaa>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Start+0x92>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	e00b      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xaa>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0xa2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed8:	e003      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xaa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fd74 	bl	80039d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_TIM_PWM_Start+0x138>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d107      	bne.n	8002f0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_TIM_PWM_Start+0x138>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00e      	beq.n	8002f32 <HAL_TIM_PWM_Start+0xfa>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d009      	beq.n	8002f32 <HAL_TIM_PWM_Start+0xfa>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_TIM_PWM_Start+0x13c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_TIM_PWM_Start+0xfa>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <HAL_TIM_PWM_Start+0x140>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d010      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	e007      	b.n	8002f66 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0202 	mvn.w	r2, #2
 8002fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa6f 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa62 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fa71 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d122      	bne.n	800302c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d11b      	bne.n	800302c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0204 	mvn.w	r2, #4
 8002ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa45 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa38 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fa47 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b08      	cmp	r3, #8
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0208 	mvn.w	r2, #8
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2204      	movs	r2, #4
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa1b 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa0e 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fa1d 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b10      	cmp	r3, #16
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b10      	cmp	r3, #16
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0210 	mvn.w	r2, #16
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2208      	movs	r2, #8
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9f1 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f9e4 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f9f3 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0201 	mvn.w	r2, #1
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fd12 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b80      	cmp	r3, #128	; 0x80
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fce1 	bl	8003aee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b40      	cmp	r3, #64	; 0x40
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f9b7 	bl	80034c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b20      	cmp	r3, #32
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0220 	mvn.w	r2, #32
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fcac 	bl	8003adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e0ac      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x174>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	f200 809f 	bhi.w	80032f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031f1 	.word	0x080031f1
 80031c0:	080032f5 	.word	0x080032f5
 80031c4:	080032f5 	.word	0x080032f5
 80031c8:	080032f5 	.word	0x080032f5
 80031cc:	08003231 	.word	0x08003231
 80031d0:	080032f5 	.word	0x080032f5
 80031d4:	080032f5 	.word	0x080032f5
 80031d8:	080032f5 	.word	0x080032f5
 80031dc:	08003273 	.word	0x08003273
 80031e0:	080032f5 	.word	0x080032f5
 80031e4:	080032f5 	.word	0x080032f5
 80031e8:	080032f5 	.word	0x080032f5
 80031ec:	080032b3 	.word	0x080032b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f9d0 	bl	800359c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0204 	bic.w	r2, r2, #4
 800321a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6999      	ldr	r1, [r3, #24]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	619a      	str	r2, [r3, #24]
      break;
 800322e:	e062      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fa16 	bl	8003668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6999      	ldr	r1, [r3, #24]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	021a      	lsls	r2, r3, #8
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	619a      	str	r2, [r3, #24]
      break;
 8003270:	e041      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fa5f 	bl	800373c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0208 	orr.w	r2, r2, #8
 800328c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0204 	bic.w	r2, r2, #4
 800329c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69d9      	ldr	r1, [r3, #28]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	61da      	str	r2, [r3, #28]
      break;
 80032b0:	e021      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 faa9 	bl	8003810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69d9      	ldr	r1, [r3, #28]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	021a      	lsls	r2, r3, #8
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	61da      	str	r2, [r3, #28]
      break;
 80032f2:	e000      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0x18>
 800331c:	2302      	movs	r3, #2
 800331e:	e0b3      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x180>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003346:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003358:	d03e      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0xd0>
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	f200 8087 	bhi.w	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	f000 8085 	beq.w	8003474 <HAL_TIM_ConfigClockSource+0x16c>
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	d87f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003370:	2b70      	cmp	r3, #112	; 0x70
 8003372:	d01a      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xa2>
 8003374:	2b70      	cmp	r3, #112	; 0x70
 8003376:	d87b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003378:	2b60      	cmp	r3, #96	; 0x60
 800337a:	d050      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x116>
 800337c:	2b60      	cmp	r3, #96	; 0x60
 800337e:	d877      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003380:	2b50      	cmp	r3, #80	; 0x50
 8003382:	d03c      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xf6>
 8003384:	2b50      	cmp	r3, #80	; 0x50
 8003386:	d873      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d058      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x136>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d86f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	d064      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x156>
 8003394:	2b30      	cmp	r3, #48	; 0x30
 8003396:	d86b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d060      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x156>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d867      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05c      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x156>
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d05a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033a8:	e062      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f000 faee 	bl	800399a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
      break;
 80033d6:	e04e      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f000 fad7 	bl	800399a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fa:	609a      	str	r2, [r3, #8]
      break;
 80033fc:	e03b      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	461a      	mov	r2, r3
 800340c:	f000 fa4e 	bl	80038ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2150      	movs	r1, #80	; 0x50
 8003416:	4618      	mov	r0, r3
 8003418:	f000 faa5 	bl	8003966 <TIM_ITRx_SetConfig>
      break;
 800341c:	e02b      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 fa6c 	bl	8003908 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2160      	movs	r1, #96	; 0x60
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fa95 	bl	8003966 <TIM_ITRx_SetConfig>
      break;
 800343c:	e01b      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fa2e 	bl	80038ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fa85 	bl	8003966 <TIM_ITRx_SetConfig>
      break;
 800345c:	e00b      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f000 fa7c 	bl	8003966 <TIM_ITRx_SetConfig>
        break;
 800346e:	e002      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003474:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a29      	ldr	r2, [pc, #164]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <TIM_Base_SetConfig+0xbc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a25      	ldr	r2, [pc, #148]	; (8003598 <TIM_Base_SetConfig+0xc0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <TIM_Base_SetConfig+0xbc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <TIM_Base_SetConfig+0xc0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a07      	ldr	r2, [pc, #28]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	615a      	str	r2, [r3, #20]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800

0800359c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 0302 	bic.w	r3, r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <TIM_OC1_SetConfig+0xc8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d10c      	bne.n	8003612 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0308 	bic.w	r3, r3, #8
 80035fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <TIM_OC1_SetConfig+0xc8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40012c00 	.word	0x40012c00

08003668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0210 	bic.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0320 	bic.w	r3, r3, #32
 80036b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <TIM_OC2_SetConfig+0xd0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10d      	bne.n	80036e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <TIM_OC2_SetConfig+0xd0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d113      	bne.n	8003714 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00

0800373c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a1d      	ldr	r2, [pc, #116]	; (800380c <TIM_OC3_SetConfig+0xd0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10d      	bne.n	80037b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <TIM_OC3_SetConfig+0xd0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d113      	bne.n	80037e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00

08003810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800385a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	031b      	lsls	r3, r3, #12
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <TIM_OC4_SetConfig+0x98>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d109      	bne.n	8003884 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00

080038ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	f023 0201 	bic.w	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 030a 	bic.w	r3, r3, #10
 80038e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f023 0210 	bic.w	r2, r3, #16
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003932:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	031b      	lsls	r3, r3, #12
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003944:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	f043 0307 	orr.w	r3, r3, #7
 8003988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800399a:	b480      	push	{r7}
 800399c:	b087      	sub	sp, #28
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	021a      	lsls	r2, r3, #8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	431a      	orrs	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	609a      	str	r2, [r3, #8]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2201      	movs	r2, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	401a      	ands	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e046      	b.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d009      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a10      	ldr	r2, [pc, #64]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10c      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800

08003adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e03f      	b.n	8003b92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fb52 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	; 0x24
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fc25 	bl	8004394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b08a      	sub	sp, #40	; 0x28
 8003b9e:	af02      	add	r7, sp, #8
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d17c      	bne.n	8003cb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_UART_Transmit+0x2c>
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e075      	b.n	8003cb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_UART_Transmit+0x3e>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e06e      	b.n	8003cb6 <HAL_UART_Transmit+0x11c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2221      	movs	r2, #33	; 0x21
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bee:	f7fe f87b 	bl	8001ce8 <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	88fa      	ldrh	r2, [r7, #6]
 8003bfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c08:	d108      	bne.n	8003c1c <HAL_UART_Transmit+0x82>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d104      	bne.n	8003c1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	e003      	b.n	8003c24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c2c:	e02a      	b.n	8003c84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2200      	movs	r2, #0
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fa11 	bl	8004060 <UART_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e036      	b.n	8003cb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	3302      	adds	r3, #2
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e007      	b.n	8003c76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3301      	adds	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1cf      	bne.n	8003c2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2140      	movs	r1, #64	; 0x40
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f9e1 	bl	8004060 <UART_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e006      	b.n	8003cb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_UART_IRQHandler+0x52>
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fa99 	bl	8004242 <UART_Receive_IT>
      return;
 8003d10:	e17b      	b.n	800400a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80b1 	beq.w	8003e7c <HAL_UART_IRQHandler+0x1bc>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_UART_IRQHandler+0x70>
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80a6 	beq.w	8003e7c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_UART_IRQHandler+0x90>
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0201 	orr.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_UART_IRQHandler+0xb0>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f043 0202 	orr.w	r2, r3, #2
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_UART_IRQHandler+0xd0>
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f043 0204 	orr.w	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00f      	beq.n	8003dba <HAL_UART_IRQHandler+0xfa>
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <HAL_UART_IRQHandler+0xee>
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f043 0208 	orr.w	r2, r3, #8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 811e 	beq.w	8004000 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_UART_IRQHandler+0x11e>
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fa32 	bl	8004242 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <HAL_UART_IRQHandler+0x146>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d031      	beq.n	8003e6a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f974 	bl	80040f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d023      	beq.n	8003e62 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d013      	beq.n	8003e5a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	4a76      	ldr	r2, [pc, #472]	; (8004010 <HAL_UART_IRQHandler+0x350>)
 8003e38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f8a4 	bl	8001f8c <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e54:	4610      	mov	r0, r2
 8003e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e00e      	b.n	8003e78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8ec 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	e00a      	b.n	8003e78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f8e8 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	e006      	b.n	8003e78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8e4 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e76:	e0c3      	b.n	8004000 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	bf00      	nop
    return;
 8003e7a:	e0c1      	b.n	8004000 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	f040 80a1 	bne.w	8003fc8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 809b 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8095 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04e      	beq.n	8003f60 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ecc:	8a3b      	ldrh	r3, [r7, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8098 	beq.w	8004004 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ed8:	8a3a      	ldrh	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	f080 8092 	bcs.w	8004004 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8a3a      	ldrh	r2, [r7, #16]
 8003ee4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d02b      	beq.n	8003f48 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003efe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0210 	bic.w	r2, r2, #16
 8003f3c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd ffe7 	bl	8001f16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f876 	bl	800404a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f5e:	e051      	b.n	8004004 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d047      	beq.n	8004008 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f78:	8a7b      	ldrh	r3, [r7, #18]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d044      	beq.n	8004008 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f8c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0210 	bic.w	r2, r2, #16
 8003fba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fbc:	8a7b      	ldrh	r3, [r7, #18]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f842 	bl	800404a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fc6:	e01f      	b.n	8004008 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x324>
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8c9 	bl	8004174 <UART_Transmit_IT>
    return;
 8003fe2:	e012      	b.n	800400a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <HAL_UART_IRQHandler+0x34a>
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f90a 	bl	8004212 <UART_EndTransmit_IT>
    return;
 8003ffe:	e004      	b.n	800400a <HAL_UART_IRQHandler+0x34a>
    return;
 8004000:	bf00      	nop
 8004002:	e002      	b.n	800400a <HAL_UART_IRQHandler+0x34a>
      return;
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <HAL_UART_IRQHandler+0x34a>
      return;
 8004008:	bf00      	nop
  }
}
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	0800414d 	.word	0x0800414d

08004014 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	460b      	mov	r3, r1
 8004054:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004070:	e02c      	b.n	80040cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d028      	beq.n	80040cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <UART_WaitOnFlagUntilTimeout+0x30>
 8004080:	f7fd fe32 	bl	8001ce8 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	429a      	cmp	r2, r3
 800408e:	d21d      	bcs.n	80040cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800409e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e00f      	b.n	80040ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d0c3      	beq.n	8004072 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800410a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0210 	bic.w	r2, r2, #16
 8004132:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff ff66 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b21      	cmp	r3, #33	; 0x21
 8004186:	d13e      	bne.n	8004206 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004190:	d114      	bne.n	80041bc <UART_Transmit_IT+0x48>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d110      	bne.n	80041bc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	1c9a      	adds	r2, r3, #2
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	621a      	str	r2, [r3, #32]
 80041ba:	e008      	b.n	80041ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	1c59      	adds	r1, r3, #1
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6211      	str	r1, [r2, #32]
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4619      	mov	r1, r3
 80041dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004200:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004206:	2302      	movs	r3, #2
  }
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004228:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff feee 	bl	8004014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b22      	cmp	r3, #34	; 0x22
 8004254:	f040 8099 	bne.w	800438a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d117      	bne.n	8004292 <UART_Receive_IT+0x50>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d113      	bne.n	8004292 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004280:	b29a      	uxth	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	1c9a      	adds	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
 8004290:	e026      	b.n	80042e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a4:	d007      	beq.n	80042b6 <UART_Receive_IT+0x74>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <UART_Receive_IT+0x82>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e008      	b.n	80042d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4619      	mov	r1, r3
 80042ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d148      	bne.n	8004386 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0220 	bic.w	r2, r2, #32
 8004302:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004312:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	d123      	bne.n	800437c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0210 	bic.w	r2, r2, #16
 8004348:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d10a      	bne.n	800436e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fe68 	bl	800404a <HAL_UARTEx_RxEventCallback>
 800437a:	e002      	b.n	8004382 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fe52 	bl	8004026 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e002      	b.n	800438c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043ce:	f023 030c 	bic.w	r3, r3, #12
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	430b      	orrs	r3, r1
 80043da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <UART_SetConfig+0x114>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7fe fbf0 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	e002      	b.n	800440a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe fbd8 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8004408:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	4a22      	ldr	r2, [pc, #136]	; (80044ac <UART_SetConfig+0x118>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	0119      	lsls	r1, r3, #4
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <UART_SetConfig+0x118>)
 8004442:	fba3 0302 	umull	r0, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2064      	movs	r0, #100	; 0x64
 800444a:	fb00 f303 	mul.w	r3, r0, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	3332      	adds	r3, #50	; 0x32
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <UART_SetConfig+0x118>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004460:	4419      	add	r1, r3
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009a      	lsls	r2, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	fbb2 f2f3 	udiv	r2, r2, r3
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <UART_SetConfig+0x118>)
 800447a:	fba3 0302 	umull	r0, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2064      	movs	r0, #100	; 0x64
 8004482:	fb00 f303 	mul.w	r3, r0, r3
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	3332      	adds	r3, #50	; 0x32
 800448c:	4a07      	ldr	r2, [pc, #28]	; (80044ac <UART_SetConfig+0x118>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	f003 020f 	and.w	r2, r3, #15
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	440a      	add	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40013800 	.word	0x40013800
 80044ac:	51eb851f 	.word	0x51eb851f

080044b0 <__errno>:
 80044b0:	4b01      	ldr	r3, [pc, #4]	; (80044b8 <__errno+0x8>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000068 	.word	0x20000068

080044bc <__libc_init_array>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	2600      	movs	r6, #0
 80044c0:	4d0c      	ldr	r5, [pc, #48]	; (80044f4 <__libc_init_array+0x38>)
 80044c2:	4c0d      	ldr	r4, [pc, #52]	; (80044f8 <__libc_init_array+0x3c>)
 80044c4:	1b64      	subs	r4, r4, r5
 80044c6:	10a4      	asrs	r4, r4, #2
 80044c8:	42a6      	cmp	r6, r4
 80044ca:	d109      	bne.n	80044e0 <__libc_init_array+0x24>
 80044cc:	f000 fc5c 	bl	8004d88 <_init>
 80044d0:	2600      	movs	r6, #0
 80044d2:	4d0a      	ldr	r5, [pc, #40]	; (80044fc <__libc_init_array+0x40>)
 80044d4:	4c0a      	ldr	r4, [pc, #40]	; (8004500 <__libc_init_array+0x44>)
 80044d6:	1b64      	subs	r4, r4, r5
 80044d8:	10a4      	asrs	r4, r4, #2
 80044da:	42a6      	cmp	r6, r4
 80044dc:	d105      	bne.n	80044ea <__libc_init_array+0x2e>
 80044de:	bd70      	pop	{r4, r5, r6, pc}
 80044e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e4:	4798      	blx	r3
 80044e6:	3601      	adds	r6, #1
 80044e8:	e7ee      	b.n	80044c8 <__libc_init_array+0xc>
 80044ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ee:	4798      	blx	r3
 80044f0:	3601      	adds	r6, #1
 80044f2:	e7f2      	b.n	80044da <__libc_init_array+0x1e>
 80044f4:	08004e08 	.word	0x08004e08
 80044f8:	08004e08 	.word	0x08004e08
 80044fc:	08004e08 	.word	0x08004e08
 8004500:	08004e0c 	.word	0x08004e0c

08004504 <memset>:
 8004504:	4603      	mov	r3, r0
 8004506:	4402      	add	r2, r0
 8004508:	4293      	cmp	r3, r2
 800450a:	d100      	bne.n	800450e <memset+0xa>
 800450c:	4770      	bx	lr
 800450e:	f803 1b01 	strb.w	r1, [r3], #1
 8004512:	e7f9      	b.n	8004508 <memset+0x4>

08004514 <siprintf>:
 8004514:	b40e      	push	{r1, r2, r3}
 8004516:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800451a:	b500      	push	{lr}
 800451c:	b09c      	sub	sp, #112	; 0x70
 800451e:	ab1d      	add	r3, sp, #116	; 0x74
 8004520:	9002      	str	r0, [sp, #8]
 8004522:	9006      	str	r0, [sp, #24]
 8004524:	9107      	str	r1, [sp, #28]
 8004526:	9104      	str	r1, [sp, #16]
 8004528:	4808      	ldr	r0, [pc, #32]	; (800454c <siprintf+0x38>)
 800452a:	4909      	ldr	r1, [pc, #36]	; (8004550 <siprintf+0x3c>)
 800452c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004530:	9105      	str	r1, [sp, #20]
 8004532:	6800      	ldr	r0, [r0, #0]
 8004534:	a902      	add	r1, sp, #8
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	f000 f868 	bl	800460c <_svfiprintf_r>
 800453c:	2200      	movs	r2, #0
 800453e:	9b02      	ldr	r3, [sp, #8]
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	b01c      	add	sp, #112	; 0x70
 8004544:	f85d eb04 	ldr.w	lr, [sp], #4
 8004548:	b003      	add	sp, #12
 800454a:	4770      	bx	lr
 800454c:	20000068 	.word	0x20000068
 8004550:	ffff0208 	.word	0xffff0208

08004554 <__ssputs_r>:
 8004554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004558:	688e      	ldr	r6, [r1, #8]
 800455a:	4682      	mov	sl, r0
 800455c:	429e      	cmp	r6, r3
 800455e:	460c      	mov	r4, r1
 8004560:	4690      	mov	r8, r2
 8004562:	461f      	mov	r7, r3
 8004564:	d838      	bhi.n	80045d8 <__ssputs_r+0x84>
 8004566:	898a      	ldrh	r2, [r1, #12]
 8004568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800456c:	d032      	beq.n	80045d4 <__ssputs_r+0x80>
 800456e:	6825      	ldr	r5, [r4, #0]
 8004570:	6909      	ldr	r1, [r1, #16]
 8004572:	3301      	adds	r3, #1
 8004574:	eba5 0901 	sub.w	r9, r5, r1
 8004578:	6965      	ldr	r5, [r4, #20]
 800457a:	444b      	add	r3, r9
 800457c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004580:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004584:	106d      	asrs	r5, r5, #1
 8004586:	429d      	cmp	r5, r3
 8004588:	bf38      	it	cc
 800458a:	461d      	movcc	r5, r3
 800458c:	0553      	lsls	r3, r2, #21
 800458e:	d531      	bpl.n	80045f4 <__ssputs_r+0xa0>
 8004590:	4629      	mov	r1, r5
 8004592:	f000 fb53 	bl	8004c3c <_malloc_r>
 8004596:	4606      	mov	r6, r0
 8004598:	b950      	cbnz	r0, 80045b0 <__ssputs_r+0x5c>
 800459a:	230c      	movs	r3, #12
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	f8ca 3000 	str.w	r3, [sl]
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	464a      	mov	r2, r9
 80045b2:	6921      	ldr	r1, [r4, #16]
 80045b4:	f000 face 	bl	8004b54 <memcpy>
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	6126      	str	r6, [r4, #16]
 80045c6:	444e      	add	r6, r9
 80045c8:	6026      	str	r6, [r4, #0]
 80045ca:	463e      	mov	r6, r7
 80045cc:	6165      	str	r5, [r4, #20]
 80045ce:	eba5 0509 	sub.w	r5, r5, r9
 80045d2:	60a5      	str	r5, [r4, #8]
 80045d4:	42be      	cmp	r6, r7
 80045d6:	d900      	bls.n	80045da <__ssputs_r+0x86>
 80045d8:	463e      	mov	r6, r7
 80045da:	4632      	mov	r2, r6
 80045dc:	4641      	mov	r1, r8
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	f000 fac6 	bl	8004b70 <memmove>
 80045e4:	68a3      	ldr	r3, [r4, #8]
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	1b9b      	subs	r3, r3, r6
 80045ea:	4432      	add	r2, r6
 80045ec:	2000      	movs	r0, #0
 80045ee:	60a3      	str	r3, [r4, #8]
 80045f0:	6022      	str	r2, [r4, #0]
 80045f2:	e7db      	b.n	80045ac <__ssputs_r+0x58>
 80045f4:	462a      	mov	r2, r5
 80045f6:	f000 fb7b 	bl	8004cf0 <_realloc_r>
 80045fa:	4606      	mov	r6, r0
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d1e1      	bne.n	80045c4 <__ssputs_r+0x70>
 8004600:	4650      	mov	r0, sl
 8004602:	6921      	ldr	r1, [r4, #16]
 8004604:	f000 face 	bl	8004ba4 <_free_r>
 8004608:	e7c7      	b.n	800459a <__ssputs_r+0x46>
	...

0800460c <_svfiprintf_r>:
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	4698      	mov	r8, r3
 8004612:	898b      	ldrh	r3, [r1, #12]
 8004614:	4607      	mov	r7, r0
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	460d      	mov	r5, r1
 800461a:	4614      	mov	r4, r2
 800461c:	b09d      	sub	sp, #116	; 0x74
 800461e:	d50e      	bpl.n	800463e <_svfiprintf_r+0x32>
 8004620:	690b      	ldr	r3, [r1, #16]
 8004622:	b963      	cbnz	r3, 800463e <_svfiprintf_r+0x32>
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	f000 fb09 	bl	8004c3c <_malloc_r>
 800462a:	6028      	str	r0, [r5, #0]
 800462c:	6128      	str	r0, [r5, #16]
 800462e:	b920      	cbnz	r0, 800463a <_svfiprintf_r+0x2e>
 8004630:	230c      	movs	r3, #12
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	e0d1      	b.n	80047de <_svfiprintf_r+0x1d2>
 800463a:	2340      	movs	r3, #64	; 0x40
 800463c:	616b      	str	r3, [r5, #20]
 800463e:	2300      	movs	r3, #0
 8004640:	9309      	str	r3, [sp, #36]	; 0x24
 8004642:	2320      	movs	r3, #32
 8004644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004648:	2330      	movs	r3, #48	; 0x30
 800464a:	f04f 0901 	mov.w	r9, #1
 800464e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004652:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047f8 <_svfiprintf_r+0x1ec>
 8004656:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800465a:	4623      	mov	r3, r4
 800465c:	469a      	mov	sl, r3
 800465e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004662:	b10a      	cbz	r2, 8004668 <_svfiprintf_r+0x5c>
 8004664:	2a25      	cmp	r2, #37	; 0x25
 8004666:	d1f9      	bne.n	800465c <_svfiprintf_r+0x50>
 8004668:	ebba 0b04 	subs.w	fp, sl, r4
 800466c:	d00b      	beq.n	8004686 <_svfiprintf_r+0x7a>
 800466e:	465b      	mov	r3, fp
 8004670:	4622      	mov	r2, r4
 8004672:	4629      	mov	r1, r5
 8004674:	4638      	mov	r0, r7
 8004676:	f7ff ff6d 	bl	8004554 <__ssputs_r>
 800467a:	3001      	adds	r0, #1
 800467c:	f000 80aa 	beq.w	80047d4 <_svfiprintf_r+0x1c8>
 8004680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004682:	445a      	add	r2, fp
 8004684:	9209      	str	r2, [sp, #36]	; 0x24
 8004686:	f89a 3000 	ldrb.w	r3, [sl]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80a2 	beq.w	80047d4 <_svfiprintf_r+0x1c8>
 8004690:	2300      	movs	r3, #0
 8004692:	f04f 32ff 	mov.w	r2, #4294967295
 8004696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800469a:	f10a 0a01 	add.w	sl, sl, #1
 800469e:	9304      	str	r3, [sp, #16]
 80046a0:	9307      	str	r3, [sp, #28]
 80046a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046a6:	931a      	str	r3, [sp, #104]	; 0x68
 80046a8:	4654      	mov	r4, sl
 80046aa:	2205      	movs	r2, #5
 80046ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b0:	4851      	ldr	r0, [pc, #324]	; (80047f8 <_svfiprintf_r+0x1ec>)
 80046b2:	f000 fa41 	bl	8004b38 <memchr>
 80046b6:	9a04      	ldr	r2, [sp, #16]
 80046b8:	b9d8      	cbnz	r0, 80046f2 <_svfiprintf_r+0xe6>
 80046ba:	06d0      	lsls	r0, r2, #27
 80046bc:	bf44      	itt	mi
 80046be:	2320      	movmi	r3, #32
 80046c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046c4:	0711      	lsls	r1, r2, #28
 80046c6:	bf44      	itt	mi
 80046c8:	232b      	movmi	r3, #43	; 0x2b
 80046ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ce:	f89a 3000 	ldrb.w	r3, [sl]
 80046d2:	2b2a      	cmp	r3, #42	; 0x2a
 80046d4:	d015      	beq.n	8004702 <_svfiprintf_r+0xf6>
 80046d6:	4654      	mov	r4, sl
 80046d8:	2000      	movs	r0, #0
 80046da:	f04f 0c0a 	mov.w	ip, #10
 80046de:	9a07      	ldr	r2, [sp, #28]
 80046e0:	4621      	mov	r1, r4
 80046e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046e6:	3b30      	subs	r3, #48	; 0x30
 80046e8:	2b09      	cmp	r3, #9
 80046ea:	d94e      	bls.n	800478a <_svfiprintf_r+0x17e>
 80046ec:	b1b0      	cbz	r0, 800471c <_svfiprintf_r+0x110>
 80046ee:	9207      	str	r2, [sp, #28]
 80046f0:	e014      	b.n	800471c <_svfiprintf_r+0x110>
 80046f2:	eba0 0308 	sub.w	r3, r0, r8
 80046f6:	fa09 f303 	lsl.w	r3, r9, r3
 80046fa:	4313      	orrs	r3, r2
 80046fc:	46a2      	mov	sl, r4
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	e7d2      	b.n	80046a8 <_svfiprintf_r+0x9c>
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	1d19      	adds	r1, r3, #4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	9103      	str	r1, [sp, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	bfbb      	ittet	lt
 800470e:	425b      	neglt	r3, r3
 8004710:	f042 0202 	orrlt.w	r2, r2, #2
 8004714:	9307      	strge	r3, [sp, #28]
 8004716:	9307      	strlt	r3, [sp, #28]
 8004718:	bfb8      	it	lt
 800471a:	9204      	strlt	r2, [sp, #16]
 800471c:	7823      	ldrb	r3, [r4, #0]
 800471e:	2b2e      	cmp	r3, #46	; 0x2e
 8004720:	d10c      	bne.n	800473c <_svfiprintf_r+0x130>
 8004722:	7863      	ldrb	r3, [r4, #1]
 8004724:	2b2a      	cmp	r3, #42	; 0x2a
 8004726:	d135      	bne.n	8004794 <_svfiprintf_r+0x188>
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	3402      	adds	r4, #2
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	9203      	str	r2, [sp, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	bfb8      	it	lt
 8004736:	f04f 33ff 	movlt.w	r3, #4294967295
 800473a:	9305      	str	r3, [sp, #20]
 800473c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004808 <_svfiprintf_r+0x1fc>
 8004740:	2203      	movs	r2, #3
 8004742:	4650      	mov	r0, sl
 8004744:	7821      	ldrb	r1, [r4, #0]
 8004746:	f000 f9f7 	bl	8004b38 <memchr>
 800474a:	b140      	cbz	r0, 800475e <_svfiprintf_r+0x152>
 800474c:	2340      	movs	r3, #64	; 0x40
 800474e:	eba0 000a 	sub.w	r0, r0, sl
 8004752:	fa03 f000 	lsl.w	r0, r3, r0
 8004756:	9b04      	ldr	r3, [sp, #16]
 8004758:	3401      	adds	r4, #1
 800475a:	4303      	orrs	r3, r0
 800475c:	9304      	str	r3, [sp, #16]
 800475e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004762:	2206      	movs	r2, #6
 8004764:	4825      	ldr	r0, [pc, #148]	; (80047fc <_svfiprintf_r+0x1f0>)
 8004766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800476a:	f000 f9e5 	bl	8004b38 <memchr>
 800476e:	2800      	cmp	r0, #0
 8004770:	d038      	beq.n	80047e4 <_svfiprintf_r+0x1d8>
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <_svfiprintf_r+0x1f4>)
 8004774:	bb1b      	cbnz	r3, 80047be <_svfiprintf_r+0x1b2>
 8004776:	9b03      	ldr	r3, [sp, #12]
 8004778:	3307      	adds	r3, #7
 800477a:	f023 0307 	bic.w	r3, r3, #7
 800477e:	3308      	adds	r3, #8
 8004780:	9303      	str	r3, [sp, #12]
 8004782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004784:	4433      	add	r3, r6
 8004786:	9309      	str	r3, [sp, #36]	; 0x24
 8004788:	e767      	b.n	800465a <_svfiprintf_r+0x4e>
 800478a:	460c      	mov	r4, r1
 800478c:	2001      	movs	r0, #1
 800478e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004792:	e7a5      	b.n	80046e0 <_svfiprintf_r+0xd4>
 8004794:	2300      	movs	r3, #0
 8004796:	f04f 0c0a 	mov.w	ip, #10
 800479a:	4619      	mov	r1, r3
 800479c:	3401      	adds	r4, #1
 800479e:	9305      	str	r3, [sp, #20]
 80047a0:	4620      	mov	r0, r4
 80047a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047a6:	3a30      	subs	r2, #48	; 0x30
 80047a8:	2a09      	cmp	r2, #9
 80047aa:	d903      	bls.n	80047b4 <_svfiprintf_r+0x1a8>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0c5      	beq.n	800473c <_svfiprintf_r+0x130>
 80047b0:	9105      	str	r1, [sp, #20]
 80047b2:	e7c3      	b.n	800473c <_svfiprintf_r+0x130>
 80047b4:	4604      	mov	r4, r0
 80047b6:	2301      	movs	r3, #1
 80047b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80047bc:	e7f0      	b.n	80047a0 <_svfiprintf_r+0x194>
 80047be:	ab03      	add	r3, sp, #12
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	462a      	mov	r2, r5
 80047c4:	4638      	mov	r0, r7
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <_svfiprintf_r+0x1f8>)
 80047c8:	a904      	add	r1, sp, #16
 80047ca:	f3af 8000 	nop.w
 80047ce:	1c42      	adds	r2, r0, #1
 80047d0:	4606      	mov	r6, r0
 80047d2:	d1d6      	bne.n	8004782 <_svfiprintf_r+0x176>
 80047d4:	89ab      	ldrh	r3, [r5, #12]
 80047d6:	065b      	lsls	r3, r3, #25
 80047d8:	f53f af2c 	bmi.w	8004634 <_svfiprintf_r+0x28>
 80047dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047de:	b01d      	add	sp, #116	; 0x74
 80047e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e4:	ab03      	add	r3, sp, #12
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	462a      	mov	r2, r5
 80047ea:	4638      	mov	r0, r7
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <_svfiprintf_r+0x1f8>)
 80047ee:	a904      	add	r1, sp, #16
 80047f0:	f000 f87c 	bl	80048ec <_printf_i>
 80047f4:	e7eb      	b.n	80047ce <_svfiprintf_r+0x1c2>
 80047f6:	bf00      	nop
 80047f8:	08004dd4 	.word	0x08004dd4
 80047fc:	08004dde 	.word	0x08004dde
 8004800:	00000000 	.word	0x00000000
 8004804:	08004555 	.word	0x08004555
 8004808:	08004dda 	.word	0x08004dda

0800480c <_printf_common>:
 800480c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004810:	4616      	mov	r6, r2
 8004812:	4699      	mov	r9, r3
 8004814:	688a      	ldr	r2, [r1, #8]
 8004816:	690b      	ldr	r3, [r1, #16]
 8004818:	4607      	mov	r7, r0
 800481a:	4293      	cmp	r3, r2
 800481c:	bfb8      	it	lt
 800481e:	4613      	movlt	r3, r2
 8004820:	6033      	str	r3, [r6, #0]
 8004822:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004826:	460c      	mov	r4, r1
 8004828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800482c:	b10a      	cbz	r2, 8004832 <_printf_common+0x26>
 800482e:	3301      	adds	r3, #1
 8004830:	6033      	str	r3, [r6, #0]
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	0699      	lsls	r1, r3, #26
 8004836:	bf42      	ittt	mi
 8004838:	6833      	ldrmi	r3, [r6, #0]
 800483a:	3302      	addmi	r3, #2
 800483c:	6033      	strmi	r3, [r6, #0]
 800483e:	6825      	ldr	r5, [r4, #0]
 8004840:	f015 0506 	ands.w	r5, r5, #6
 8004844:	d106      	bne.n	8004854 <_printf_common+0x48>
 8004846:	f104 0a19 	add.w	sl, r4, #25
 800484a:	68e3      	ldr	r3, [r4, #12]
 800484c:	6832      	ldr	r2, [r6, #0]
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	42ab      	cmp	r3, r5
 8004852:	dc28      	bgt.n	80048a6 <_printf_common+0x9a>
 8004854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004858:	1e13      	subs	r3, r2, #0
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	bf18      	it	ne
 800485e:	2301      	movne	r3, #1
 8004860:	0692      	lsls	r2, r2, #26
 8004862:	d42d      	bmi.n	80048c0 <_printf_common+0xb4>
 8004864:	4649      	mov	r1, r9
 8004866:	4638      	mov	r0, r7
 8004868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800486c:	47c0      	blx	r8
 800486e:	3001      	adds	r0, #1
 8004870:	d020      	beq.n	80048b4 <_printf_common+0xa8>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	68e5      	ldr	r5, [r4, #12]
 8004876:	f003 0306 	and.w	r3, r3, #6
 800487a:	2b04      	cmp	r3, #4
 800487c:	bf18      	it	ne
 800487e:	2500      	movne	r5, #0
 8004880:	6832      	ldr	r2, [r6, #0]
 8004882:	f04f 0600 	mov.w	r6, #0
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	bf08      	it	eq
 800488a:	1aad      	subeq	r5, r5, r2
 800488c:	6922      	ldr	r2, [r4, #16]
 800488e:	bf08      	it	eq
 8004890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004894:	4293      	cmp	r3, r2
 8004896:	bfc4      	itt	gt
 8004898:	1a9b      	subgt	r3, r3, r2
 800489a:	18ed      	addgt	r5, r5, r3
 800489c:	341a      	adds	r4, #26
 800489e:	42b5      	cmp	r5, r6
 80048a0:	d11a      	bne.n	80048d8 <_printf_common+0xcc>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e008      	b.n	80048b8 <_printf_common+0xac>
 80048a6:	2301      	movs	r3, #1
 80048a8:	4652      	mov	r2, sl
 80048aa:	4649      	mov	r1, r9
 80048ac:	4638      	mov	r0, r7
 80048ae:	47c0      	blx	r8
 80048b0:	3001      	adds	r0, #1
 80048b2:	d103      	bne.n	80048bc <_printf_common+0xb0>
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048bc:	3501      	adds	r5, #1
 80048be:	e7c4      	b.n	800484a <_printf_common+0x3e>
 80048c0:	2030      	movs	r0, #48	; 0x30
 80048c2:	18e1      	adds	r1, r4, r3
 80048c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ce:	4422      	add	r2, r4
 80048d0:	3302      	adds	r3, #2
 80048d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048d6:	e7c5      	b.n	8004864 <_printf_common+0x58>
 80048d8:	2301      	movs	r3, #1
 80048da:	4622      	mov	r2, r4
 80048dc:	4649      	mov	r1, r9
 80048de:	4638      	mov	r0, r7
 80048e0:	47c0      	blx	r8
 80048e2:	3001      	adds	r0, #1
 80048e4:	d0e6      	beq.n	80048b4 <_printf_common+0xa8>
 80048e6:	3601      	adds	r6, #1
 80048e8:	e7d9      	b.n	800489e <_printf_common+0x92>
	...

080048ec <_printf_i>:
 80048ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	460c      	mov	r4, r1
 80048f2:	7e27      	ldrb	r7, [r4, #24]
 80048f4:	4691      	mov	r9, r2
 80048f6:	2f78      	cmp	r7, #120	; 0x78
 80048f8:	4680      	mov	r8, r0
 80048fa:	469a      	mov	sl, r3
 80048fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004902:	d807      	bhi.n	8004914 <_printf_i+0x28>
 8004904:	2f62      	cmp	r7, #98	; 0x62
 8004906:	d80a      	bhi.n	800491e <_printf_i+0x32>
 8004908:	2f00      	cmp	r7, #0
 800490a:	f000 80d9 	beq.w	8004ac0 <_printf_i+0x1d4>
 800490e:	2f58      	cmp	r7, #88	; 0x58
 8004910:	f000 80a4 	beq.w	8004a5c <_printf_i+0x170>
 8004914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800491c:	e03a      	b.n	8004994 <_printf_i+0xa8>
 800491e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004922:	2b15      	cmp	r3, #21
 8004924:	d8f6      	bhi.n	8004914 <_printf_i+0x28>
 8004926:	a001      	add	r0, pc, #4	; (adr r0, 800492c <_printf_i+0x40>)
 8004928:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800492c:	08004985 	.word	0x08004985
 8004930:	08004999 	.word	0x08004999
 8004934:	08004915 	.word	0x08004915
 8004938:	08004915 	.word	0x08004915
 800493c:	08004915 	.word	0x08004915
 8004940:	08004915 	.word	0x08004915
 8004944:	08004999 	.word	0x08004999
 8004948:	08004915 	.word	0x08004915
 800494c:	08004915 	.word	0x08004915
 8004950:	08004915 	.word	0x08004915
 8004954:	08004915 	.word	0x08004915
 8004958:	08004aa7 	.word	0x08004aa7
 800495c:	080049c9 	.word	0x080049c9
 8004960:	08004a89 	.word	0x08004a89
 8004964:	08004915 	.word	0x08004915
 8004968:	08004915 	.word	0x08004915
 800496c:	08004ac9 	.word	0x08004ac9
 8004970:	08004915 	.word	0x08004915
 8004974:	080049c9 	.word	0x080049c9
 8004978:	08004915 	.word	0x08004915
 800497c:	08004915 	.word	0x08004915
 8004980:	08004a91 	.word	0x08004a91
 8004984:	680b      	ldr	r3, [r1, #0]
 8004986:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800498a:	1d1a      	adds	r2, r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	600a      	str	r2, [r1, #0]
 8004990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004994:	2301      	movs	r3, #1
 8004996:	e0a4      	b.n	8004ae2 <_printf_i+0x1f6>
 8004998:	6825      	ldr	r5, [r4, #0]
 800499a:	6808      	ldr	r0, [r1, #0]
 800499c:	062e      	lsls	r6, r5, #24
 800499e:	f100 0304 	add.w	r3, r0, #4
 80049a2:	d50a      	bpl.n	80049ba <_printf_i+0xce>
 80049a4:	6805      	ldr	r5, [r0, #0]
 80049a6:	600b      	str	r3, [r1, #0]
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	da03      	bge.n	80049b4 <_printf_i+0xc8>
 80049ac:	232d      	movs	r3, #45	; 0x2d
 80049ae:	426d      	negs	r5, r5
 80049b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b4:	230a      	movs	r3, #10
 80049b6:	485e      	ldr	r0, [pc, #376]	; (8004b30 <_printf_i+0x244>)
 80049b8:	e019      	b.n	80049ee <_printf_i+0x102>
 80049ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049be:	6805      	ldr	r5, [r0, #0]
 80049c0:	600b      	str	r3, [r1, #0]
 80049c2:	bf18      	it	ne
 80049c4:	b22d      	sxthne	r5, r5
 80049c6:	e7ef      	b.n	80049a8 <_printf_i+0xbc>
 80049c8:	680b      	ldr	r3, [r1, #0]
 80049ca:	6825      	ldr	r5, [r4, #0]
 80049cc:	1d18      	adds	r0, r3, #4
 80049ce:	6008      	str	r0, [r1, #0]
 80049d0:	0628      	lsls	r0, r5, #24
 80049d2:	d501      	bpl.n	80049d8 <_printf_i+0xec>
 80049d4:	681d      	ldr	r5, [r3, #0]
 80049d6:	e002      	b.n	80049de <_printf_i+0xf2>
 80049d8:	0669      	lsls	r1, r5, #25
 80049da:	d5fb      	bpl.n	80049d4 <_printf_i+0xe8>
 80049dc:	881d      	ldrh	r5, [r3, #0]
 80049de:	2f6f      	cmp	r7, #111	; 0x6f
 80049e0:	bf0c      	ite	eq
 80049e2:	2308      	moveq	r3, #8
 80049e4:	230a      	movne	r3, #10
 80049e6:	4852      	ldr	r0, [pc, #328]	; (8004b30 <_printf_i+0x244>)
 80049e8:	2100      	movs	r1, #0
 80049ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ee:	6866      	ldr	r6, [r4, #4]
 80049f0:	2e00      	cmp	r6, #0
 80049f2:	bfa8      	it	ge
 80049f4:	6821      	ldrge	r1, [r4, #0]
 80049f6:	60a6      	str	r6, [r4, #8]
 80049f8:	bfa4      	itt	ge
 80049fa:	f021 0104 	bicge.w	r1, r1, #4
 80049fe:	6021      	strge	r1, [r4, #0]
 8004a00:	b90d      	cbnz	r5, 8004a06 <_printf_i+0x11a>
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	d04d      	beq.n	8004aa2 <_printf_i+0x1b6>
 8004a06:	4616      	mov	r6, r2
 8004a08:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a0c:	fb03 5711 	mls	r7, r3, r1, r5
 8004a10:	5dc7      	ldrb	r7, [r0, r7]
 8004a12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a16:	462f      	mov	r7, r5
 8004a18:	42bb      	cmp	r3, r7
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	d9f4      	bls.n	8004a08 <_printf_i+0x11c>
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d10b      	bne.n	8004a3a <_printf_i+0x14e>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	07df      	lsls	r7, r3, #31
 8004a26:	d508      	bpl.n	8004a3a <_printf_i+0x14e>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	6861      	ldr	r1, [r4, #4]
 8004a2c:	4299      	cmp	r1, r3
 8004a2e:	bfde      	ittt	le
 8004a30:	2330      	movle	r3, #48	; 0x30
 8004a32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a3a:	1b92      	subs	r2, r2, r6
 8004a3c:	6122      	str	r2, [r4, #16]
 8004a3e:	464b      	mov	r3, r9
 8004a40:	4621      	mov	r1, r4
 8004a42:	4640      	mov	r0, r8
 8004a44:	f8cd a000 	str.w	sl, [sp]
 8004a48:	aa03      	add	r2, sp, #12
 8004a4a:	f7ff fedf 	bl	800480c <_printf_common>
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d14c      	bne.n	8004aec <_printf_i+0x200>
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295
 8004a56:	b004      	add	sp, #16
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	4834      	ldr	r0, [pc, #208]	; (8004b30 <_printf_i+0x244>)
 8004a5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a62:	680e      	ldr	r6, [r1, #0]
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a6a:	061f      	lsls	r7, r3, #24
 8004a6c:	600e      	str	r6, [r1, #0]
 8004a6e:	d514      	bpl.n	8004a9a <_printf_i+0x1ae>
 8004a70:	07d9      	lsls	r1, r3, #31
 8004a72:	bf44      	itt	mi
 8004a74:	f043 0320 	orrmi.w	r3, r3, #32
 8004a78:	6023      	strmi	r3, [r4, #0]
 8004a7a:	b91d      	cbnz	r5, 8004a84 <_printf_i+0x198>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	f023 0320 	bic.w	r3, r3, #32
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	2310      	movs	r3, #16
 8004a86:	e7af      	b.n	80049e8 <_printf_i+0xfc>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	f043 0320 	orr.w	r3, r3, #32
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	2378      	movs	r3, #120	; 0x78
 8004a92:	4828      	ldr	r0, [pc, #160]	; (8004b34 <_printf_i+0x248>)
 8004a94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a98:	e7e3      	b.n	8004a62 <_printf_i+0x176>
 8004a9a:	065e      	lsls	r6, r3, #25
 8004a9c:	bf48      	it	mi
 8004a9e:	b2ad      	uxthmi	r5, r5
 8004aa0:	e7e6      	b.n	8004a70 <_printf_i+0x184>
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	e7bb      	b.n	8004a1e <_printf_i+0x132>
 8004aa6:	680b      	ldr	r3, [r1, #0]
 8004aa8:	6826      	ldr	r6, [r4, #0]
 8004aaa:	1d1d      	adds	r5, r3, #4
 8004aac:	6960      	ldr	r0, [r4, #20]
 8004aae:	600d      	str	r5, [r1, #0]
 8004ab0:	0635      	lsls	r5, r6, #24
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	d501      	bpl.n	8004aba <_printf_i+0x1ce>
 8004ab6:	6018      	str	r0, [r3, #0]
 8004ab8:	e002      	b.n	8004ac0 <_printf_i+0x1d4>
 8004aba:	0671      	lsls	r1, r6, #25
 8004abc:	d5fb      	bpl.n	8004ab6 <_printf_i+0x1ca>
 8004abe:	8018      	strh	r0, [r3, #0]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4616      	mov	r6, r2
 8004ac4:	6123      	str	r3, [r4, #16]
 8004ac6:	e7ba      	b.n	8004a3e <_printf_i+0x152>
 8004ac8:	680b      	ldr	r3, [r1, #0]
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	600a      	str	r2, [r1, #0]
 8004ace:	681e      	ldr	r6, [r3, #0]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	6862      	ldr	r2, [r4, #4]
 8004ad6:	f000 f82f 	bl	8004b38 <memchr>
 8004ada:	b108      	cbz	r0, 8004ae0 <_printf_i+0x1f4>
 8004adc:	1b80      	subs	r0, r0, r6
 8004ade:	6060      	str	r0, [r4, #4]
 8004ae0:	6863      	ldr	r3, [r4, #4]
 8004ae2:	6123      	str	r3, [r4, #16]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aea:	e7a8      	b.n	8004a3e <_printf_i+0x152>
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	47d0      	blx	sl
 8004af6:	3001      	adds	r0, #1
 8004af8:	d0ab      	beq.n	8004a52 <_printf_i+0x166>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	079b      	lsls	r3, r3, #30
 8004afe:	d413      	bmi.n	8004b28 <_printf_i+0x23c>
 8004b00:	68e0      	ldr	r0, [r4, #12]
 8004b02:	9b03      	ldr	r3, [sp, #12]
 8004b04:	4298      	cmp	r0, r3
 8004b06:	bfb8      	it	lt
 8004b08:	4618      	movlt	r0, r3
 8004b0a:	e7a4      	b.n	8004a56 <_printf_i+0x16a>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4632      	mov	r2, r6
 8004b10:	4649      	mov	r1, r9
 8004b12:	4640      	mov	r0, r8
 8004b14:	47d0      	blx	sl
 8004b16:	3001      	adds	r0, #1
 8004b18:	d09b      	beq.n	8004a52 <_printf_i+0x166>
 8004b1a:	3501      	adds	r5, #1
 8004b1c:	68e3      	ldr	r3, [r4, #12]
 8004b1e:	9903      	ldr	r1, [sp, #12]
 8004b20:	1a5b      	subs	r3, r3, r1
 8004b22:	42ab      	cmp	r3, r5
 8004b24:	dcf2      	bgt.n	8004b0c <_printf_i+0x220>
 8004b26:	e7eb      	b.n	8004b00 <_printf_i+0x214>
 8004b28:	2500      	movs	r5, #0
 8004b2a:	f104 0619 	add.w	r6, r4, #25
 8004b2e:	e7f5      	b.n	8004b1c <_printf_i+0x230>
 8004b30:	08004de5 	.word	0x08004de5
 8004b34:	08004df6 	.word	0x08004df6

08004b38 <memchr>:
 8004b38:	4603      	mov	r3, r0
 8004b3a:	b510      	push	{r4, lr}
 8004b3c:	b2c9      	uxtb	r1, r1
 8004b3e:	4402      	add	r2, r0
 8004b40:	4293      	cmp	r3, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	d101      	bne.n	8004b4a <memchr+0x12>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e003      	b.n	8004b52 <memchr+0x1a>
 8004b4a:	7804      	ldrb	r4, [r0, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	428c      	cmp	r4, r1
 8004b50:	d1f6      	bne.n	8004b40 <memchr+0x8>
 8004b52:	bd10      	pop	{r4, pc}

08004b54 <memcpy>:
 8004b54:	440a      	add	r2, r1
 8004b56:	4291      	cmp	r1, r2
 8004b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b5c:	d100      	bne.n	8004b60 <memcpy+0xc>
 8004b5e:	4770      	bx	lr
 8004b60:	b510      	push	{r4, lr}
 8004b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b66:	4291      	cmp	r1, r2
 8004b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b6c:	d1f9      	bne.n	8004b62 <memcpy+0xe>
 8004b6e:	bd10      	pop	{r4, pc}

08004b70 <memmove>:
 8004b70:	4288      	cmp	r0, r1
 8004b72:	b510      	push	{r4, lr}
 8004b74:	eb01 0402 	add.w	r4, r1, r2
 8004b78:	d902      	bls.n	8004b80 <memmove+0x10>
 8004b7a:	4284      	cmp	r4, r0
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	d807      	bhi.n	8004b90 <memmove+0x20>
 8004b80:	1e43      	subs	r3, r0, #1
 8004b82:	42a1      	cmp	r1, r4
 8004b84:	d008      	beq.n	8004b98 <memmove+0x28>
 8004b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b8e:	e7f8      	b.n	8004b82 <memmove+0x12>
 8004b90:	4601      	mov	r1, r0
 8004b92:	4402      	add	r2, r0
 8004b94:	428a      	cmp	r2, r1
 8004b96:	d100      	bne.n	8004b9a <memmove+0x2a>
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ba2:	e7f7      	b.n	8004b94 <memmove+0x24>

08004ba4 <_free_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d043      	beq.n	8004c34 <_free_r+0x90>
 8004bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb0:	1f0c      	subs	r4, r1, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfb8      	it	lt
 8004bb6:	18e4      	addlt	r4, r4, r3
 8004bb8:	f000 f8d0 	bl	8004d5c <__malloc_lock>
 8004bbc:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <_free_r+0x94>)
 8004bbe:	6813      	ldr	r3, [r2, #0]
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	b933      	cbnz	r3, 8004bd2 <_free_r+0x2e>
 8004bc4:	6063      	str	r3, [r4, #4]
 8004bc6:	6014      	str	r4, [r2, #0]
 8004bc8:	4628      	mov	r0, r5
 8004bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bce:	f000 b8cb 	b.w	8004d68 <__malloc_unlock>
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	d90a      	bls.n	8004bec <_free_r+0x48>
 8004bd6:	6821      	ldr	r1, [r4, #0]
 8004bd8:	1862      	adds	r2, r4, r1
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	bf01      	itttt	eq
 8004bde:	681a      	ldreq	r2, [r3, #0]
 8004be0:	685b      	ldreq	r3, [r3, #4]
 8004be2:	1852      	addeq	r2, r2, r1
 8004be4:	6022      	streq	r2, [r4, #0]
 8004be6:	6063      	str	r3, [r4, #4]
 8004be8:	6004      	str	r4, [r0, #0]
 8004bea:	e7ed      	b.n	8004bc8 <_free_r+0x24>
 8004bec:	461a      	mov	r2, r3
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	b10b      	cbz	r3, 8004bf6 <_free_r+0x52>
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	d9fa      	bls.n	8004bec <_free_r+0x48>
 8004bf6:	6811      	ldr	r1, [r2, #0]
 8004bf8:	1850      	adds	r0, r2, r1
 8004bfa:	42a0      	cmp	r0, r4
 8004bfc:	d10b      	bne.n	8004c16 <_free_r+0x72>
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	4401      	add	r1, r0
 8004c02:	1850      	adds	r0, r2, r1
 8004c04:	4283      	cmp	r3, r0
 8004c06:	6011      	str	r1, [r2, #0]
 8004c08:	d1de      	bne.n	8004bc8 <_free_r+0x24>
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4401      	add	r1, r0
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	6053      	str	r3, [r2, #4]
 8004c14:	e7d8      	b.n	8004bc8 <_free_r+0x24>
 8004c16:	d902      	bls.n	8004c1e <_free_r+0x7a>
 8004c18:	230c      	movs	r3, #12
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	e7d4      	b.n	8004bc8 <_free_r+0x24>
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1821      	adds	r1, r4, r0
 8004c22:	428b      	cmp	r3, r1
 8004c24:	bf01      	itttt	eq
 8004c26:	6819      	ldreq	r1, [r3, #0]
 8004c28:	685b      	ldreq	r3, [r3, #4]
 8004c2a:	1809      	addeq	r1, r1, r0
 8004c2c:	6021      	streq	r1, [r4, #0]
 8004c2e:	6063      	str	r3, [r4, #4]
 8004c30:	6054      	str	r4, [r2, #4]
 8004c32:	e7c9      	b.n	8004bc8 <_free_r+0x24>
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
 8004c36:	bf00      	nop
 8004c38:	20000150 	.word	0x20000150

08004c3c <_malloc_r>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	1ccd      	adds	r5, r1, #3
 8004c40:	f025 0503 	bic.w	r5, r5, #3
 8004c44:	3508      	adds	r5, #8
 8004c46:	2d0c      	cmp	r5, #12
 8004c48:	bf38      	it	cc
 8004c4a:	250c      	movcc	r5, #12
 8004c4c:	2d00      	cmp	r5, #0
 8004c4e:	4606      	mov	r6, r0
 8004c50:	db01      	blt.n	8004c56 <_malloc_r+0x1a>
 8004c52:	42a9      	cmp	r1, r5
 8004c54:	d903      	bls.n	8004c5e <_malloc_r+0x22>
 8004c56:	230c      	movs	r3, #12
 8004c58:	6033      	str	r3, [r6, #0]
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c5e:	f000 f87d 	bl	8004d5c <__malloc_lock>
 8004c62:	4921      	ldr	r1, [pc, #132]	; (8004ce8 <_malloc_r+0xac>)
 8004c64:	680a      	ldr	r2, [r1, #0]
 8004c66:	4614      	mov	r4, r2
 8004c68:	b99c      	cbnz	r4, 8004c92 <_malloc_r+0x56>
 8004c6a:	4f20      	ldr	r7, [pc, #128]	; (8004cec <_malloc_r+0xb0>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	b923      	cbnz	r3, 8004c7a <_malloc_r+0x3e>
 8004c70:	4621      	mov	r1, r4
 8004c72:	4630      	mov	r0, r6
 8004c74:	f000 f862 	bl	8004d3c <_sbrk_r>
 8004c78:	6038      	str	r0, [r7, #0]
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 f85d 	bl	8004d3c <_sbrk_r>
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	d123      	bne.n	8004cce <_malloc_r+0x92>
 8004c86:	230c      	movs	r3, #12
 8004c88:	4630      	mov	r0, r6
 8004c8a:	6033      	str	r3, [r6, #0]
 8004c8c:	f000 f86c 	bl	8004d68 <__malloc_unlock>
 8004c90:	e7e3      	b.n	8004c5a <_malloc_r+0x1e>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	1b5b      	subs	r3, r3, r5
 8004c96:	d417      	bmi.n	8004cc8 <_malloc_r+0x8c>
 8004c98:	2b0b      	cmp	r3, #11
 8004c9a:	d903      	bls.n	8004ca4 <_malloc_r+0x68>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	441c      	add	r4, r3
 8004ca0:	6025      	str	r5, [r4, #0]
 8004ca2:	e004      	b.n	8004cae <_malloc_r+0x72>
 8004ca4:	6863      	ldr	r3, [r4, #4]
 8004ca6:	42a2      	cmp	r2, r4
 8004ca8:	bf0c      	ite	eq
 8004caa:	600b      	streq	r3, [r1, #0]
 8004cac:	6053      	strne	r3, [r2, #4]
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f000 f85a 	bl	8004d68 <__malloc_unlock>
 8004cb4:	f104 000b 	add.w	r0, r4, #11
 8004cb8:	1d23      	adds	r3, r4, #4
 8004cba:	f020 0007 	bic.w	r0, r0, #7
 8004cbe:	1ac2      	subs	r2, r0, r3
 8004cc0:	d0cc      	beq.n	8004c5c <_malloc_r+0x20>
 8004cc2:	1a1b      	subs	r3, r3, r0
 8004cc4:	50a3      	str	r3, [r4, r2]
 8004cc6:	e7c9      	b.n	8004c5c <_malloc_r+0x20>
 8004cc8:	4622      	mov	r2, r4
 8004cca:	6864      	ldr	r4, [r4, #4]
 8004ccc:	e7cc      	b.n	8004c68 <_malloc_r+0x2c>
 8004cce:	1cc4      	adds	r4, r0, #3
 8004cd0:	f024 0403 	bic.w	r4, r4, #3
 8004cd4:	42a0      	cmp	r0, r4
 8004cd6:	d0e3      	beq.n	8004ca0 <_malloc_r+0x64>
 8004cd8:	1a21      	subs	r1, r4, r0
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f000 f82e 	bl	8004d3c <_sbrk_r>
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d1dd      	bne.n	8004ca0 <_malloc_r+0x64>
 8004ce4:	e7cf      	b.n	8004c86 <_malloc_r+0x4a>
 8004ce6:	bf00      	nop
 8004ce8:	20000150 	.word	0x20000150
 8004cec:	20000154 	.word	0x20000154

08004cf0 <_realloc_r>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	4607      	mov	r7, r0
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	460e      	mov	r6, r1
 8004cf8:	b921      	cbnz	r1, 8004d04 <_realloc_r+0x14>
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d00:	f7ff bf9c 	b.w	8004c3c <_malloc_r>
 8004d04:	b922      	cbnz	r2, 8004d10 <_realloc_r+0x20>
 8004d06:	f7ff ff4d 	bl	8004ba4 <_free_r>
 8004d0a:	4625      	mov	r5, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d10:	f000 f830 	bl	8004d74 <_malloc_usable_size_r>
 8004d14:	42a0      	cmp	r0, r4
 8004d16:	d20f      	bcs.n	8004d38 <_realloc_r+0x48>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f7ff ff8e 	bl	8004c3c <_malloc_r>
 8004d20:	4605      	mov	r5, r0
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d0f2      	beq.n	8004d0c <_realloc_r+0x1c>
 8004d26:	4631      	mov	r1, r6
 8004d28:	4622      	mov	r2, r4
 8004d2a:	f7ff ff13 	bl	8004b54 <memcpy>
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4638      	mov	r0, r7
 8004d32:	f7ff ff37 	bl	8004ba4 <_free_r>
 8004d36:	e7e9      	b.n	8004d0c <_realloc_r+0x1c>
 8004d38:	4635      	mov	r5, r6
 8004d3a:	e7e7      	b.n	8004d0c <_realloc_r+0x1c>

08004d3c <_sbrk_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4d05      	ldr	r5, [pc, #20]	; (8004d58 <_sbrk_r+0x1c>)
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	f7fc fad0 	bl	80012ec <_sbrk>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_sbrk_r+0x1a>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_sbrk_r+0x1a>
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	2000023c 	.word	0x2000023c

08004d5c <__malloc_lock>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__malloc_lock+0x8>)
 8004d5e:	f000 b811 	b.w	8004d84 <__retarget_lock_acquire_recursive>
 8004d62:	bf00      	nop
 8004d64:	20000244 	.word	0x20000244

08004d68 <__malloc_unlock>:
 8004d68:	4801      	ldr	r0, [pc, #4]	; (8004d70 <__malloc_unlock+0x8>)
 8004d6a:	f000 b80c 	b.w	8004d86 <__retarget_lock_release_recursive>
 8004d6e:	bf00      	nop
 8004d70:	20000244 	.word	0x20000244

08004d74 <_malloc_usable_size_r>:
 8004d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d78:	1f18      	subs	r0, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bfbc      	itt	lt
 8004d7e:	580b      	ldrlt	r3, [r1, r0]
 8004d80:	18c0      	addlt	r0, r0, r3
 8004d82:	4770      	bx	lr

08004d84 <__retarget_lock_acquire_recursive>:
 8004d84:	4770      	bx	lr

08004d86 <__retarget_lock_release_recursive>:
 8004d86:	4770      	bx	lr

08004d88 <_init>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	bf00      	nop
 8004d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8e:	bc08      	pop	{r3}
 8004d90:	469e      	mov	lr, r3
 8004d92:	4770      	bx	lr

08004d94 <_fini>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	bf00      	nop
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr
