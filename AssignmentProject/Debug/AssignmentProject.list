
AssignmentProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de8  08004de8  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004de8  08004de8  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004de8  08004de8  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dec  08004dec  00014dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000cc  08004ebc  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004ebc  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018382  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003004  00000000  00000000  00038477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0003b480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  0003c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fed  00000000  00000000  0003cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012696  00000000  00000000  00056ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1fa  00000000  00000000  0006957b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000f47c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d68 	.word	0x08004d68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08004d68 	.word	0x08004d68

0800014c <isButton1Pressed>:

int KeyReg3[4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int timeForKeyPressed[4] = {300/TICK, 300/TICK, 300/TICK, 300/TICK};

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag ==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000e8 	.word	0x200000e8

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag ==1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ec 	.word	0x200000ec

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag ==1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000f0 	.word	0x200000f0

080001b8 <isButtonPedesPressed>:

int isButtonPedesPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if (buttonPedes_flag ==1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButtonPedesPressed+0x16>
		buttonPedes_flag =0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButtonPedesPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButtonPedesPressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000f4 	.word	0x200000f4

080001dc <doProcess>:

void doProcess(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d81a      	bhi.n	8000220 <doProcess+0x44>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <doProcess+0x14>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000201 	.word	0x08000201
 80001f4:	08000209 	.word	0x08000209
 80001f8:	08000211 	.word	0x08000211
 80001fc:	08000219 	.word	0x08000219
	switch (i){
	case 0:
		button1_flag =1;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <doProcess+0x50>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
		break;
 8000206:	e00c      	b.n	8000222 <doProcess+0x46>
	case 1:
		button2_flag =1;
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <doProcess+0x54>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
		break;
 800020e:	e008      	b.n	8000222 <doProcess+0x46>
	case 2:
		button3_flag =1;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <doProcess+0x58>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
		break;
 8000216:	e004      	b.n	8000222 <doProcess+0x46>
	case 3:
		buttonPedes_flag =1;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <doProcess+0x5c>)
 800021a:	2201      	movs	r2, #1
 800021c:	601a      	str	r2, [r3, #0]
		break;
 800021e:	e000      	b.n	8000222 <doProcess+0x46>
	default:
		break;
 8000220:	bf00      	nop
	}
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	200000e8 	.word	0x200000e8
 8000230:	200000ec 	.word	0x200000ec
 8000234:	200000f0 	.word	0x200000f0
 8000238:	200000f4 	.word	0x200000f4

0800023c <readPin>:


int readPin(int i){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d822      	bhi.n	8000290 <readPin+0x54>
 800024a:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <readPin+0x14>)
 800024c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000250:	08000261 	.word	0x08000261
 8000254:	0800026d 	.word	0x0800026d
 8000258:	08000279 	.word	0x08000279
 800025c:	08000285 	.word	0x08000285
	switch(i){
	case 0:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON1_Pin);
 8000260:	2102      	movs	r1, #2
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <readPin+0x60>)
 8000264:	f002 f87c 	bl	8002360 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	e012      	b.n	8000292 <readPin+0x56>
		break;
	case 1:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON2_Pin);
 800026c:	2110      	movs	r1, #16
 800026e:	480b      	ldr	r0, [pc, #44]	; (800029c <readPin+0x60>)
 8000270:	f002 f876 	bl	8002360 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	e00c      	b.n	8000292 <readPin+0x56>
		break;
	case 2:
		return HAL_GPIO_ReadPin(GPIOB, BUTTON3_Pin);
 8000278:	2101      	movs	r1, #1
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <readPin+0x64>)
 800027c:	f002 f870 	bl	8002360 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	e006      	b.n	8000292 <readPin+0x56>
		break;
	case 3:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON_PEDES_Pin);
 8000284:	2101      	movs	r1, #1
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <readPin+0x60>)
 8000288:	f002 f86a 	bl	8002360 <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	e000      	b.n	8000292 <readPin+0x56>
		break;
	default:
		return GPIO_PIN_RESET;
 8000290:	2300      	movs	r3, #0
		break;
	}
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <getKeyInput>:


void getKeyInput(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	for (int i =0; i<4; i++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e068      	b.n	8000382 <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 80002b0:	4a38      	ldr	r2, [pc, #224]	; (8000394 <getKeyInput+0xf0>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	4937      	ldr	r1, [pc, #220]	; (8000398 <getKeyInput+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80002c0:	4a36      	ldr	r2, [pc, #216]	; (800039c <getKeyInput+0xf8>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c8:	4932      	ldr	r1, [pc, #200]	; (8000394 <getKeyInput+0xf0>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = readPin(i);
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f7ff ffb3 	bl	800023c <readPin>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4930      	ldr	r1, [pc, #192]	; (800039c <getKeyInput+0xf8>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 80002e0:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <getKeyInput+0xf4>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e8:	492a      	ldr	r1, [pc, #168]	; (8000394 <getKeyInput+0xf0>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d143      	bne.n	800037c <getKeyInput+0xd8>
 80002f4:	4a27      	ldr	r2, [pc, #156]	; (8000394 <getKeyInput+0xf0>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fc:	4927      	ldr	r1, [pc, #156]	; (800039c <getKeyInput+0xf8>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000304:	429a      	cmp	r2, r3
 8000306:	d139      	bne.n	800037c <getKeyInput+0xd8>
			if (KeyReg2[i] != KeyReg3[i]){
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <getKeyInput+0xf8>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4923      	ldr	r1, [pc, #140]	; (80003a0 <getKeyInput+0xfc>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d016      	beq.n	800034a <getKeyInput+0xa6>
				KeyReg3[i] = KeyReg2[i];
 800031c:	4a1f      	ldr	r2, [pc, #124]	; (800039c <getKeyInput+0xf8>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	491e      	ldr	r1, [pc, #120]	; (80003a0 <getKeyInput+0xfc>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <getKeyInput+0xf8>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d121      	bne.n	800037c <getKeyInput+0xd8>
					timeForKeyPressed[i] = 300/TICK;
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <getKeyInput+0x100>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	211e      	movs	r1, #30
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					doProcess(i);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff4a 	bl	80001dc <doProcess>
 8000348:	e018      	b.n	800037c <getKeyInput+0xd8>
				}
			}else {
				timeForKeyPressed[i]--;
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <getKeyInput+0x100>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4913      	ldr	r1, [pc, #76]	; (80003a4 <getKeyInput+0x100>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeForKeyPressed[i] ==0){
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <getKeyInput+0x100>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d109      	bne.n	800037c <getKeyInput+0xd8>
					KeyReg3[i] =NORMAL_STATE;
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <getKeyInput+0xfc>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2101      	movs	r1, #1
 800036e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeForKeyPressed[i] = 300/TICK;
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <getKeyInput+0x100>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	211e      	movs	r1, #30
 8000378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0; i<4; i++){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b03      	cmp	r3, #3
 8000386:	dd93      	ble.n	80002b0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000010 	.word	0x20000010
 8000398:	20000000 	.word	0x20000000
 800039c:	20000020 	.word	0x20000020
 80003a0:	20000030 	.word	0x20000030
 80003a4:	20000040 	.word	0x20000040

080003a8 <buzzerRun>:

TIM_HandleTypeDef htim3;

int buzzer_flag =0;

void buzzerRun(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	switch (buzzer_flag){
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <buzzerRun+0x74>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <buzzerRun+0x12>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d00b      	beq.n	80003d0 <buzzerRun+0x28>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
			setTimer7(250);
		}
		break;
	default:
		break;
 80003b8:	e02d      	b.n	8000416 <buzzerRun+0x6e>
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <buzzerRun+0x78>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2200      	movs	r2, #0
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(10);
 80003c2:	200a      	movs	r0, #10
 80003c4:	f000 fd28 	bl	8000e18 <setTimer6>
		setTimer7(50);
 80003c8:	2032      	movs	r0, #50	; 0x32
 80003ca:	f000 fd41 	bl	8000e50 <setTimer7>
		break;
 80003ce:	e022      	b.n	8000416 <buzzerRun+0x6e>
		if (timer6_flag == 1){
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <buzzerRun+0x7c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d112      	bne.n	80003fe <buzzerRun+0x56>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, (100 /(get_timer4_counter()/1000 +1)));
 80003d8:	f000 fd80 	bl	8000edc <get_timer4_counter>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <buzzerRun+0x80>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	1192      	asrs	r2, r2, #6
 80003e6:	17db      	asrs	r3, r3, #31
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	3301      	adds	r3, #1
 80003ec:	2264      	movs	r2, #100	; 0x64
 80003ee:	fb92 f2f3 	sdiv	r2, r2, r3
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <buzzerRun+0x78>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer6(250);
 80003f8:	20fa      	movs	r0, #250	; 0xfa
 80003fa:	f000 fd0d 	bl	8000e18 <setTimer6>
		if (timer7_flag ==1){
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <buzzerRun+0x84>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d106      	bne.n	8000414 <buzzerRun+0x6c>
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1, 0);
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <buzzerRun+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer7(250);
 800040e:	20fa      	movs	r0, #250	; 0xfa
 8000410:	f000 fd1e 	bl	8000e50 <setTimer7>
		break;
 8000414:	bf00      	nop
	}
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000f8 	.word	0x200000f8
 8000420:	20000158 	.word	0x20000158
 8000424:	20000134 	.word	0x20000134
 8000428:	10624dd3 	.word	0x10624dd3
 800042c:	2000013c 	.word	0x2000013c

08000430 <modeRun>:
 */


#include "fsm_mode.h"

void modeRun(){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	switch(mode){
 8000434:	4baf      	ldr	r3, [pc, #700]	; (80006f4 <modeRun+0x2c4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b03      	cmp	r3, #3
 800043a:	f200 818c 	bhi.w	8000756 <modeRun+0x326>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <modeRun+0x14>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000455 	.word	0x08000455
 8000448:	0800045d 	.word	0x0800045d
 800044c:	08000471 	.word	0x08000471
 8000450:	080005bf 	.word	0x080005bf
	case INIT_MODE:
		mode = MODE_1;
 8000454:	4ba7      	ldr	r3, [pc, #668]	; (80006f4 <modeRun+0x2c4>)
 8000456:	2201      	movs	r2, #1
 8000458:	601a      	str	r2, [r3, #0]
		break;
 800045a:	e17c      	b.n	8000756 <modeRun+0x326>
	case MODE_1:
		if (isButton1Pressed()){
 800045c:	f7ff fe76 	bl	800014c <isButton1Pressed>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	f000 8172 	beq.w	800074c <modeRun+0x31c>
			mode = MODE_2;
 8000468:	4ba2      	ldr	r3, [pc, #648]	; (80006f4 <modeRun+0x2c4>)
 800046a:	2202      	movs	r2, #2
 800046c:	601a      	str	r2, [r3, #0]
		}
		break;
 800046e:	e16d      	b.n	800074c <modeRun+0x31c>
	case MODE_2:
		if (isButton1Pressed()){
 8000470:	f7ff fe6c 	bl	800014c <isButton1Pressed>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <modeRun+0x50>
			mode = MODE_3;
 800047a:	4b9e      	ldr	r3, [pc, #632]	; (80006f4 <modeRun+0x2c4>)
 800047c:	2203      	movs	r2, #3
 800047e:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 8000480:	f7ff fe76 	bl	8000170 <isButton2Pressed>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d046      	beq.n	8000518 <modeRun+0xe8>
			switch(state_1){
 800048a:	4b9b      	ldr	r3, [pc, #620]	; (80006f8 <modeRun+0x2c8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b0d      	cmp	r3, #13
 8000490:	d00e      	beq.n	80004b0 <modeRun+0x80>
 8000492:	2b0d      	cmp	r3, #13
 8000494:	dc1c      	bgt.n	80004d0 <modeRun+0xa0>
 8000496:	2b0b      	cmp	r3, #11
 8000498:	d002      	beq.n	80004a0 <modeRun+0x70>
 800049a:	2b0c      	cmp	r3, #12
 800049c:	d010      	beq.n	80004c0 <modeRun+0x90>
			case MAN_AMBER:
				state_1= MAN_RED;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 800049e:	e017      	b.n	80004d0 <modeRun+0xa0>
				state_1= MAN_GREEN;
 80004a0:	4b95      	ldr	r3, [pc, #596]	; (80006f8 <modeRun+0x2c8>)
 80004a2:	220d      	movs	r2, #13
 80004a4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004aa:	f000 fc45 	bl	8000d38 <setTimer2>
				break;
 80004ae:	e010      	b.n	80004d2 <modeRun+0xa2>
				state_1= MAN_AMBER;
 80004b0:	4b91      	ldr	r3, [pc, #580]	; (80006f8 <modeRun+0x2c8>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ba:	f000 fc3d 	bl	8000d38 <setTimer2>
				break;
 80004be:	e008      	b.n	80004d2 <modeRun+0xa2>
				state_1= MAN_RED;
 80004c0:	4b8d      	ldr	r3, [pc, #564]	; (80006f8 <modeRun+0x2c8>)
 80004c2:	220b      	movs	r2, #11
 80004c4:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 80004c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ca:	f000 fc35 	bl	8000d38 <setTimer2>
				break;
 80004ce:	e000      	b.n	80004d2 <modeRun+0xa2>
				break;
 80004d0:	bf00      	nop
			}

			switch(state_2){
 80004d2:	4b8a      	ldr	r3, [pc, #552]	; (80006fc <modeRun+0x2cc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b0d      	cmp	r3, #13
 80004d8:	d00e      	beq.n	80004f8 <modeRun+0xc8>
 80004da:	2b0d      	cmp	r3, #13
 80004dc:	dc1e      	bgt.n	800051c <modeRun+0xec>
 80004de:	2b0b      	cmp	r3, #11
 80004e0:	d002      	beq.n	80004e8 <modeRun+0xb8>
 80004e2:	2b0c      	cmp	r3, #12
 80004e4:	d010      	beq.n	8000508 <modeRun+0xd8>
			case MAN_AMBER:
				state_2= MAN_RED;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 80004e6:	e019      	b.n	800051c <modeRun+0xec>
				state_2= MAN_GREEN;
 80004e8:	4b84      	ldr	r3, [pc, #528]	; (80006fc <modeRun+0x2cc>)
 80004ea:	220d      	movs	r2, #13
 80004ec:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80004ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80004f2:	f000 fc3d 	bl	8000d70 <setTimer3>
				break;
 80004f6:	e012      	b.n	800051e <modeRun+0xee>
				state_2= MAN_AMBER;
 80004f8:	4b80      	ldr	r3, [pc, #512]	; (80006fc <modeRun+0x2cc>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80004fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000502:	f000 fc35 	bl	8000d70 <setTimer3>
				break;
 8000506:	e00a      	b.n	800051e <modeRun+0xee>
				state_2= MAN_RED;
 8000508:	4b7c      	ldr	r3, [pc, #496]	; (80006fc <modeRun+0x2cc>)
 800050a:	220b      	movs	r2, #11
 800050c:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800050e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000512:	f000 fc2d 	bl	8000d70 <setTimer3>
				break;
 8000516:	e002      	b.n	800051e <modeRun+0xee>
			}
		}
 8000518:	bf00      	nop
 800051a:	e000      	b.n	800051e <modeRun+0xee>
				break;
 800051c:	bf00      	nop

		if (isButton3Pressed()){
 800051e:	f7ff fe39 	bl	8000194 <isButton3Pressed>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d046      	beq.n	80005b6 <modeRun+0x186>
			switch(state_1){
 8000528:	4b73      	ldr	r3, [pc, #460]	; (80006f8 <modeRun+0x2c8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b0d      	cmp	r3, #13
 800052e:	d00e      	beq.n	800054e <modeRun+0x11e>
 8000530:	2b0d      	cmp	r3, #13
 8000532:	dc1c      	bgt.n	800056e <modeRun+0x13e>
 8000534:	2b0b      	cmp	r3, #11
 8000536:	d002      	beq.n	800053e <modeRun+0x10e>
 8000538:	2b0c      	cmp	r3, #12
 800053a:	d010      	beq.n	800055e <modeRun+0x12e>
			case MAN_AMBER:
				state_1=MAN_GREEN;
				setTimer2(WAITING_TIME);
				break;
			default:
				break;
 800053c:	e017      	b.n	800056e <modeRun+0x13e>
				state_1=MAN_AMBER;
 800053e:	4b6e      	ldr	r3, [pc, #440]	; (80006f8 <modeRun+0x2c8>)
 8000540:	220c      	movs	r2, #12
 8000542:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000544:	f242 7010 	movw	r0, #10000	; 0x2710
 8000548:	f000 fbf6 	bl	8000d38 <setTimer2>
				break;
 800054c:	e010      	b.n	8000570 <modeRun+0x140>
				state_1=MAN_RED;
 800054e:	4b6a      	ldr	r3, [pc, #424]	; (80006f8 <modeRun+0x2c8>)
 8000550:	220b      	movs	r2, #11
 8000552:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000554:	f242 7010 	movw	r0, #10000	; 0x2710
 8000558:	f000 fbee 	bl	8000d38 <setTimer2>
				break;
 800055c:	e008      	b.n	8000570 <modeRun+0x140>
				state_1=MAN_GREEN;
 800055e:	4b66      	ldr	r3, [pc, #408]	; (80006f8 <modeRun+0x2c8>)
 8000560:	220d      	movs	r2, #13
 8000562:	601a      	str	r2, [r3, #0]
				setTimer2(WAITING_TIME);
 8000564:	f242 7010 	movw	r0, #10000	; 0x2710
 8000568:	f000 fbe6 	bl	8000d38 <setTimer2>
				break;
 800056c:	e000      	b.n	8000570 <modeRun+0x140>
				break;
 800056e:	bf00      	nop
			}

			switch(state_2){
 8000570:	4b62      	ldr	r3, [pc, #392]	; (80006fc <modeRun+0x2cc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b0d      	cmp	r3, #13
 8000576:	d00e      	beq.n	8000596 <modeRun+0x166>
 8000578:	2b0d      	cmp	r3, #13
 800057a:	dc1e      	bgt.n	80005ba <modeRun+0x18a>
 800057c:	2b0b      	cmp	r3, #11
 800057e:	d002      	beq.n	8000586 <modeRun+0x156>
 8000580:	2b0c      	cmp	r3, #12
 8000582:	d010      	beq.n	80005a6 <modeRun+0x176>
			case MAN_AMBER:
				state_2=MAN_GREEN;
				setTimer3(WAITING_TIME);
				break;
			default:
				break;
 8000584:	e019      	b.n	80005ba <modeRun+0x18a>
				state_2=MAN_AMBER;
 8000586:	4b5d      	ldr	r3, [pc, #372]	; (80006fc <modeRun+0x2cc>)
 8000588:	220c      	movs	r2, #12
 800058a:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800058c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000590:	f000 fbee 	bl	8000d70 <setTimer3>
				break;
 8000594:	e012      	b.n	80005bc <modeRun+0x18c>
				state_2=MAN_RED;
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <modeRun+0x2cc>)
 8000598:	220b      	movs	r2, #11
 800059a:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 800059c:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a0:	f000 fbe6 	bl	8000d70 <setTimer3>
				break;
 80005a4:	e00a      	b.n	80005bc <modeRun+0x18c>
				state_2=MAN_GREEN;
 80005a6:	4b55      	ldr	r3, [pc, #340]	; (80006fc <modeRun+0x2cc>)
 80005a8:	220d      	movs	r2, #13
 80005aa:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 80005ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80005b0:	f000 fbde 	bl	8000d70 <setTimer3>
				break;
 80005b4:	e002      	b.n	80005bc <modeRun+0x18c>
			}
		}
 80005b6:	bf00      	nop
 80005b8:	e0cd      	b.n	8000756 <modeRun+0x326>
				break;
 80005ba:	bf00      	nop
		break;
 80005bc:	e0cb      	b.n	8000756 <modeRun+0x326>
	case MODE_3:
		if (isButton1Pressed()){
 80005be:	f7ff fdc5 	bl	800014c <isButton1Pressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <modeRun+0x19e>
			mode = MODE_1;
 80005c8:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <modeRun+0x2c4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed()){
 80005ce:	f7ff fdcf 	bl	8000170 <isButton2Pressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d06a      	beq.n	80006ae <modeRun+0x27e>
			switch(state_1){
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <modeRun+0x2c8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b17      	cmp	r3, #23
 80005de:	d013      	beq.n	8000608 <modeRun+0x1d8>
 80005e0:	2b17      	cmp	r3, #23
 80005e2:	dc2f      	bgt.n	8000644 <modeRun+0x214>
 80005e4:	2b15      	cmp	r3, #21
 80005e6:	d002      	beq.n	80005ee <modeRun+0x1be>
 80005e8:	2b16      	cmp	r3, #22
 80005ea:	d01f      	beq.n	800062c <modeRun+0x1fc>
				state_1 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
				setTimer2(250);
				break;
			default:
				break;
 80005ec:	e02a      	b.n	8000644 <modeRun+0x214>
				state_1 =TUN_GREEN;
 80005ee:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <modeRun+0x2c8>)
 80005f0:	2217      	movs	r2, #23
 80005f2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <modeRun+0x2d0>)
 80005fc:	f001 fec7 	bl	800238e <HAL_GPIO_WritePin>
				setTimer2(250);
 8000600:	20fa      	movs	r0, #250	; 0xfa
 8000602:	f000 fb99 	bl	8000d38 <setTimer2>
				break;
 8000606:	e01e      	b.n	8000646 <modeRun+0x216>
				state_1 =TUN_AMBER;
 8000608:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <modeRun+0x2c8>)
 800060a:	2216      	movs	r2, #22
 800060c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	483a      	ldr	r0, [pc, #232]	; (8000700 <modeRun+0x2d0>)
 8000616:	f001 feba 	bl	800238e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2108      	movs	r1, #8
 800061e:	4839      	ldr	r0, [pc, #228]	; (8000704 <modeRun+0x2d4>)
 8000620:	f001 feb5 	bl	800238e <HAL_GPIO_WritePin>
				setTimer2(250);
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 fb87 	bl	8000d38 <setTimer2>
				break;
 800062a:	e00c      	b.n	8000646 <modeRun+0x216>
				state_1 =TUN_RED;
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <modeRun+0x2c8>)
 800062e:	2215      	movs	r2, #21
 8000630:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC1_0_Pin, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2108      	movs	r1, #8
 8000636:	4833      	ldr	r0, [pc, #204]	; (8000704 <modeRun+0x2d4>)
 8000638:	f001 fea9 	bl	800238e <HAL_GPIO_WritePin>
				setTimer2(250);
 800063c:	20fa      	movs	r0, #250	; 0xfa
 800063e:	f000 fb7b 	bl	8000d38 <setTimer2>
				break;
 8000642:	e000      	b.n	8000646 <modeRun+0x216>
				break;
 8000644:	bf00      	nop
			}

			switch(state_2){
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <modeRun+0x2cc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b17      	cmp	r3, #23
 800064c:	d012      	beq.n	8000674 <modeRun+0x244>
 800064e:	2b17      	cmp	r3, #23
 8000650:	dc2f      	bgt.n	80006b2 <modeRun+0x282>
 8000652:	2b15      	cmp	r3, #21
 8000654:	d002      	beq.n	800065c <modeRun+0x22c>
 8000656:	2b16      	cmp	r3, #22
 8000658:	d01d      	beq.n	8000696 <modeRun+0x266>
				state_2 =TUN_RED;
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
				setTimer3(250);
				break;
			default:
				break;
 800065a:	e02a      	b.n	80006b2 <modeRun+0x282>
				state_2 =TUN_GREEN;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <modeRun+0x2cc>)
 800065e:	2217      	movs	r2, #23
 8000660:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4827      	ldr	r0, [pc, #156]	; (8000704 <modeRun+0x2d4>)
 8000668:	f001 fe91 	bl	800238e <HAL_GPIO_WritePin>
				setTimer3(250);
 800066c:	20fa      	movs	r0, #250	; 0xfa
 800066e:	f000 fb7f 	bl	8000d70 <setTimer3>
				break;
 8000672:	e01f      	b.n	80006b4 <modeRun+0x284>
				state_2 =TUN_AMBER;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <modeRun+0x2cc>)
 8000676:	2216      	movs	r2, #22
 8000678:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <modeRun+0x2d4>)
 8000680:	f001 fe85 	bl	800238e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	481e      	ldr	r0, [pc, #120]	; (8000704 <modeRun+0x2d4>)
 800068a:	f001 fe80 	bl	800238e <HAL_GPIO_WritePin>
				setTimer3(250);
 800068e:	20fa      	movs	r0, #250	; 0xfa
 8000690:	f000 fb6e 	bl	8000d70 <setTimer3>
				break;
 8000694:	e00e      	b.n	80006b4 <modeRun+0x284>
				state_2 =TUN_RED;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <modeRun+0x2cc>)
 8000698:	2215      	movs	r2, #21
 800069a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <modeRun+0x2d4>)
 80006a2:	f001 fe74 	bl	800238e <HAL_GPIO_WritePin>
				setTimer3(250);
 80006a6:	20fa      	movs	r0, #250	; 0xfa
 80006a8:	f000 fb62 	bl	8000d70 <setTimer3>
				break;
 80006ac:	e002      	b.n	80006b4 <modeRun+0x284>
			}
		}
 80006ae:	bf00      	nop
 80006b0:	e000      	b.n	80006b4 <modeRun+0x284>
				break;
 80006b2:	bf00      	nop

		if (isButton3Pressed()){
 80006b4:	f7ff fd6e 	bl	8000194 <isButton3Pressed>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d048      	beq.n	8000750 <modeRun+0x320>
			switch (state_1){
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <modeRun+0x2c8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b17      	cmp	r3, #23
 80006c4:	d006      	beq.n	80006d4 <modeRun+0x2a4>
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	dc44      	bgt.n	8000754 <modeRun+0x324>
 80006ca:	2b15      	cmp	r3, #21
 80006cc:	d02e      	beq.n	800072c <modeRun+0x2fc>
 80006ce:	2b16      	cmp	r3, #22
 80006d0:	d01c      	beq.n	800070c <modeRun+0x2dc>
				if (redTime <99) redTime++;
				else redTime =1;
				uartRun();
				break;
			default:
				break;
 80006d2:	e03f      	b.n	8000754 <modeRun+0x324>
				if (greenTime <99) greenTime++;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <modeRun+0x2d8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b62      	cmp	r3, #98	; 0x62
 80006da:	dc05      	bgt.n	80006e8 <modeRun+0x2b8>
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <modeRun+0x2d8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a09      	ldr	r2, [pc, #36]	; (8000708 <modeRun+0x2d8>)
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e002      	b.n	80006ee <modeRun+0x2be>
				else greenTime =1;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <modeRun+0x2d8>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
				uartRun();
 80006ee:	f001 f9d3 	bl	8001a98 <uartRun>
				break;
 80006f2:	e030      	b.n	8000756 <modeRun+0x326>
 80006f4:	20000104 	.word	0x20000104
 80006f8:	200000fc 	.word	0x200000fc
 80006fc:	20000100 	.word	0x20000100
 8000700:	40010800 	.word	0x40010800
 8000704:	40010c00 	.word	0x40010c00
 8000708:	20000058 	.word	0x20000058
				if (amberTime <99) amberTime++;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <modeRun+0x32c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b62      	cmp	r3, #98	; 0x62
 8000712:	dc05      	bgt.n	8000720 <modeRun+0x2f0>
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <modeRun+0x32c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <modeRun+0x32c>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	e002      	b.n	8000726 <modeRun+0x2f6>
				else amberTime =1;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <modeRun+0x32c>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
				uartRun();
 8000726:	f001 f9b7 	bl	8001a98 <uartRun>
				break;
 800072a:	e014      	b.n	8000756 <modeRun+0x326>
				if (redTime <99) redTime++;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <modeRun+0x330>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b62      	cmp	r3, #98	; 0x62
 8000732:	dc05      	bgt.n	8000740 <modeRun+0x310>
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <modeRun+0x330>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <modeRun+0x330>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	e002      	b.n	8000746 <modeRun+0x316>
				else redTime =1;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <modeRun+0x330>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
				uartRun();
 8000746:	f001 f9a7 	bl	8001a98 <uartRun>
				break;
 800074a:	e004      	b.n	8000756 <modeRun+0x326>
		break;
 800074c:	bf00      	nop
 800074e:	e002      	b.n	8000756 <modeRun+0x326>
			}
		}
 8000750:	bf00      	nop
 8000752:	e000      	b.n	8000756 <modeRun+0x326>
				break;
 8000754:	bf00      	nop
	}
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000054 	.word	0x20000054
 8000760:	20000050 	.word	0x20000050

08000764 <ledBlink>:
int mode = 0;
int redTime = 5;
int amberTime = 2;
int greenTime = 3;

void ledBlink(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if (timer1_flag ==1){
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <ledBlink+0x20>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d106      	bne.n	800077e <ledBlink+0x1a>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000770:	2120      	movs	r1, #32
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <ledBlink+0x24>)
 8000774:	f001 fe23 	bl	80023be <HAL_GPIO_TogglePin>
		setTimer1(250);
 8000778:	20fa      	movs	r0, #250	; 0xfa
 800077a:	f000 fac1 	bl	8000d00 <setTimer1>
	}
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000010c 	.word	0x2000010c
 8000788:	40010800 	.word	0x40010800

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f001 fa42 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f82c 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f958 	bl	8000a4c <MX_GPIO_Init>
  MX_TIM2_Init();
 800079c:	f000 f86a 	bl	8000874 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 f92a 	bl	80009f8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007a4:	f000 f8b2 	bl	800090c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007a8:	480f      	ldr	r0, [pc, #60]	; (80007e8 <main+0x5c>)
 80007aa:	f002 fa8b 	bl	8002cc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ae:	2100      	movs	r1, #0
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <main+0x60>)
 80007b2:	f002 fb31 	bl	8002e18 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timerInit();
 80007b6:	f000 fb9f 	bl	8000ef8 <timerInit>
  while (1)
  {
	  ledBlink();
 80007ba:	f7ff ffd3 	bl	8000764 <ledBlink>
	  modeRun();
 80007be:	f7ff fe37 	bl	8000430 <modeRun>
	  pedes_light_fsm();
 80007c2:	f000 f9c3 	bl	8000b4c <pedes_light_fsm>
	  fsm_automatic_run1();
 80007c6:	f000 fdbd 	bl	8001344 <fsm_automatic_run1>
	  fsm_automatic_run2();
 80007ca:	f000 fe69 	bl	80014a0 <fsm_automatic_run2>
	  fsm_manual_run1();
 80007ce:	f000 ff11 	bl	80015f4 <fsm_manual_run1>
	  fsm_manual_run2();
 80007d2:	f000 ffc5 	bl	8001760 <fsm_manual_run2>
	  fsm_tuning_run1();
 80007d6:	f001 f86b 	bl	80018b0 <fsm_tuning_run1>
	  fsm_tuning_run2();
 80007da:	f001 f8e5 	bl	80019a8 <fsm_tuning_run2>
	  buzzerRun();
 80007de:	f7ff fde3 	bl	80003a8 <buzzerRun>
	  uartRun();
 80007e2:	f001 f959 	bl	8001a98 <uartRun>
	  ledBlink();
 80007e6:	e7e8      	b.n	80007ba <main+0x2e>
 80007e8:	200001a0 	.word	0x200001a0
 80007ec:	20000158 	.word	0x20000158

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b090      	sub	sp, #64	; 0x40
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fe70 	bl	80044e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2310      	movs	r3, #16
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000822:	2300      	movs	r3, #0
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000826:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fddd 	bl	80023f0 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800083c:	f000 f980 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f002 f848 	bl	80028f0 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000866:	f000 f96b 	bl	8000b40 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3740      	adds	r7, #64	; 0x40
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_TIM2_Init+0x94>)
 8000892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000896:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_TIM2_Init+0x94>)
 800089a:	f242 720f 	movw	r2, #9999	; 0x270f
 800089e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_TIM2_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM2_Init+0x94>)
 80008a8:	223f      	movs	r2, #63	; 0x3f
 80008aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_TIM2_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM2_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_TIM2_Init+0x94>)
 80008ba:	f002 f9b3 	bl	8002c24 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c4:	f000 f93c 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM2_Init+0x94>)
 80008d6:	f002 fd07 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f92e 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM2_Init+0x94>)
 80008f2:	f003 f885 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f920 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001a0 	.word	0x200001a0

0800090c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	; 0x38
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
 8000938:	615a      	str	r2, [r3, #20]
 800093a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <MX_TIM3_Init+0xe4>)
 800093e:	4a2d      	ldr	r2, [pc, #180]	; (80009f4 <MX_TIM3_Init+0xe8>)
 8000940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <MX_TIM3_Init+0xe4>)
 8000944:	223f      	movs	r2, #63	; 0x3f
 8000946:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_TIM3_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_TIM3_Init+0xe4>)
 8000950:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000954:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_TIM3_Init+0xe4>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_TIM3_Init+0xe4>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000962:	4823      	ldr	r0, [pc, #140]	; (80009f0 <MX_TIM3_Init+0xe4>)
 8000964:	f002 f95e 	bl	8002c24 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800096e:	f000 f8e7 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097c:	4619      	mov	r1, r3
 800097e:	481c      	ldr	r0, [pc, #112]	; (80009f0 <MX_TIM3_Init+0xe4>)
 8000980:	f002 fcb2 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800098a:	f000 f8d9 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <MX_TIM3_Init+0xe4>)
 8000990:	f002 f9ea 	bl	8002d68 <HAL_TIM_PWM_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800099a:	f000 f8d1 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	4619      	mov	r1, r3
 80009ac:	4810      	ldr	r0, [pc, #64]	; (80009f0 <MX_TIM3_Init+0xe4>)
 80009ae:	f003 f827 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009b8:	f000 f8c2 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009bc:	2360      	movs	r3, #96	; 0x60
 80009be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_TIM3_Init+0xe4>)
 80009d4:	f002 fbca 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009de:	f000 f8af 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009e2:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MX_TIM3_Init+0xe4>)
 80009e4:	f000 fbb2 	bl	800114c <HAL_TIM_MspPostInit>

}
 80009e8:	bf00      	nop
 80009ea:	3738      	adds	r7, #56	; 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000158 	.word	0x20000158
 80009f4:	40000400 	.word	0x40000400

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f003 f856 	bl	8003ae0 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f881 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001f4 	.word	0x200001f4
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000a96:	4822      	ldr	r0, [pc, #136]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a98:	f001 fc79 	bl	800238e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000aa2:	4820      	ldr	r0, [pc, #128]	; (8000b24 <MX_GPIO_Init+0xd8>)
 8000aa4:	f001 fc73 	bl	800238e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDES_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDES_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000aa8:	2313      	movs	r3, #19
 8000aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4819      	ldr	r0, [pc, #100]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000abc:	f001 facc 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin PLED_GREEN_Pin TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|PLED_GREEN_Pin|TRAFFIC1_1_Pin;
 8000ac0:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000ada:	f001 fabd 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_GPIO_Init+0xd8>)
 8000af2:	f001 fab1 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLED_RED_Pin TRAFFIC1_0_Pin TRAFFIC2_0_Pin TRAFFIC2_1_Pin */
  GPIO_InitStruct.Pin = PLED_RED_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin;
 8000af6:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000afa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2302      	movs	r3, #2
 8000b06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_GPIO_Init+0xd8>)
 8000b10:	f001 faa2 	bl	8002058 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000b30:	f000 f9fc 	bl	8000f2c <timerRun>
	getKeyInput();
 8000b34:	f7ff fbb6 	bl	80002a4 <getKeyInput>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <pedes_light_fsm>:
#include "pedestrian_light.h"

int pedes_state = PEDES_INIT;
int pedes_flag =0;

void pedes_light_fsm(){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	switch(pedes_state){
 8000b50:	4b61      	ldr	r3, [pc, #388]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	f200 80b5 	bhi.w	8000cc4 <pedes_light_fsm+0x178>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <pedes_light_fsm+0x14>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000b71 	.word	0x08000b71
 8000b64:	08000b79 	.word	0x08000b79
 8000b68:	08000c77 	.word	0x08000c77
 8000b6c:	08000c23 	.word	0x08000c23
	case PEDES_INIT:
		pedes_state = PEDES_OFF;
 8000b70:	4b59      	ldr	r3, [pc, #356]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]

		break;
 8000b76:	e0ac      	b.n	8000cd2 <pedes_light_fsm+0x186>
	case PEDES_OFF:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7e:	4857      	ldr	r0, [pc, #348]	; (8000cdc <pedes_light_fsm+0x190>)
 8000b80:	f001 fc05 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8a:	4855      	ldr	r0, [pc, #340]	; (8000ce0 <pedes_light_fsm+0x194>)
 8000b8c:	f001 fbff 	bl	800238e <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_OFF;
 8000b90:	4b54      	ldr	r3, [pc, #336]	; (8000ce4 <pedes_light_fsm+0x198>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]

		if (isButtonPedesPressed()){
 8000b96:	f7ff fb0f 	bl	80001b8 <isButtonPedesPressed>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 8093 	beq.w	8000cc8 <pedes_light_fsm+0x17c>
			if (state_1 == AUTO_RED){
 8000ba2:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <pedes_light_fsm+0x19c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d109      	bne.n	8000bbe <pedes_light_fsm+0x72>
				setTimer4(get_timer2_counter());
 8000baa:	f000 f989 	bl	8000ec0 <get_timer2_counter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f8f9 	bl	8000da8 <setTimer4>
				pedes_state = PEDES_GREEN;
 8000bb6:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e021      	b.n	8000c02 <pedes_light_fsm+0xb6>
			}else if (state_1 == AUTO_GREEN){
 8000bbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ce8 <pedes_light_fsm+0x19c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d110      	bne.n	8000be8 <pedes_light_fsm+0x9c>
				setTimer4(get_timer2_counter() + amberTime*1000);
 8000bc6:	f000 f97b 	bl	8000ec0 <get_timer2_counter>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	4b47      	ldr	r3, [pc, #284]	; (8000cec <pedes_light_fsm+0x1a0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd4:	fb01 f303 	mul.w	r3, r1, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f8e4 	bl	8000da8 <setTimer4>
				pedes_state = PEDES_RED;
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000be2:	2202      	movs	r2, #2
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e00c      	b.n	8000c02 <pedes_light_fsm+0xb6>
			}else if (state_1 == AUTO_AMBER){
 8000be8:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <pedes_light_fsm+0x19c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d108      	bne.n	8000c02 <pedes_light_fsm+0xb6>
				setTimer4(get_timer2_counter());
 8000bf0:	f000 f966 	bl	8000ec0 <get_timer2_counter>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f8d6 	bl	8000da8 <setTimer4>
				pedes_state = PEDES_RED;
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	601a      	str	r2, [r3, #0]
			}

			setTimer5((redTime + amberTime + greenTime) *2000);
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <pedes_light_fsm+0x1a4>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b39      	ldr	r3, [pc, #228]	; (8000cec <pedes_light_fsm+0x1a0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	441a      	add	r2, r3
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <pedes_light_fsm+0x1a8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c16:	fb02 f303 	mul.w	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f8e0 	bl	8000de0 <setTimer5>
		}
		break;
 8000c20:	e052      	b.n	8000cc8 <pedes_light_fsm+0x17c>
	case PEDES_GREEN:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 1);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c28:	482c      	ldr	r0, [pc, #176]	; (8000cdc <pedes_light_fsm+0x190>)
 8000c2a:	f001 fbb0 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c34:	482a      	ldr	r0, [pc, #168]	; (8000ce0 <pedes_light_fsm+0x194>)
 8000c36:	f001 fbaa 	bl	800238e <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_ON;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <pedes_light_fsm+0x198>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]

		if (timer4_flag ==1){
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <pedes_light_fsm+0x1ac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10e      	bne.n	8000c66 <pedes_light_fsm+0x11a>
			pedes_state = PEDES_RED;
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	601a      	str	r2, [r3, #0]
			setTimer4((greenTime +amberTime) *1000);
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <pedes_light_fsm+0x1a8>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <pedes_light_fsm+0x1a0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c5c:	fb02 f303 	mul.w	r3, r2, r3
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f8a1 	bl	8000da8 <setTimer4>
		}
		if (timer5_flag ==1){
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <pedes_light_fsm+0x1b0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d12e      	bne.n	8000ccc <pedes_light_fsm+0x180>
			pedes_state = PEDES_OFF;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c74:	e02a      	b.n	8000ccc <pedes_light_fsm+0x180>
	case PEDES_RED:
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7c:	4817      	ldr	r0, [pc, #92]	; (8000cdc <pedes_light_fsm+0x190>)
 8000c7e:	f001 fb86 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c88:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <pedes_light_fsm+0x194>)
 8000c8a:	f001 fb80 	bl	800238e <HAL_GPIO_WritePin>
		buzzer_flag = BUZZER_OFF;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <pedes_light_fsm+0x198>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]

		if (timer4_flag ==1){
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <pedes_light_fsm+0x1ac>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10b      	bne.n	8000cb4 <pedes_light_fsm+0x168>
			pedes_state = PEDES_GREEN;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	601a      	str	r2, [r3, #0]
			setTimer4(redTime *1000);
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <pedes_light_fsm+0x1a4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f87a 	bl	8000da8 <setTimer4>
		}
		if (timer5_flag ==1){
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <pedes_light_fsm+0x1b0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d109      	bne.n	8000cd0 <pedes_light_fsm+0x184>
			pedes_state = PEDES_OFF;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <pedes_light_fsm+0x18c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]
		}
		break;
 8000cc2:	e005      	b.n	8000cd0 <pedes_light_fsm+0x184>
	default:
		break;
 8000cc4:	bf00      	nop
 8000cc6:	e004      	b.n	8000cd2 <pedes_light_fsm+0x186>
		break;
 8000cc8:	bf00      	nop
 8000cca:	e002      	b.n	8000cd2 <pedes_light_fsm+0x186>
		break;
 8000ccc:	bf00      	nop
 8000cce:	e000      	b.n	8000cd2 <pedes_light_fsm+0x186>
		break;
 8000cd0:	bf00      	nop
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000108 	.word	0x20000108
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	200000f8 	.word	0x200000f8
 8000ce8:	200000fc 	.word	0x200000fc
 8000cec:	20000054 	.word	0x20000054
 8000cf0:	20000050 	.word	0x20000050
 8000cf4:	20000058 	.word	0x20000058
 8000cf8:	20000124 	.word	0x20000124
 8000cfc:	2000012c 	.word	0x2000012c

08000d00 <setTimer1>:
int timer7_counter =0;

int timer8_flag =0;
int timer8_counter =0;

void setTimer1(int duration){
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <setTimer1+0x2c>)
 8000d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d10:	1092      	asrs	r2, r2, #2
 8000d12:	17db      	asrs	r3, r3, #31
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <setTimer1+0x30>)
 8000d18:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <setTimer1+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	66666667 	.word	0x66666667
 8000d30:	20000110 	.word	0x20000110
 8000d34:	2000010c 	.word	0x2000010c

08000d38 <setTimer2>:

void setTimer2(int duration){
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <setTimer2+0x2c>)
 8000d44:	fb82 1203 	smull	r1, r2, r2, r3
 8000d48:	1092      	asrs	r2, r2, #2
 8000d4a:	17db      	asrs	r3, r3, #31
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <setTimer2+0x30>)
 8000d50:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <setTimer2+0x34>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	66666667 	.word	0x66666667
 8000d68:	20000118 	.word	0x20000118
 8000d6c:	20000114 	.word	0x20000114

08000d70 <setTimer3>:
void setTimer3(int duration){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <setTimer3+0x2c>)
 8000d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d80:	1092      	asrs	r2, r2, #2
 8000d82:	17db      	asrs	r3, r3, #31
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <setTimer3+0x30>)
 8000d88:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <setTimer3+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	66666667 	.word	0x66666667
 8000da0:	20000120 	.word	0x20000120
 8000da4:	2000011c 	.word	0x2000011c

08000da8 <setTimer4>:
void setTimer4(int duration){
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <setTimer4+0x2c>)
 8000db4:	fb82 1203 	smull	r1, r2, r2, r3
 8000db8:	1092      	asrs	r2, r2, #2
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <setTimer4+0x30>)
 8000dc0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <setTimer4+0x34>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	66666667 	.word	0x66666667
 8000dd8:	20000128 	.word	0x20000128
 8000ddc:	20000124 	.word	0x20000124

08000de0 <setTimer5>:
void setTimer5(int duration){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <setTimer5+0x2c>)
 8000dec:	fb82 1203 	smull	r1, r2, r2, r3
 8000df0:	1092      	asrs	r2, r2, #2
 8000df2:	17db      	asrs	r3, r3, #31
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <setTimer5+0x30>)
 8000df8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <setTimer5+0x34>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	66666667 	.word	0x66666667
 8000e10:	20000130 	.word	0x20000130
 8000e14:	2000012c 	.word	0x2000012c

08000e18 <setTimer6>:
void setTimer6(int duration){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <setTimer6+0x2c>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	1092      	asrs	r2, r2, #2
 8000e2a:	17db      	asrs	r3, r3, #31
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <setTimer6+0x30>)
 8000e30:	6013      	str	r3, [r2, #0]
	timer6_flag =0;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <setTimer6+0x34>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	66666667 	.word	0x66666667
 8000e48:	20000138 	.word	0x20000138
 8000e4c:	20000134 	.word	0x20000134

08000e50 <setTimer7>:
void setTimer7(int duration){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <setTimer7+0x2c>)
 8000e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e60:	1092      	asrs	r2, r2, #2
 8000e62:	17db      	asrs	r3, r3, #31
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <setTimer7+0x30>)
 8000e68:	6013      	str	r3, [r2, #0]
	timer7_flag =0;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <setTimer7+0x34>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	66666667 	.word	0x66666667
 8000e80:	20000140 	.word	0x20000140
 8000e84:	2000013c 	.word	0x2000013c

08000e88 <setTimer8>:

void setTimer8(int duration){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <setTimer8+0x2c>)
 8000e94:	fb82 1203 	smull	r1, r2, r2, r3
 8000e98:	1092      	asrs	r2, r2, #2
 8000e9a:	17db      	asrs	r3, r3, #31
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <setTimer8+0x30>)
 8000ea0:	6013      	str	r3, [r2, #0]
	timer8_flag =0;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <setTimer8+0x34>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	66666667 	.word	0x66666667
 8000eb8:	20000148 	.word	0x20000148
 8000ebc:	20000144 	.word	0x20000144

08000ec0 <get_timer2_counter>:
int get_timer2_counter(){
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	return timer2_counter*TICK;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <get_timer2_counter+0x18>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000118 	.word	0x20000118

08000edc <get_timer4_counter>:

int get_timer4_counter(){
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return timer4_counter*TICK;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <get_timer4_counter+0x18>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	20000128 	.word	0x20000128

08000ef8 <timerInit>:

void timerInit(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	setTimer1(30);
 8000efc:	201e      	movs	r0, #30
 8000efe:	f7ff feff 	bl	8000d00 <setTimer1>
	setTimer2(50);
 8000f02:	2032      	movs	r0, #50	; 0x32
 8000f04:	f7ff ff18 	bl	8000d38 <setTimer2>
	setTimer3(70);
 8000f08:	2046      	movs	r0, #70	; 0x46
 8000f0a:	f7ff ff31 	bl	8000d70 <setTimer3>
	setTimer4(110);
 8000f0e:	206e      	movs	r0, #110	; 0x6e
 8000f10:	f7ff ff4a 	bl	8000da8 <setTimer4>
	setTimer5(130);
 8000f14:	2082      	movs	r0, #130	; 0x82
 8000f16:	f7ff ff63 	bl	8000de0 <setTimer5>
	setTimer6(170);
 8000f1a:	20aa      	movs	r0, #170	; 0xaa
 8000f1c:	f7ff ff7c 	bl	8000e18 <setTimer6>
	setTimer7(190);
 8000f20:	20be      	movs	r0, #190	; 0xbe
 8000f22:	f7ff ff95 	bl	8000e50 <setTimer7>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <timerRun>:

void timerRun(){
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000f30:	4b41      	ldr	r3, [pc, #260]	; (8001038 <timerRun+0x10c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dd0b      	ble.n	8000f50 <timerRun+0x24>
		timer1_counter--;
 8000f38:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <timerRun+0x10c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	4a3e      	ldr	r2, [pc, #248]	; (8001038 <timerRun+0x10c>)
 8000f40:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <timerRun+0x10c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	dc02      	bgt.n	8000f50 <timerRun+0x24>
			timer1_flag = 1;
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	; (800103c <timerRun+0x110>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000f50:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <timerRun+0x114>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dd0b      	ble.n	8000f70 <timerRun+0x44>
		timer2_counter--;
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <timerRun+0x114>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	4a38      	ldr	r2, [pc, #224]	; (8001040 <timerRun+0x114>)
 8000f60:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000f62:	4b37      	ldr	r3, [pc, #220]	; (8001040 <timerRun+0x114>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dc02      	bgt.n	8000f70 <timerRun+0x44>
			timer2_flag = 1;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	; (8001044 <timerRun+0x118>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <timerRun+0x11c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	dd0b      	ble.n	8000f90 <timerRun+0x64>
		timer3_counter--;
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <timerRun+0x11c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a32      	ldr	r2, [pc, #200]	; (8001048 <timerRun+0x11c>)
 8000f80:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000f82:	4b31      	ldr	r3, [pc, #196]	; (8001048 <timerRun+0x11c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	dc02      	bgt.n	8000f90 <timerRun+0x64>
			timer3_flag = 1;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <timerRun+0x120>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <timerRun+0x124>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dd0b      	ble.n	8000fb0 <timerRun+0x84>
		timer4_counter--;
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <timerRun+0x124>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <timerRun+0x124>)
 8000fa0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <timerRun+0x124>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	dc02      	bgt.n	8000fb0 <timerRun+0x84>
			timer4_flag = 1;
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <timerRun+0x128>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <timerRun+0x12c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd0b      	ble.n	8000fd0 <timerRun+0xa4>
		timer5_counter--;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <timerRun+0x12c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	4a26      	ldr	r2, [pc, #152]	; (8001058 <timerRun+0x12c>)
 8000fc0:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <timerRun+0x12c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	dc02      	bgt.n	8000fd0 <timerRun+0xa4>
			timer5_flag = 1;
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <timerRun+0x130>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <timerRun+0x134>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dd0b      	ble.n	8000ff0 <timerRun+0xc4>
		timer6_counter--;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <timerRun+0x134>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a20      	ldr	r2, [pc, #128]	; (8001060 <timerRun+0x134>)
 8000fe0:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <timerRun+0x134>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dc02      	bgt.n	8000ff0 <timerRun+0xc4>
			timer6_flag = 1;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <timerRun+0x138>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0){
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <timerRun+0x13c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dd0b      	ble.n	8001010 <timerRun+0xe4>
		timer7_counter--;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <timerRun+0x13c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <timerRun+0x13c>)
 8001000:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0){
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <timerRun+0x13c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	dc02      	bgt.n	8001010 <timerRun+0xe4>
			timer7_flag = 1;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <timerRun+0x140>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer8_counter > 0){
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <timerRun+0x144>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd0b      	ble.n	8001030 <timerRun+0x104>
			timer8_counter--;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <timerRun+0x144>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	4a14      	ldr	r2, [pc, #80]	; (8001070 <timerRun+0x144>)
 8001020:	6013      	str	r3, [r2, #0]
			if(timer8_counter <= 0){
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <timerRun+0x144>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	dc02      	bgt.n	8001030 <timerRun+0x104>
				timer8_flag = 1;
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <timerRun+0x148>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
			}
	}
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000110 	.word	0x20000110
 800103c:	2000010c 	.word	0x2000010c
 8001040:	20000118 	.word	0x20000118
 8001044:	20000114 	.word	0x20000114
 8001048:	20000120 	.word	0x20000120
 800104c:	2000011c 	.word	0x2000011c
 8001050:	20000128 	.word	0x20000128
 8001054:	20000124 	.word	0x20000124
 8001058:	20000130 	.word	0x20000130
 800105c:	2000012c 	.word	0x2000012c
 8001060:	20000138 	.word	0x20000138
 8001064:	20000134 	.word	0x20000134
 8001068:	20000140 	.word	0x20000140
 800106c:	2000013c 	.word	0x2000013c
 8001070:	20000148 	.word	0x20000148
 8001074:	20000144 	.word	0x20000144

08001078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_MspInit+0x5c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_MspInit+0x5c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x5c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_MspInit+0x5c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_MspInit+0x60>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_MspInit+0x60>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ec:	d114      	bne.n	8001118 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_TIM_Base_MspInit+0x68>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_TIM_Base_MspInit+0x68>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_TIM_Base_MspInit+0x68>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	201c      	movs	r0, #28
 800110c:	f000 febd 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001110:	201c      	movs	r0, #28
 8001112:	f000 fed6 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001116:	e010      	b.n	800113a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_TIM_Base_MspInit+0x6c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10b      	bne.n	800113a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_TIM_Base_MspInit+0x68>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_TIM_Base_MspInit+0x68>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_TIM_Base_MspInit+0x68>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	40000400 	.word	0x40000400

0800114c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_TIM_MspPostInit+0x58>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d117      	bne.n	800119c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_TIM_MspPostInit+0x5c>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <HAL_TIM_MspPostInit+0x5c>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_TIM_MspPostInit+0x5c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001184:	2340      	movs	r3, #64	; 0x40
 8001186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2302      	movs	r3, #2
 800118e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_TIM_MspPostInit+0x60>)
 8001198:	f000 ff5e 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40000400 	.word	0x40000400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <HAL_UART_MspInit+0x98>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d137      	bne.n	8001240 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_UART_MspInit+0x9c>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_UART_MspInit+0x9c>)
 80011d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011da:	61d3      	str	r3, [r2, #28]
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_UART_MspInit+0x9c>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x9c>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_UART_MspInit+0x9c>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x9c>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001200:	2304      	movs	r3, #4
 8001202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <HAL_UART_MspInit+0xa0>)
 8001214:	f000 ff20 	bl	8002058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001218:	2308      	movs	r3, #8
 800121a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <HAL_UART_MspInit+0xa0>)
 800122c:	f000 ff14 	bl	8002058 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2026      	movs	r0, #38	; 0x26
 8001236:	f000 fe28 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800123a:	2026      	movs	r0, #38	; 0x26
 800123c:	f000 fe41 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40004400 	.word	0x40004400
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129a:	f000 fd03 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <TIM2_IRQHandler+0x10>)
 80012aa:	f001 fe57 	bl	8002f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001a0 	.word	0x200001a0

080012b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <USART2_IRQHandler+0x10>)
 80012be:	f002 fcef 	bl	8003ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001f4 	.word	0x200001f4

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f003 f8c8 	bl	8004490 <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20005000 	.word	0x20005000
 800132c:	00000400 	.word	0x00000400
 8001330:	2000014c 	.word	0x2000014c
 8001334:	20000250 	.word	0x20000250

08001338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <fsm_automatic_run1>:
 *      Author: duyvt
 */

#include "traffic_automatic.h"

void fsm_automatic_run1(){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	switch(state_1){
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <fsm_automatic_run1+0x13c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b03      	cmp	r3, #3
 800134e:	f200 808d 	bhi.w	800146c <fsm_automatic_run1+0x128>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <fsm_automatic_run1+0x14>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	08001369 	.word	0x08001369
 800135c:	08001383 	.word	0x08001383
 8001360:	0800141f 	.word	0x0800141f
 8001364:	080013d1 	.word	0x080013d1
	case INIT:
		state_1 = AUTO_RED;
 8001368:	4b45      	ldr	r3, [pc, #276]	; (8001480 <fsm_automatic_run1+0x13c>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]
		setTimer2(redTime*1000);
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <fsm_automatic_run1+0x140>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fcdc 	bl	8000d38 <setTimer2>
		break;
 8001380:	e07b      	b.n	800147a <fsm_automatic_run1+0x136>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001388:	483f      	ldr	r0, [pc, #252]	; (8001488 <fsm_automatic_run1+0x144>)
 800138a:	f001 f800 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2108      	movs	r1, #8
 8001392:	483e      	ldr	r0, [pc, #248]	; (800148c <fsm_automatic_run1+0x148>)
 8001394:	f000 fffb 	bl	800238e <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <fsm_automatic_run1+0x14c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10b      	bne.n	80013b8 <fsm_automatic_run1+0x74>
			state_1 = AUTO_GREEN;
 80013a0:	4b37      	ldr	r3, [pc, #220]	; (8001480 <fsm_automatic_run1+0x13c>)
 80013a2:	2203      	movs	r2, #3
 80013a4:	601a      	str	r2, [r3, #0]
			setTimer2(greenTime*1000);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <fsm_automatic_run1+0x150>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fcc0 	bl	8000d38 <setTimer2>
		}

		if (mode == MODE_2){
 80013b8:	4b37      	ldr	r3, [pc, #220]	; (8001498 <fsm_automatic_run1+0x154>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d157      	bne.n	8001470 <fsm_automatic_run1+0x12c>
			state_1 = MAN_RED;
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <fsm_automatic_run1+0x13c>)
 80013c2:	220b      	movs	r2, #11
 80013c4:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 80013c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80013ca:	f7ff fcb5 	bl	8000d38 <setTimer2>
		}
		break;
 80013ce:	e04f      	b.n	8001470 <fsm_automatic_run1+0x12c>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d6:	482c      	ldr	r0, [pc, #176]	; (8001488 <fsm_automatic_run1+0x144>)
 80013d8:	f000 ffd9 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	2108      	movs	r1, #8
 80013e0:	482a      	ldr	r0, [pc, #168]	; (800148c <fsm_automatic_run1+0x148>)
 80013e2:	f000 ffd4 	bl	800238e <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <fsm_automatic_run1+0x14c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10b      	bne.n	8001406 <fsm_automatic_run1+0xc2>
			state_1 = AUTO_AMBER;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <fsm_automatic_run1+0x13c>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
			setTimer2(amberTime*1000);
 80013f4:	4b29      	ldr	r3, [pc, #164]	; (800149c <fsm_automatic_run1+0x158>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fc99 	bl	8000d38 <setTimer2>
		}

		if (mode == MODE_2){
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <fsm_automatic_run1+0x154>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d132      	bne.n	8001474 <fsm_automatic_run1+0x130>
			state_1 = MAN_RED;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <fsm_automatic_run1+0x13c>)
 8001410:	220b      	movs	r2, #11
 8001412:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8001414:	f242 7010 	movw	r0, #10000	; 0x2710
 8001418:	f7ff fc8e 	bl	8000d38 <setTimer2>
		}
		break;
 800141c:	e02a      	b.n	8001474 <fsm_automatic_run1+0x130>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001424:	4818      	ldr	r0, [pc, #96]	; (8001488 <fsm_automatic_run1+0x144>)
 8001426:	f000 ffb2 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 800142a:	2201      	movs	r2, #1
 800142c:	2108      	movs	r1, #8
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <fsm_automatic_run1+0x148>)
 8001430:	f000 ffad 	bl	800238e <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <fsm_automatic_run1+0x14c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d10b      	bne.n	8001454 <fsm_automatic_run1+0x110>
			state_1 = AUTO_RED;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <fsm_automatic_run1+0x13c>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <fsm_automatic_run1+0x140>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fc72 	bl	8000d38 <setTimer2>
		}

		if (mode == MODE_2){
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <fsm_automatic_run1+0x154>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d10d      	bne.n	8001478 <fsm_automatic_run1+0x134>
			state_1 = MAN_RED;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <fsm_automatic_run1+0x13c>)
 800145e:	220b      	movs	r2, #11
 8001460:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8001462:	f242 7010 	movw	r0, #10000	; 0x2710
 8001466:	f7ff fc67 	bl	8000d38 <setTimer2>
		}
		break;
 800146a:	e005      	b.n	8001478 <fsm_automatic_run1+0x134>
	default:
		break;
 800146c:	bf00      	nop
 800146e:	e004      	b.n	800147a <fsm_automatic_run1+0x136>
		break;
 8001470:	bf00      	nop
 8001472:	e002      	b.n	800147a <fsm_automatic_run1+0x136>
		break;
 8001474:	bf00      	nop
 8001476:	e000      	b.n	800147a <fsm_automatic_run1+0x136>
		break;
 8001478:	bf00      	nop
	}
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200000fc 	.word	0x200000fc
 8001484:	20000050 	.word	0x20000050
 8001488:	40010800 	.word	0x40010800
 800148c:	40010c00 	.word	0x40010c00
 8001490:	20000114 	.word	0x20000114
 8001494:	20000058 	.word	0x20000058
 8001498:	20000104 	.word	0x20000104
 800149c:	20000054 	.word	0x20000054

080014a0 <fsm_automatic_run2>:

void fsm_automatic_run2(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	switch(state_2){
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <fsm_automatic_run2+0x138>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	f200 808c 	bhi.w	80015c6 <fsm_automatic_run2+0x126>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <fsm_automatic_run2+0x14>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	0800157b 	.word	0x0800157b
 80014bc:	0800152f 	.word	0x0800152f
 80014c0:	080014df 	.word	0x080014df
	case INIT:
		state_2 = AUTO_GREEN;
 80014c4:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <fsm_automatic_run2+0x138>)
 80014c6:	2203      	movs	r2, #3
 80014c8:	601a      	str	r2, [r3, #0]
		setTimer3(greenTime*1000);
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <fsm_automatic_run2+0x13c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc4a 	bl	8000d70 <setTimer3>
		break;
 80014dc:	e07a      	b.n	80015d4 <fsm_automatic_run2+0x134>
	case AUTO_GREEN:
		ledBlink();
 80014de:	f7ff f941 	bl	8000764 <ledBlink>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2120      	movs	r1, #32
 80014e6:	483e      	ldr	r0, [pc, #248]	; (80015e0 <fsm_automatic_run2+0x140>)
 80014e8:	f000 ff51 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2110      	movs	r1, #16
 80014f0:	483b      	ldr	r0, [pc, #236]	; (80015e0 <fsm_automatic_run2+0x140>)
 80014f2:	f000 ff4c 	bl	800238e <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <fsm_automatic_run2+0x144>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10b      	bne.n	8001516 <fsm_automatic_run2+0x76>
			state_2 = AUTO_AMBER;
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <fsm_automatic_run2+0x138>)
 8001500:	2202      	movs	r2, #2
 8001502:	601a      	str	r2, [r3, #0]
			setTimer3(amberTime*1000);
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <fsm_automatic_run2+0x148>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fc2d 	bl	8000d70 <setTimer3>
		}

		if (mode == MODE_2){
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <fsm_automatic_run2+0x14c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d155      	bne.n	80015ca <fsm_automatic_run2+0x12a>
			state_2 = MAN_GREEN;
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <fsm_automatic_run2+0x138>)
 8001520:	220d      	movs	r2, #13
 8001522:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8001524:	f242 7010 	movw	r0, #10000	; 0x2710
 8001528:	f7ff fc22 	bl	8000d70 <setTimer3>
		}
		break;
 800152c:	e04d      	b.n	80015ca <fsm_automatic_run2+0x12a>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 800152e:	2201      	movs	r2, #1
 8001530:	2110      	movs	r1, #16
 8001532:	482b      	ldr	r0, [pc, #172]	; (80015e0 <fsm_automatic_run2+0x140>)
 8001534:	f000 ff2b 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2120      	movs	r1, #32
 800153c:	4828      	ldr	r0, [pc, #160]	; (80015e0 <fsm_automatic_run2+0x140>)
 800153e:	f000 ff26 	bl	800238e <HAL_GPIO_WritePin>
		if(timer3_flag ==1){
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <fsm_automatic_run2+0x144>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10b      	bne.n	8001562 <fsm_automatic_run2+0xc2>
			state_2 = AUTO_RED;
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <fsm_automatic_run2+0x138>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
			setTimer3(redTime*1000);
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <fsm_automatic_run2+0x150>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fc07 	bl	8000d70 <setTimer3>
		}

		if (mode == MODE_2){
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <fsm_automatic_run2+0x14c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d131      	bne.n	80015ce <fsm_automatic_run2+0x12e>
			state_2 = MAN_GREEN;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <fsm_automatic_run2+0x138>)
 800156c:	220d      	movs	r2, #13
 800156e:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8001570:	f242 7010 	movw	r0, #10000	; 0x2710
 8001574:	f7ff fbfc 	bl	8000d70 <setTimer3>
		}
		break;
 8001578:	e029      	b.n	80015ce <fsm_automatic_run2+0x12e>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 800157a:	2201      	movs	r2, #1
 800157c:	2120      	movs	r1, #32
 800157e:	4818      	ldr	r0, [pc, #96]	; (80015e0 <fsm_automatic_run2+0x140>)
 8001580:	f000 ff05 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2110      	movs	r1, #16
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <fsm_automatic_run2+0x140>)
 800158a:	f000 ff00 	bl	800238e <HAL_GPIO_WritePin>

		if(timer3_flag ==1){
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <fsm_automatic_run2+0x144>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d10b      	bne.n	80015ae <fsm_automatic_run2+0x10e>
			state_2 = AUTO_GREEN;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <fsm_automatic_run2+0x138>)
 8001598:	2203      	movs	r2, #3
 800159a:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <fsm_automatic_run2+0x13c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fbe1 	bl	8000d70 <setTimer3>
		}

		if (mode == MODE_2){
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <fsm_automatic_run2+0x14c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d10d      	bne.n	80015d2 <fsm_automatic_run2+0x132>
			state_2 = MAN_GREEN;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <fsm_automatic_run2+0x138>)
 80015b8:	220d      	movs	r2, #13
 80015ba:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 80015bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80015c0:	f7ff fbd6 	bl	8000d70 <setTimer3>
		}
		break;
 80015c4:	e005      	b.n	80015d2 <fsm_automatic_run2+0x132>
	default:
		break;
 80015c6:	bf00      	nop
 80015c8:	e004      	b.n	80015d4 <fsm_automatic_run2+0x134>
		break;
 80015ca:	bf00      	nop
 80015cc:	e002      	b.n	80015d4 <fsm_automatic_run2+0x134>
		break;
 80015ce:	bf00      	nop
 80015d0:	e000      	b.n	80015d4 <fsm_automatic_run2+0x134>
		break;
 80015d2:	bf00      	nop
	}
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000100 	.word	0x20000100
 80015dc:	20000058 	.word	0x20000058
 80015e0:	40010c00 	.word	0x40010c00
 80015e4:	2000011c 	.word	0x2000011c
 80015e8:	20000054 	.word	0x20000054
 80015ec:	20000104 	.word	0x20000104
 80015f0:	20000050 	.word	0x20000050

080015f4 <fsm_manual_run1>:
 */


#include "traffic_manual.h"

void fsm_manual_run1(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	switch (state_1){
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <fsm_manual_run1+0x154>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b0d      	cmp	r3, #13
 80015fe:	d038      	beq.n	8001672 <fsm_manual_run1+0x7e>
 8001600:	2b0d      	cmp	r3, #13
 8001602:	f300 8098 	bgt.w	8001736 <fsm_manual_run1+0x142>
 8001606:	2b0b      	cmp	r3, #11
 8001608:	d002      	beq.n	8001610 <fsm_manual_run1+0x1c>
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d062      	beq.n	80016d4 <fsm_manual_run1+0xe0>
			state_1=AUTO_RED;
			setTimer2(redTime*1000);
		}
		break;
	default:
		break;
 800160e:	e092      	b.n	8001736 <fsm_manual_run1+0x142>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001616:	484d      	ldr	r0, [pc, #308]	; (800174c <fsm_manual_run1+0x158>)
 8001618:	f000 feb9 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2108      	movs	r1, #8
 8001620:	484b      	ldr	r0, [pc, #300]	; (8001750 <fsm_manual_run1+0x15c>)
 8001622:	f000 feb4 	bl	800238e <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <fsm_manual_run1+0x160>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d10d      	bne.n	800164a <fsm_manual_run1+0x56>
			state_1= TUN_GREEN;
 800162e:	4b46      	ldr	r3, [pc, #280]	; (8001748 <fsm_manual_run1+0x154>)
 8001630:	2217      	movs	r2, #23
 8001632:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163a:	4844      	ldr	r0, [pc, #272]	; (800174c <fsm_manual_run1+0x158>)
 800163c:	f000 fea7 	bl	800238e <HAL_GPIO_WritePin>
			uartRun();
 8001640:	f000 fa2a 	bl	8001a98 <uartRun>
			setTimer2(250);
 8001644:	20fa      	movs	r0, #250	; 0xfa
 8001646:	f7ff fb77 	bl	8000d38 <setTimer2>
		if (timer2_flag ==1){
 800164a:	4b43      	ldr	r3, [pc, #268]	; (8001758 <fsm_manual_run1+0x164>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d173      	bne.n	800173a <fsm_manual_run1+0x146>
			mode = MODE_1;
 8001652:	4b40      	ldr	r3, [pc, #256]	; (8001754 <fsm_manual_run1+0x160>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 8001658:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <fsm_manual_run1+0x154>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <fsm_manual_run1+0x168>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fb64 	bl	8000d38 <setTimer2>
		break;
 8001670:	e063      	b.n	800173a <fsm_manual_run1+0x146>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 0);
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001678:	4834      	ldr	r0, [pc, #208]	; (800174c <fsm_manual_run1+0x158>)
 800167a:	f000 fe88 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 800167e:	2201      	movs	r2, #1
 8001680:	2108      	movs	r1, #8
 8001682:	4833      	ldr	r0, [pc, #204]	; (8001750 <fsm_manual_run1+0x15c>)
 8001684:	f000 fe83 	bl	800238e <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <fsm_manual_run1+0x160>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d10d      	bne.n	80016ac <fsm_manual_run1+0xb8>
			state_1= TUN_GREEN;
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <fsm_manual_run1+0x154>)
 8001692:	2217      	movs	r2, #23
 8001694:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169c:	482b      	ldr	r0, [pc, #172]	; (800174c <fsm_manual_run1+0x158>)
 800169e:	f000 fe76 	bl	800238e <HAL_GPIO_WritePin>
			uartRun();
 80016a2:	f000 f9f9 	bl	8001a98 <uartRun>
			setTimer2(250);
 80016a6:	20fa      	movs	r0, #250	; 0xfa
 80016a8:	f7ff fb46 	bl	8000d38 <setTimer2>
		if (timer2_flag ==1){
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <fsm_manual_run1+0x164>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d144      	bne.n	800173e <fsm_manual_run1+0x14a>
			mode = MODE_1;
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <fsm_manual_run1+0x160>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <fsm_manual_run1+0x154>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <fsm_manual_run1+0x168>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb33 	bl	8000d38 <setTimer2>
		break;
 80016d2:	e034      	b.n	800173e <fsm_manual_run1+0x14a>
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_1_Pin , 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016da:	481c      	ldr	r0, [pc, #112]	; (800174c <fsm_manual_run1+0x158>)
 80016dc:	f000 fe57 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_0_Pin , 1);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2108      	movs	r1, #8
 80016e4:	481a      	ldr	r0, [pc, #104]	; (8001750 <fsm_manual_run1+0x15c>)
 80016e6:	f000 fe52 	bl	800238e <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <fsm_manual_run1+0x160>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d10d      	bne.n	800170e <fsm_manual_run1+0x11a>
			state_1= TUN_GREEN;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <fsm_manual_run1+0x154>)
 80016f4:	2217      	movs	r2, #23
 80016f6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_1_Pin, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <fsm_manual_run1+0x158>)
 8001700:	f000 fe45 	bl	800238e <HAL_GPIO_WritePin>
			uartRun();
 8001704:	f000 f9c8 	bl	8001a98 <uartRun>
			setTimer2(250);
 8001708:	20fa      	movs	r0, #250	; 0xfa
 800170a:	f7ff fb15 	bl	8000d38 <setTimer2>
		if (timer2_flag ==1){
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <fsm_manual_run1+0x164>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d115      	bne.n	8001742 <fsm_manual_run1+0x14e>
			mode = MODE_1;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <fsm_manual_run1+0x160>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
			state_1=AUTO_RED;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <fsm_manual_run1+0x154>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <fsm_manual_run1+0x168>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fb02 	bl	8000d38 <setTimer2>
		break;
 8001734:	e005      	b.n	8001742 <fsm_manual_run1+0x14e>
		break;
 8001736:	bf00      	nop
 8001738:	e004      	b.n	8001744 <fsm_manual_run1+0x150>
		break;
 800173a:	bf00      	nop
 800173c:	e002      	b.n	8001744 <fsm_manual_run1+0x150>
		break;
 800173e:	bf00      	nop
 8001740:	e000      	b.n	8001744 <fsm_manual_run1+0x150>
		break;
 8001742:	bf00      	nop
	}
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200000fc 	.word	0x200000fc
 800174c:	40010800 	.word	0x40010800
 8001750:	40010c00 	.word	0x40010c00
 8001754:	20000104 	.word	0x20000104
 8001758:	20000114 	.word	0x20000114
 800175c:	20000050 	.word	0x20000050

08001760 <fsm_manual_run2>:

void fsm_manual_run2(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	switch (state_2){
 8001764:	4b4d      	ldr	r3, [pc, #308]	; (800189c <fsm_manual_run2+0x13c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b0d      	cmp	r3, #13
 800176a:	d007      	beq.n	800177c <fsm_manual_run2+0x1c>
 800176c:	2b0d      	cmp	r3, #13
 800176e:	f300 808c 	bgt.w	800188a <fsm_manual_run2+0x12a>
 8001772:	2b0b      	cmp	r3, #11
 8001774:	d05c      	beq.n	8001830 <fsm_manual_run2+0xd0>
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d02d      	beq.n	80017d6 <fsm_manual_run2+0x76>
			state_2=AUTO_GREEN;
			setTimer3(greenTime*1000);
		}
		break;
	default:
		break;
 800177a:	e086      	b.n	800188a <fsm_manual_run2+0x12a>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2120      	movs	r1, #32
 8001780:	4847      	ldr	r0, [pc, #284]	; (80018a0 <fsm_manual_run2+0x140>)
 8001782:	f000 fe04 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 8001786:	2201      	movs	r2, #1
 8001788:	2110      	movs	r1, #16
 800178a:	4845      	ldr	r0, [pc, #276]	; (80018a0 <fsm_manual_run2+0x140>)
 800178c:	f000 fdff 	bl	800238e <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001790:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <fsm_manual_run2+0x144>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d10a      	bne.n	80017ae <fsm_manual_run2+0x4e>
			state_2= TUN_GREEN;
 8001798:	4b40      	ldr	r3, [pc, #256]	; (800189c <fsm_manual_run2+0x13c>)
 800179a:	2217      	movs	r2, #23
 800179c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2120      	movs	r1, #32
 80017a2:	483f      	ldr	r0, [pc, #252]	; (80018a0 <fsm_manual_run2+0x140>)
 80017a4:	f000 fdf3 	bl	800238e <HAL_GPIO_WritePin>
			setTimer3(250);
 80017a8:	20fa      	movs	r0, #250	; 0xfa
 80017aa:	f7ff fae1 	bl	8000d70 <setTimer3>
		if (timer3_flag ==1){
 80017ae:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <fsm_manual_run2+0x148>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d16b      	bne.n	800188e <fsm_manual_run2+0x12e>
			mode = MODE_1;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <fsm_manual_run2+0x144>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <fsm_manual_run2+0x13c>)
 80017be:	2203      	movs	r2, #3
 80017c0:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80017c2:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <fsm_manual_run2+0x14c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff face 	bl	8000d70 <setTimer3>
		break;
 80017d4:	e05b      	b.n	800188e <fsm_manual_run2+0x12e>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2110      	movs	r1, #16
 80017da:	4831      	ldr	r0, [pc, #196]	; (80018a0 <fsm_manual_run2+0x140>)
 80017dc:	f000 fdd7 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2120      	movs	r1, #32
 80017e4:	482e      	ldr	r0, [pc, #184]	; (80018a0 <fsm_manual_run2+0x140>)
 80017e6:	f000 fdd2 	bl	800238e <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <fsm_manual_run2+0x144>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d10a      	bne.n	8001808 <fsm_manual_run2+0xa8>
			state_2= TUN_GREEN;
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <fsm_manual_run2+0x13c>)
 80017f4:	2217      	movs	r2, #23
 80017f6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2120      	movs	r1, #32
 80017fc:	4828      	ldr	r0, [pc, #160]	; (80018a0 <fsm_manual_run2+0x140>)
 80017fe:	f000 fdc6 	bl	800238e <HAL_GPIO_WritePin>
			setTimer3(250);
 8001802:	20fa      	movs	r0, #250	; 0xfa
 8001804:	f7ff fab4 	bl	8000d70 <setTimer3>
		if (timer3_flag ==1){
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <fsm_manual_run2+0x148>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d140      	bne.n	8001892 <fsm_manual_run2+0x132>
			mode = MODE_1;
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <fsm_manual_run2+0x144>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <fsm_manual_run2+0x13c>)
 8001818:	2203      	movs	r2, #3
 800181a:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <fsm_manual_run2+0x14c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff faa1 	bl	8000d70 <setTimer3>
		break;
 800182e:	e030      	b.n	8001892 <fsm_manual_run2+0x132>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8001830:	2201      	movs	r2, #1
 8001832:	2120      	movs	r1, #32
 8001834:	481a      	ldr	r0, [pc, #104]	; (80018a0 <fsm_manual_run2+0x140>)
 8001836:	f000 fdaa 	bl	800238e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2110      	movs	r1, #16
 800183e:	4818      	ldr	r0, [pc, #96]	; (80018a0 <fsm_manual_run2+0x140>)
 8001840:	f000 fda5 	bl	800238e <HAL_GPIO_WritePin>
		if (mode == MODE_3){
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <fsm_manual_run2+0x144>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d10a      	bne.n	8001862 <fsm_manual_run2+0x102>
			state_2= TUN_GREEN;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <fsm_manual_run2+0x13c>)
 800184e:	2217      	movs	r2, #23
 8001850:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2120      	movs	r1, #32
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <fsm_manual_run2+0x140>)
 8001858:	f000 fd99 	bl	800238e <HAL_GPIO_WritePin>
			setTimer3(250);
 800185c:	20fa      	movs	r0, #250	; 0xfa
 800185e:	f7ff fa87 	bl	8000d70 <setTimer3>
		if (timer3_flag ==1){
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <fsm_manual_run2+0x148>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d115      	bne.n	8001896 <fsm_manual_run2+0x136>
			mode = MODE_1;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <fsm_manual_run2+0x144>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
			state_2=AUTO_GREEN;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <fsm_manual_run2+0x13c>)
 8001872:	2203      	movs	r2, #3
 8001874:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <fsm_manual_run2+0x14c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa74 	bl	8000d70 <setTimer3>
		break;
 8001888:	e005      	b.n	8001896 <fsm_manual_run2+0x136>
		break;
 800188a:	bf00      	nop
 800188c:	e004      	b.n	8001898 <fsm_manual_run2+0x138>
		break;
 800188e:	bf00      	nop
 8001890:	e002      	b.n	8001898 <fsm_manual_run2+0x138>
		break;
 8001892:	bf00      	nop
 8001894:	e000      	b.n	8001898 <fsm_manual_run2+0x138>
		break;
 8001896:	bf00      	nop
	}
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000100 	.word	0x20000100
 80018a0:	40010c00 	.word	0x40010c00
 80018a4:	20000104 	.word	0x20000104
 80018a8:	2000011c 	.word	0x2000011c
 80018ac:	20000058 	.word	0x20000058

080018b0 <fsm_tuning_run1>:
 *      Author: duyvt
 */

#include "traffic_tuning.h"

void fsm_tuning_run1(){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	switch(state_1){
 80018b4:	4b36      	ldr	r3, [pc, #216]	; (8001990 <fsm_tuning_run1+0xe0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b17      	cmp	r3, #23
 80018ba:	d006      	beq.n	80018ca <fsm_tuning_run1+0x1a>
 80018bc:	2b17      	cmp	r3, #23
 80018be:	dc5e      	bgt.n	800197e <fsm_tuning_run1+0xce>
 80018c0:	2b15      	cmp	r3, #21
 80018c2:	d03f      	beq.n	8001944 <fsm_tuning_run1+0x94>
 80018c4:	2b16      	cmp	r3, #22
 80018c6:	d01c      	beq.n	8001902 <fsm_tuning_run1+0x52>
			setTimer2(redTime*1000);
		}

		break;
	default:
		break;
 80018c8:	e059      	b.n	800197e <fsm_tuning_run1+0xce>
		if (timer2_flag ==1){
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <fsm_tuning_run1+0xe4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d106      	bne.n	80018e0 <fsm_tuning_run1+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 80018d2:	2108      	movs	r1, #8
 80018d4:	4830      	ldr	r0, [pc, #192]	; (8001998 <fsm_tuning_run1+0xe8>)
 80018d6:	f000 fd72 	bl	80023be <HAL_GPIO_TogglePin>
			setTimer2(250);
 80018da:	20fa      	movs	r0, #250	; 0xfa
 80018dc:	f7ff fa2c 	bl	8000d38 <setTimer2>
		if(mode == MODE_1){
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <fsm_tuning_run1+0xec>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d14c      	bne.n	8001982 <fsm_tuning_run1+0xd2>
			state_1 = AUTO_RED;
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <fsm_tuning_run1+0xe0>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <fsm_tuning_run1+0xf0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa1c 	bl	8000d38 <setTimer2>
		break;
 8001900:	e03f      	b.n	8001982 <fsm_tuning_run1+0xd2>
		if (timer2_flag ==1){
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <fsm_tuning_run1+0xe4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d10b      	bne.n	8001922 <fsm_tuning_run1+0x72>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 800190a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190e:	4825      	ldr	r0, [pc, #148]	; (80019a4 <fsm_tuning_run1+0xf4>)
 8001910:	f000 fd55 	bl	80023be <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_0_Pin);
 8001914:	2108      	movs	r1, #8
 8001916:	4820      	ldr	r0, [pc, #128]	; (8001998 <fsm_tuning_run1+0xe8>)
 8001918:	f000 fd51 	bl	80023be <HAL_GPIO_TogglePin>
			setTimer2(250);
 800191c:	20fa      	movs	r0, #250	; 0xfa
 800191e:	f7ff fa0b 	bl	8000d38 <setTimer2>
		if(mode == MODE_1){
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <fsm_tuning_run1+0xec>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d12d      	bne.n	8001986 <fsm_tuning_run1+0xd6>
			state_1 = AUTO_RED;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <fsm_tuning_run1+0xe0>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <fsm_tuning_run1+0xf0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f9fb 	bl	8000d38 <setTimer2>
		break;
 8001942:	e020      	b.n	8001986 <fsm_tuning_run1+0xd6>
		if (timer2_flag ==1){
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <fsm_tuning_run1+0xe4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d107      	bne.n	800195c <fsm_tuning_run1+0xac>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_1_Pin);
 800194c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001950:	4814      	ldr	r0, [pc, #80]	; (80019a4 <fsm_tuning_run1+0xf4>)
 8001952:	f000 fd34 	bl	80023be <HAL_GPIO_TogglePin>
			setTimer2(250);
 8001956:	20fa      	movs	r0, #250	; 0xfa
 8001958:	f7ff f9ee 	bl	8000d38 <setTimer2>
		if(mode == MODE_1){
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <fsm_tuning_run1+0xec>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d112      	bne.n	800198a <fsm_tuning_run1+0xda>
			state_1 = AUTO_RED;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <fsm_tuning_run1+0xe0>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <fsm_tuning_run1+0xf0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f9de 	bl	8000d38 <setTimer2>
		break;
 800197c:	e005      	b.n	800198a <fsm_tuning_run1+0xda>
		break;
 800197e:	bf00      	nop
 8001980:	e004      	b.n	800198c <fsm_tuning_run1+0xdc>
		break;
 8001982:	bf00      	nop
 8001984:	e002      	b.n	800198c <fsm_tuning_run1+0xdc>
		break;
 8001986:	bf00      	nop
 8001988:	e000      	b.n	800198c <fsm_tuning_run1+0xdc>
		break;
 800198a:	bf00      	nop
	}
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200000fc 	.word	0x200000fc
 8001994:	20000114 	.word	0x20000114
 8001998:	40010c00 	.word	0x40010c00
 800199c:	20000104 	.word	0x20000104
 80019a0:	20000050 	.word	0x20000050
 80019a4:	40010800 	.word	0x40010800

080019a8 <fsm_tuning_run2>:

void fsm_tuning_run2(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	switch(state_2){
 80019ac:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <fsm_tuning_run2+0xdc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b17      	cmp	r3, #23
 80019b2:	d006      	beq.n	80019c2 <fsm_tuning_run2+0x1a>
 80019b4:	2b17      	cmp	r3, #23
 80019b6:	dc5c      	bgt.n	8001a72 <fsm_tuning_run2+0xca>
 80019b8:	2b15      	cmp	r3, #21
 80019ba:	d03e      	beq.n	8001a3a <fsm_tuning_run2+0x92>
 80019bc:	2b16      	cmp	r3, #22
 80019be:	d01c      	beq.n	80019fa <fsm_tuning_run2+0x52>
			setTimer3(greenTime*1000);
		}

		break;
	default:
		break;
 80019c0:	e057      	b.n	8001a72 <fsm_tuning_run2+0xca>
		if (timer3_flag ==1){
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <fsm_tuning_run2+0xe0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d106      	bne.n	80019d8 <fsm_tuning_run2+0x30>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 80019ca:	2110      	movs	r1, #16
 80019cc:	482f      	ldr	r0, [pc, #188]	; (8001a8c <fsm_tuning_run2+0xe4>)
 80019ce:	f000 fcf6 	bl	80023be <HAL_GPIO_TogglePin>
			setTimer3(250);
 80019d2:	20fa      	movs	r0, #250	; 0xfa
 80019d4:	f7ff f9cc 	bl	8000d70 <setTimer3>
		if(mode == MODE_1){
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <fsm_tuning_run2+0xe8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d14a      	bne.n	8001a76 <fsm_tuning_run2+0xce>
			state_2 = AUTO_GREEN;
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <fsm_tuning_run2+0xdc>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80019e6:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <fsm_tuning_run2+0xec>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f9bc 	bl	8000d70 <setTimer3>
		break;
 80019f8:	e03d      	b.n	8001a76 <fsm_tuning_run2+0xce>
		if (timer3_flag ==1){
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <fsm_tuning_run2+0xe0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d10a      	bne.n	8001a18 <fsm_tuning_run2+0x70>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 8001a02:	2120      	movs	r1, #32
 8001a04:	4821      	ldr	r0, [pc, #132]	; (8001a8c <fsm_tuning_run2+0xe4>)
 8001a06:	f000 fcda 	bl	80023be <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	481f      	ldr	r0, [pc, #124]	; (8001a8c <fsm_tuning_run2+0xe4>)
 8001a0e:	f000 fcd6 	bl	80023be <HAL_GPIO_TogglePin>
			setTimer3(250);
 8001a12:	20fa      	movs	r0, #250	; 0xfa
 8001a14:	f7ff f9ac 	bl	8000d70 <setTimer3>
		if(mode == MODE_1){
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <fsm_tuning_run2+0xe8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d12c      	bne.n	8001a7a <fsm_tuning_run2+0xd2>
			state_2 = AUTO_GREEN;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <fsm_tuning_run2+0xdc>)
 8001a22:	2203      	movs	r2, #3
 8001a24:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <fsm_tuning_run2+0xec>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f99c 	bl	8000d70 <setTimer3>
		break;
 8001a38:	e01f      	b.n	8001a7a <fsm_tuning_run2+0xd2>
		if (timer3_flag ==1){
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <fsm_tuning_run2+0xe0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <fsm_tuning_run2+0xa8>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 8001a42:	2120      	movs	r1, #32
 8001a44:	4811      	ldr	r0, [pc, #68]	; (8001a8c <fsm_tuning_run2+0xe4>)
 8001a46:	f000 fcba 	bl	80023be <HAL_GPIO_TogglePin>
			setTimer3(250);
 8001a4a:	20fa      	movs	r0, #250	; 0xfa
 8001a4c:	f7ff f990 	bl	8000d70 <setTimer3>
		if(mode == MODE_1){
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <fsm_tuning_run2+0xe8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d112      	bne.n	8001a7e <fsm_tuning_run2+0xd6>
			state_2 = AUTO_GREEN;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <fsm_tuning_run2+0xdc>)
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <fsm_tuning_run2+0xec>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f980 	bl	8000d70 <setTimer3>
		break;
 8001a70:	e005      	b.n	8001a7e <fsm_tuning_run2+0xd6>
		break;
 8001a72:	bf00      	nop
 8001a74:	e004      	b.n	8001a80 <fsm_tuning_run2+0xd8>
		break;
 8001a76:	bf00      	nop
 8001a78:	e002      	b.n	8001a80 <fsm_tuning_run2+0xd8>
		break;
 8001a7a:	bf00      	nop
 8001a7c:	e000      	b.n	8001a80 <fsm_tuning_run2+0xd8>
		break;
 8001a7e:	bf00      	nop
	}
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000100 	.word	0x20000100
 8001a88:	2000011c 	.word	0x2000011c
 8001a8c:	40010c00 	.word	0x40010c00
 8001a90:	20000104 	.word	0x20000104
 8001a94:	20000058 	.word	0x20000058

08001a98 <uartRun>:
#include "uart.h"
UART_HandleTypeDef huart2;
char str1[10];

void uartRun(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	if (mode == MODE_1){
 8001a9c:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <uartRun+0x10c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d11d      	bne.n	8001ae0 <uartRun+0x48>
		if (timer8_flag ==1){
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <uartRun+0x110>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d119      	bne.n	8001ae0 <uartRun+0x48>
			HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", (get_timer2_counter()/1000)), 500);
 8001aac:	f7ff fa08 	bl	8000ec0 <get_timer2_counter>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a3e      	ldr	r2, [pc, #248]	; (8001bac <uartRun+0x114>)
 8001ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab8:	1192      	asrs	r2, r2, #6
 8001aba:	17db      	asrs	r3, r3, #31
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	493b      	ldr	r1, [pc, #236]	; (8001bb0 <uartRun+0x118>)
 8001ac2:	483c      	ldr	r0, [pc, #240]	; (8001bb4 <uartRun+0x11c>)
 8001ac4:	f002 fd16 	bl	80044f4 <siprintf>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ad0:	4938      	ldr	r1, [pc, #224]	; (8001bb4 <uartRun+0x11c>)
 8001ad2:	4839      	ldr	r0, [pc, #228]	; (8001bb8 <uartRun+0x120>)
 8001ad4:	f002 f851 	bl	8003b7a <HAL_UART_Transmit>
			setTimer8(500);
 8001ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001adc:	f7ff f9d4 	bl	8000e88 <setTimer8>
		}
	}

	if (mode == MODE_3){
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <uartRun+0x10c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d152      	bne.n	8001b8e <uartRun+0xf6>
		switch(state_1){
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <uartRun+0x124>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b17      	cmp	r3, #23
 8001aee:	d01e      	beq.n	8001b2e <uartRun+0x96>
 8001af0:	2b17      	cmp	r3, #23
 8001af2:	dc4e      	bgt.n	8001b92 <uartRun+0xfa>
 8001af4:	2b15      	cmp	r3, #21
 8001af6:	d002      	beq.n	8001afe <uartRun+0x66>
 8001af8:	2b16      	cmp	r3, #22
 8001afa:	d030      	beq.n	8001b5e <uartRun+0xc6>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", amberTime), 500);
				setTimer8(500);
			}
			break;
		default:
			break;
 8001afc:	e049      	b.n	8001b92 <uartRun+0xfa>
			if (timer8_flag ==1){
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <uartRun+0x110>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d147      	bne.n	8001b96 <uartRun+0xfe>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", redTime), 500);
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <uartRun+0x128>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4928      	ldr	r1, [pc, #160]	; (8001bb0 <uartRun+0x118>)
 8001b0e:	4829      	ldr	r0, [pc, #164]	; (8001bb4 <uartRun+0x11c>)
 8001b10:	f002 fcf0 	bl	80044f4 <siprintf>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b1c:	4925      	ldr	r1, [pc, #148]	; (8001bb4 <uartRun+0x11c>)
 8001b1e:	4826      	ldr	r0, [pc, #152]	; (8001bb8 <uartRun+0x120>)
 8001b20:	f002 f82b 	bl	8003b7a <HAL_UART_Transmit>
				setTimer8(500);
 8001b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b28:	f7ff f9ae 	bl	8000e88 <setTimer8>
			break;
 8001b2c:	e033      	b.n	8001b96 <uartRun+0xfe>
			if (timer8_flag ==1){
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <uartRun+0x110>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d131      	bne.n	8001b9a <uartRun+0x102>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", greenTime), 500);
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <uartRun+0x12c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	491c      	ldr	r1, [pc, #112]	; (8001bb0 <uartRun+0x118>)
 8001b3e:	481d      	ldr	r0, [pc, #116]	; (8001bb4 <uartRun+0x11c>)
 8001b40:	f002 fcd8 	bl	80044f4 <siprintf>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b4c:	4919      	ldr	r1, [pc, #100]	; (8001bb4 <uartRun+0x11c>)
 8001b4e:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <uartRun+0x120>)
 8001b50:	f002 f813 	bl	8003b7a <HAL_UART_Transmit>
				setTimer8(500);
 8001b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b58:	f7ff f996 	bl	8000e88 <setTimer8>
			break;
 8001b5c:	e01d      	b.n	8001b9a <uartRun+0x102>
			if (timer8_flag ==1){
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <uartRun+0x110>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d11b      	bne.n	8001b9e <uartRun+0x106>
				HAL_UART_Transmit (&huart2, (void*)str1, sprintf (str1 , "!7SEG:%d#", amberTime), 500);
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <uartRun+0x130>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <uartRun+0x118>)
 8001b6e:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <uartRun+0x11c>)
 8001b70:	f002 fcc0 	bl	80044f4 <siprintf>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b7c:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <uartRun+0x11c>)
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <uartRun+0x120>)
 8001b80:	f001 fffb 	bl	8003b7a <HAL_UART_Transmit>
				setTimer8(500);
 8001b84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b88:	f7ff f97e 	bl	8000e88 <setTimer8>
			break;
 8001b8c:	e007      	b.n	8001b9e <uartRun+0x106>
		}
	}
 8001b8e:	bf00      	nop
 8001b90:	e006      	b.n	8001ba0 <uartRun+0x108>
			break;
 8001b92:	bf00      	nop
 8001b94:	e004      	b.n	8001ba0 <uartRun+0x108>
			break;
 8001b96:	bf00      	nop
 8001b98:	e002      	b.n	8001ba0 <uartRun+0x108>
			break;
 8001b9a:	bf00      	nop
 8001b9c:	e000      	b.n	8001ba0 <uartRun+0x108>
			break;
 8001b9e:	bf00      	nop
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000104 	.word	0x20000104
 8001ba8:	20000144 	.word	0x20000144
 8001bac:	10624dd3 	.word	0x10624dd3
 8001bb0:	08004d80 	.word	0x08004d80
 8001bb4:	200001e8 	.word	0x200001e8
 8001bb8:	200001f4 	.word	0x200001f4
 8001bbc:	200000fc 	.word	0x200000fc
 8001bc0:	20000050 	.word	0x20000050
 8001bc4:	20000058 	.word	0x20000058
 8001bc8:	20000054 	.word	0x20000054

08001bcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	; (8001c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	; (8001c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf2:	f7ff fba1 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f002 fc51 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfa:	f7fe fdc7 	bl	800078c <main>
  bx lr
 8001bfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001c08:	08004df0 	.word	0x08004df0
  ldr r2, =_sbss
 8001c0c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001c10:	2000024c 	.word	0x2000024c

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x28>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f923 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fa20 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f93b 	bl	8001ede <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f903 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000005c 	.word	0x2000005c
 8001c9c:	20000064 	.word	0x20000064
 8001ca0:	20000060 	.word	0x20000060

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000064 	.word	0x20000064
 8001cc4:	20000238 	.word	0x20000238

08001cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_GetTick+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000238 	.word	0x20000238

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <__NVIC_EnableIRQ+0x34>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff90 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff2d 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff42 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff90 	bl	8001dcc <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5f 	bl	8001d78 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff35 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d008      	beq.n	8001f1e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e020      	b.n	8001f60 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 020e 	bic.w	r2, r2, #14
 8001f2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d005      	beq.n	8001f8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2204      	movs	r2, #4
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e051      	b.n	8002032 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 020e 	bic.w	r2, r2, #14
 8001f9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a22      	ldr	r2, [pc, #136]	; (800203c <HAL_DMA_Abort_IT+0xd0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d029      	beq.n	800200c <HAL_DMA_Abort_IT+0xa0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a20      	ldr	r2, [pc, #128]	; (8002040 <HAL_DMA_Abort_IT+0xd4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d022      	beq.n	8002008 <HAL_DMA_Abort_IT+0x9c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_DMA_Abort_IT+0xd8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d01a      	beq.n	8002002 <HAL_DMA_Abort_IT+0x96>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_DMA_Abort_IT+0xdc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d012      	beq.n	8001ffc <HAL_DMA_Abort_IT+0x90>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_DMA_Abort_IT+0xe0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00a      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x8a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <HAL_DMA_Abort_IT+0xe4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d102      	bne.n	8001ff0 <HAL_DMA_Abort_IT+0x84>
 8001fea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fee:	e00e      	b.n	800200e <HAL_DMA_Abort_IT+0xa2>
 8001ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ff4:	e00b      	b.n	800200e <HAL_DMA_Abort_IT+0xa2>
 8001ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffa:	e008      	b.n	800200e <HAL_DMA_Abort_IT+0xa2>
 8001ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002000:	e005      	b.n	800200e <HAL_DMA_Abort_IT+0xa2>
 8002002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002006:	e002      	b.n	800200e <HAL_DMA_Abort_IT+0xa2>
 8002008:	2310      	movs	r3, #16
 800200a:	e000      	b.n	800200e <HAL_DMA_Abort_IT+0xa2>
 800200c:	2301      	movs	r3, #1
 800200e:	4a11      	ldr	r2, [pc, #68]	; (8002054 <HAL_DMA_Abort_IT+0xe8>)
 8002010:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
    } 
  }
  return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40020008 	.word	0x40020008
 8002040:	4002001c 	.word	0x4002001c
 8002044:	40020030 	.word	0x40020030
 8002048:	40020044 	.word	0x40020044
 800204c:	40020058 	.word	0x40020058
 8002050:	4002006c 	.word	0x4002006c
 8002054:	40020000 	.word	0x40020000

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b08b      	sub	sp, #44	; 0x2c
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e169      	b.n	8002340 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800206c:	2201      	movs	r2, #1
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 8158 	bne.w	800233a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a9a      	ldr	r2, [pc, #616]	; (80022f8 <HAL_GPIO_Init+0x2a0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d05e      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 8002094:	4a98      	ldr	r2, [pc, #608]	; (80022f8 <HAL_GPIO_Init+0x2a0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d875      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 800209a:	4a98      	ldr	r2, [pc, #608]	; (80022fc <HAL_GPIO_Init+0x2a4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d058      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020a0:	4a96      	ldr	r2, [pc, #600]	; (80022fc <HAL_GPIO_Init+0x2a4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d86f      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020a6:	4a96      	ldr	r2, [pc, #600]	; (8002300 <HAL_GPIO_Init+0x2a8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d052      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020ac:	4a94      	ldr	r2, [pc, #592]	; (8002300 <HAL_GPIO_Init+0x2a8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d869      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020b2:	4a94      	ldr	r2, [pc, #592]	; (8002304 <HAL_GPIO_Init+0x2ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04c      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020b8:	4a92      	ldr	r2, [pc, #584]	; (8002304 <HAL_GPIO_Init+0x2ac>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d863      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020be:	4a92      	ldr	r2, [pc, #584]	; (8002308 <HAL_GPIO_Init+0x2b0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d046      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020c4:	4a90      	ldr	r2, [pc, #576]	; (8002308 <HAL_GPIO_Init+0x2b0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d85d      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d82a      	bhi.n	8002124 <HAL_GPIO_Init+0xcc>
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d859      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020d2:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <HAL_GPIO_Init+0x80>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	08002153 	.word	0x08002153
 80020dc:	0800212d 	.word	0x0800212d
 80020e0:	0800213f 	.word	0x0800213f
 80020e4:	08002181 	.word	0x08002181
 80020e8:	08002187 	.word	0x08002187
 80020ec:	08002187 	.word	0x08002187
 80020f0:	08002187 	.word	0x08002187
 80020f4:	08002187 	.word	0x08002187
 80020f8:	08002187 	.word	0x08002187
 80020fc:	08002187 	.word	0x08002187
 8002100:	08002187 	.word	0x08002187
 8002104:	08002187 	.word	0x08002187
 8002108:	08002187 	.word	0x08002187
 800210c:	08002187 	.word	0x08002187
 8002110:	08002187 	.word	0x08002187
 8002114:	08002187 	.word	0x08002187
 8002118:	08002187 	.word	0x08002187
 800211c:	08002135 	.word	0x08002135
 8002120:	08002149 	.word	0x08002149
 8002124:	4a79      	ldr	r2, [pc, #484]	; (800230c <HAL_GPIO_Init+0x2b4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212a:	e02c      	b.n	8002186 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e029      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	3304      	adds	r3, #4
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e024      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	3308      	adds	r3, #8
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e01f      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	330c      	adds	r3, #12
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e01a      	b.n	8002188 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800215a:	2304      	movs	r3, #4
 800215c:	623b      	str	r3, [r7, #32]
          break;
 800215e:	e013      	b.n	8002188 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	611a      	str	r2, [r3, #16]
          break;
 8002172:	e009      	b.n	8002188 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002174:	2308      	movs	r3, #8
 8002176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	615a      	str	r2, [r3, #20]
          break;
 800217e:	e003      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
          break;
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x130>
          break;
 8002186:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d801      	bhi.n	8002192 <HAL_GPIO_Init+0x13a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_Init+0x13e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d802      	bhi.n	80021a4 <HAL_GPIO_Init+0x14c>
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	e002      	b.n	80021aa <HAL_GPIO_Init+0x152>
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3b08      	subs	r3, #8
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	210f      	movs	r1, #15
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	6a39      	ldr	r1, [r7, #32]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80b1 	beq.w	800233a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d8:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a4c      	ldr	r2, [pc, #304]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_GPIO_Init+0x2bc>)
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <HAL_GPIO_Init+0x2c0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_Init+0x1ec>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3f      	ldr	r2, [pc, #252]	; (800231c <HAL_GPIO_Init+0x2c4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_Init+0x1e8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <HAL_GPIO_Init+0x2c8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1e4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <HAL_GPIO_Init+0x2cc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_Init+0x1e0>
 8002234:	2303      	movs	r3, #3
 8002236:	e006      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002238:	2304      	movs	r3, #4
 800223a:	e004      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 800223c:	2302      	movs	r3, #2
 800223e:	e002      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002244:	2300      	movs	r3, #0
 8002246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002248:	f002 0203 	and.w	r2, r2, #3
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	4093      	lsls	r3, r2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002256:	492f      	ldr	r1, [pc, #188]	; (8002314 <HAL_GPIO_Init+0x2bc>)
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	492c      	ldr	r1, [pc, #176]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	4928      	ldr	r1, [pc, #160]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002288:	4013      	ands	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	491e      	ldr	r1, [pc, #120]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4914      	ldr	r1, [pc, #80]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d021      	beq.n	800232c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	490e      	ldr	r1, [pc, #56]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
 80022f4:	e021      	b.n	800233a <HAL_GPIO_Init+0x2e2>
 80022f6:	bf00      	nop
 80022f8:	10320000 	.word	0x10320000
 80022fc:	10310000 	.word	0x10310000
 8002300:	10220000 	.word	0x10220000
 8002304:	10210000 	.word	0x10210000
 8002308:	10120000 	.word	0x10120000
 800230c:	10110000 	.word	0x10110000
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000
 8002318:	40010800 	.word	0x40010800
 800231c:	40010c00 	.word	0x40010c00
 8002320:	40011000 	.word	0x40011000
 8002324:	40011400 	.word	0x40011400
 8002328:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_GPIO_Init+0x304>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	43db      	mvns	r3, r3
 8002334:	4909      	ldr	r1, [pc, #36]	; (800235c <HAL_GPIO_Init+0x304>)
 8002336:	4013      	ands	r3, r2
 8002338:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	3301      	adds	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	f47f ae8e 	bne.w	800206c <HAL_GPIO_Init+0x14>
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	372c      	adds	r7, #44	; 0x2c
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	807b      	strh	r3, [r7, #2]
 800239a:	4613      	mov	r3, r2
 800239c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800239e:	787b      	ldrb	r3, [r7, #1]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023aa:	e003      	b.n	80023b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	041a      	lsls	r2, r3, #16
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	611a      	str	r2, [r3, #16]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d0:	887a      	ldrh	r2, [r7, #2]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	041a      	lsls	r2, r3, #16
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43d9      	mvns	r1, r3
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	400b      	ands	r3, r1
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e26c      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8087 	beq.w	800251e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002410:	4b92      	ldr	r3, [pc, #584]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b04      	cmp	r3, #4
 800241a:	d00c      	beq.n	8002436 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241c:	4b8f      	ldr	r3, [pc, #572]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d112      	bne.n	800244e <HAL_RCC_OscConfig+0x5e>
 8002428:	4b8c      	ldr	r3, [pc, #560]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d10b      	bne.n	800244e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002436:	4b89      	ldr	r3, [pc, #548]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d06c      	beq.n	800251c <HAL_RCC_OscConfig+0x12c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d168      	bne.n	800251c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e246      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x76>
 8002458:	4b80      	ldr	r3, [pc, #512]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a7f      	ldr	r2, [pc, #508]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e02e      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x98>
 800246e:	4b7b      	ldr	r3, [pc, #492]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7a      	ldr	r2, [pc, #488]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b78      	ldr	r3, [pc, #480]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a77      	ldr	r2, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0xbc>
 8002492:	4b72      	ldr	r3, [pc, #456]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a71      	ldr	r2, [pc, #452]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 80024ac:	4b6b      	ldr	r3, [pc, #428]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a67      	ldr	r2, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fbfc 	bl	8001cc8 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fbf8 	bl	8001cc8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1fa      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe4>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fbe8 	bl	8001cc8 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff fbe4 	bl	8001cc8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1e6      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b53      	ldr	r3, [pc, #332]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x10c>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252a:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002536:	4b49      	ldr	r3, [pc, #292]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x18c>
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b43      	ldr	r3, [pc, #268]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x176>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1ba      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4939      	ldr	r1, [pc, #228]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <HAL_RCC_OscConfig+0x270>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff fb9d 	bl	8001cc8 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff fb99 	bl	8001cc8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e19b      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4927      	ldr	r1, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <HAL_RCC_OscConfig+0x270>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fb7c 	bl	8001cc8 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7ff fb78 	bl	8001cc8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e17a      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d03a      	beq.n	8002674 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7ff fb5c 	bl	8001cc8 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff fb58 	bl	8001cc8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e15a      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_RCC_OscConfig+0x26c>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f000 fad8 	bl	8002be8 <RCC_Delay>
 8002638:	e01c      	b.n	8002674 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7ff fb42 	bl	8001cc8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002646:	e00f      	b.n	8002668 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff fb3e 	bl	8001cc8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d908      	bls.n	8002668 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e140      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	42420000 	.word	0x42420000
 8002664:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b9e      	ldr	r3, [pc, #632]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e9      	bne.n	8002648 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a6 	beq.w	80027ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b97      	ldr	r3, [pc, #604]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a93      	ldr	r2, [pc, #588]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b91      	ldr	r3, [pc, #580]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b8e      	ldr	r3, [pc, #568]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a8a      	ldr	r2, [pc, #552]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7ff faff 	bl	8001cc8 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7ff fafb 	bl	8001cc8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	; 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0fd      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b81      	ldr	r3, [pc, #516]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x312>
 80026f4:	4b7b      	ldr	r3, [pc, #492]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a7a      	ldr	r2, [pc, #488]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e02d      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x334>
 800270a:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a75      	ldr	r2, [pc, #468]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	4b73      	ldr	r3, [pc, #460]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a72      	ldr	r2, [pc, #456]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x356>
 800272c:	4b6d      	ldr	r3, [pc, #436]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a6c      	ldr	r2, [pc, #432]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a69      	ldr	r2, [pc, #420]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002746:	4b67      	ldr	r3, [pc, #412]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a66      	ldr	r2, [pc, #408]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7ff faaf 	bl	8001cc8 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff faab 	bl	8001cc8 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0ab      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x37e>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7ff fa99 	bl	8001cc8 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7ff fa95 	bl	8001cc8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e095      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b4c      	ldr	r3, [pc, #304]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b48      	ldr	r3, [pc, #288]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4a47      	ldr	r2, [pc, #284]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8081 	beq.w	80028da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d8:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d061      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d146      	bne.n	800287a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_RCC_OscConfig+0x4fc>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7ff fa69 	bl	8001cc8 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7ff fa65 	bl	8001cc8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e067      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002820:	d108      	bne.n	8002834 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002822:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	492d      	ldr	r1, [pc, #180]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a19      	ldr	r1, [r3, #32]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	430b      	orrs	r3, r1
 8002846:	4927      	ldr	r1, [pc, #156]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_OscConfig+0x4fc>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7ff fa39 	bl	8001cc8 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285a:	f7ff fa35 	bl	8001cc8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e037      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x46a>
 8002878:	e02f      	b.n	80028da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_RCC_OscConfig+0x4fc>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7ff fa22 	bl	8001cc8 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7ff fa1e 	bl	8001cc8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e020      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x498>
 80028a6:	e018      	b.n	80028da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e013      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40007000 	.word	0x40007000
 80028ec:	42420060 	.word	0x42420060

080028f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0d0      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d910      	bls.n	8002934 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 0207 	bic.w	r2, r3, #7
 800291a:	4965      	ldr	r1, [pc, #404]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002956:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800296e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d040      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d115      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e073      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06b      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4936      	ldr	r1, [pc, #216]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7ff f972 	bl	8001cc8 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7ff f96e 	bl	8001cc8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e053      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d210      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4922      	ldr	r1, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e032      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7e:	f000 f821 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	fa22 f303 	lsr.w	r3, r2, r3
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1cc>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f8d0 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08004d9c 	.word	0x08004d9c
 8002abc:	2000005c 	.word	0x2000005c
 8002ac0:	20000060 	.word	0x20000060

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	b490      	push	{r4, r7}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002acc:	1d3c      	adds	r4, r7, #4
 8002ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ad4:	f240 2301 	movw	r3, #513	; 0x201
 8002ad8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x40>
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x46>
 8002b02:	e02d      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b06:	623b      	str	r3, [r7, #32]
      break;
 8002b08:	e02d      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	0c9b      	lsrs	r3, r3, #18
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b16:	4413      	add	r3, r2
 8002b18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b1c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	0c5b      	lsrs	r3, r3, #17
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b36:	4413      	add	r3, r2
 8002b38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b42:	fb02 f203 	mul.w	r2, r2, r3
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	e004      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	623b      	str	r3, [r7, #32]
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b62:	623b      	str	r3, [r7, #32]
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	6a3b      	ldr	r3, [r7, #32]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc90      	pop	{r4, r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	08004d8c 	.word	0x08004d8c
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	007a1200 	.word	0x007a1200
 8002b80:	003d0900 	.word	0x003d0900

08002b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	2000005c 	.word	0x2000005c

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b9c:	f7ff fff2 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08004dac 	.word	0x08004dac

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc4:	f7ff ffde 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	0adb      	lsrs	r3, r3, #11
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4903      	ldr	r1, [pc, #12]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	08004dac 	.word	0x08004dac

08002be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <RCC_Delay+0x34>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <RCC_Delay+0x38>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0a5b      	lsrs	r3, r3, #9
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c04:	bf00      	nop
  }
  while (Delay --);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	60fa      	str	r2, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f9      	bne.n	8002c04 <RCC_Delay+0x1c>
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	2000005c 	.word	0x2000005c
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e041      	b.n	8002cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe fa46 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 fc28 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d001      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e03a      	b.n	8002d52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_TIM_Base_Start_IT+0x98>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_TIM_Base_Start_IT+0x58>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d009      	beq.n	8002d1c <HAL_TIM_Base_Start_IT+0x58>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_TIM_Base_Start_IT+0x58>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d111      	bne.n	8002d40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d010      	beq.n	8002d50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3e:	e007      	b.n	8002d50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800

08002d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e041      	b.n	8002dfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f839 	bl	8002e06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f000 fb86 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_TIM_PWM_Start+0x24>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e022      	b.n	8002e82 <HAL_TIM_PWM_Start+0x6a>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d109      	bne.n	8002e56 <HAL_TIM_PWM_Start+0x3e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	e015      	b.n	8002e82 <HAL_TIM_PWM_Start+0x6a>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d109      	bne.n	8002e70 <HAL_TIM_PWM_Start+0x58>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e008      	b.n	8002e82 <HAL_TIM_PWM_Start+0x6a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e05e      	b.n	8002f48 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start+0x82>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e98:	e013      	b.n	8002ec2 <HAL_TIM_PWM_Start+0xaa>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Start+0x92>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	e00b      	b.n	8002ec2 <HAL_TIM_PWM_Start+0xaa>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start+0xa2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	e003      	b.n	8002ec2 <HAL_TIM_PWM_Start+0xaa>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	6839      	ldr	r1, [r7, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fd74 	bl	80039b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_TIM_PWM_Start+0x138>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d107      	bne.n	8002eea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <HAL_TIM_PWM_Start+0x138>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_TIM_PWM_Start+0xfa>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d009      	beq.n	8002f12 <HAL_TIM_PWM_Start+0xfa>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_TIM_PWM_Start+0x13c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_TIM_PWM_Start+0xfa>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_TIM_PWM_Start+0x140>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d111      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b06      	cmp	r3, #6
 8002f22:	d010      	beq.n	8002f46 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f34:	e007      	b.n	8002f46 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800

08002f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0202 	mvn.w	r2, #2
 8002f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa6f 	bl	8003482 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa62 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fa71 	bl	8003494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d122      	bne.n	800300c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d11b      	bne.n	800300c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0204 	mvn.w	r2, #4
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fa45 	bl	8003482 <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa38 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fa47 	bl	8003494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b08      	cmp	r3, #8
 8003018:	d122      	bne.n	8003060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d11b      	bne.n	8003060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0208 	mvn.w	r2, #8
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2204      	movs	r2, #4
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fa1b 	bl	8003482 <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa0e 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fa1d 	bl	8003494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b10      	cmp	r3, #16
 800306c:	d122      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	d11b      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0210 	mvn.w	r2, #16
 8003084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2208      	movs	r2, #8
 800308a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f9f1 	bl	8003482 <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f9e4 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f9f3 	bl	8003494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0201 	mvn.w	r2, #1
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fd24 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b80      	cmp	r3, #128	; 0x80
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b80      	cmp	r3, #128	; 0x80
 80030fa:	d107      	bne.n	800310c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fce1 	bl	8003ace <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b40      	cmp	r3, #64	; 0x40
 8003118:	d10e      	bne.n	8003138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d107      	bne.n	8003138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9b7 	bl	80034a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b20      	cmp	r3, #32
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b20      	cmp	r3, #32
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0220 	mvn.w	r2, #32
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fcac 	bl	8003abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003182:	2302      	movs	r3, #2
 8003184:	e0ac      	b.n	80032e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	f200 809f 	bhi.w	80032d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031d1 	.word	0x080031d1
 80031a0:	080032d5 	.word	0x080032d5
 80031a4:	080032d5 	.word	0x080032d5
 80031a8:	080032d5 	.word	0x080032d5
 80031ac:	08003211 	.word	0x08003211
 80031b0:	080032d5 	.word	0x080032d5
 80031b4:	080032d5 	.word	0x080032d5
 80031b8:	080032d5 	.word	0x080032d5
 80031bc:	08003253 	.word	0x08003253
 80031c0:	080032d5 	.word	0x080032d5
 80031c4:	080032d5 	.word	0x080032d5
 80031c8:	080032d5 	.word	0x080032d5
 80031cc:	08003293 	.word	0x08003293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f9d0 	bl	800357c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0208 	orr.w	r2, r2, #8
 80031ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0204 	bic.w	r2, r2, #4
 80031fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6999      	ldr	r1, [r3, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	619a      	str	r2, [r3, #24]
      break;
 800320e:	e062      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fa16 	bl	8003648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6999      	ldr	r1, [r3, #24]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	021a      	lsls	r2, r3, #8
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	619a      	str	r2, [r3, #24]
      break;
 8003250:	e041      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fa5f 	bl	800371c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0208 	orr.w	r2, r2, #8
 800326c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0204 	bic.w	r2, r2, #4
 800327c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69d9      	ldr	r1, [r3, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	61da      	str	r2, [r3, #28]
      break;
 8003290:	e021      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 faa9 	bl	80037f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	021a      	lsls	r2, r3, #8
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	61da      	str	r2, [r3, #28]
      break;
 80032d2:	e000      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_TIM_ConfigClockSource+0x18>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e0b3      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x180>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800331e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003326:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003338:	d03e      	beq.n	80033b8 <HAL_TIM_ConfigClockSource+0xd0>
 800333a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333e:	f200 8087 	bhi.w	8003450 <HAL_TIM_ConfigClockSource+0x168>
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	f000 8085 	beq.w	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d87f      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x168>
 8003350:	2b70      	cmp	r3, #112	; 0x70
 8003352:	d01a      	beq.n	800338a <HAL_TIM_ConfigClockSource+0xa2>
 8003354:	2b70      	cmp	r3, #112	; 0x70
 8003356:	d87b      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x168>
 8003358:	2b60      	cmp	r3, #96	; 0x60
 800335a:	d050      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x116>
 800335c:	2b60      	cmp	r3, #96	; 0x60
 800335e:	d877      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x168>
 8003360:	2b50      	cmp	r3, #80	; 0x50
 8003362:	d03c      	beq.n	80033de <HAL_TIM_ConfigClockSource+0xf6>
 8003364:	2b50      	cmp	r3, #80	; 0x50
 8003366:	d873      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x168>
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d058      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x136>
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d86f      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x168>
 8003370:	2b30      	cmp	r3, #48	; 0x30
 8003372:	d064      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x156>
 8003374:	2b30      	cmp	r3, #48	; 0x30
 8003376:	d86b      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x168>
 8003378:	2b20      	cmp	r3, #32
 800337a:	d060      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x156>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d867      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x168>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05c      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x156>
 8003384:	2b10      	cmp	r3, #16
 8003386:	d05a      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003388:	e062      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f000 faee 	bl	800397a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	609a      	str	r2, [r3, #8]
      break;
 80033b6:	e04e      	b.n	8003456 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6899      	ldr	r1, [r3, #8]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f000 fad7 	bl	800397a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033da:	609a      	str	r2, [r3, #8]
      break;
 80033dc:	e03b      	b.n	8003456 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f000 fa4e 	bl	800388c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2150      	movs	r1, #80	; 0x50
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 faa5 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 80033fc:	e02b      	b.n	8003456 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	461a      	mov	r2, r3
 800340c:	f000 fa6c 	bl	80038e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2160      	movs	r1, #96	; 0x60
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fa95 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 800341c:	e01b      	b.n	8003456 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 fa2e 	bl	800388c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2140      	movs	r1, #64	; 0x40
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fa85 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 800343c:	e00b      	b.n	8003456 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f000 fa7c 	bl	8003946 <TIM_ITRx_SetConfig>
        break;
 800344e:	e002      	b.n	8003456 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003454:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a29      	ldr	r2, [pc, #164]	; (8003570 <TIM_Base_SetConfig+0xb8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00b      	beq.n	80034e8 <TIM_Base_SetConfig+0x30>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d007      	beq.n	80034e8 <TIM_Base_SetConfig+0x30>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a26      	ldr	r2, [pc, #152]	; (8003574 <TIM_Base_SetConfig+0xbc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <TIM_Base_SetConfig+0x30>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a25      	ldr	r2, [pc, #148]	; (8003578 <TIM_Base_SetConfig+0xc0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d108      	bne.n	80034fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <TIM_Base_SetConfig+0xb8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00b      	beq.n	800351a <TIM_Base_SetConfig+0x62>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d007      	beq.n	800351a <TIM_Base_SetConfig+0x62>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <TIM_Base_SetConfig+0xbc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_Base_SetConfig+0x62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a18      	ldr	r2, [pc, #96]	; (8003578 <TIM_Base_SetConfig+0xc0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d108      	bne.n	800352c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a07      	ldr	r2, [pc, #28]	; (8003570 <TIM_Base_SetConfig+0xb8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d103      	bne.n	8003560 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	615a      	str	r2, [r3, #20]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800

0800357c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0302 	bic.w	r3, r3, #2
 80035c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <TIM_OC1_SetConfig+0xc8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10c      	bne.n	80035f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0308 	bic.w	r3, r3, #8
 80035de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <TIM_OC1_SetConfig+0xc8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d111      	bne.n	800361e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	621a      	str	r2, [r3, #32]
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00

08003648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f023 0210 	bic.w	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f023 0320 	bic.w	r3, r3, #32
 8003692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <TIM_OC2_SetConfig+0xd0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10d      	bne.n	80036c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a14      	ldr	r2, [pc, #80]	; (8003718 <TIM_OC2_SetConfig+0xd0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d113      	bne.n	80036f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	40012c00 	.word	0x40012c00

0800371c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <TIM_OC3_SetConfig+0xd0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10d      	bne.n	8003796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <TIM_OC3_SetConfig+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d113      	bne.n	80037c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	621a      	str	r2, [r3, #32]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40012c00 	.word	0x40012c00

080037f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800383a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	031b      	lsls	r3, r3, #12
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0f      	ldr	r2, [pc, #60]	; (8003888 <TIM_OC4_SetConfig+0x98>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d109      	bne.n	8003864 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00

0800388c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0201 	bic.w	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f023 030a 	bic.w	r3, r3, #10
 80038c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f023 0210 	bic.w	r2, r3, #16
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003912:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	031b      	lsls	r3, r3, #12
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003924:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	621a      	str	r2, [r3, #32]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	f043 0307 	orr.w	r3, r3, #7
 8003968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800397a:	b480      	push	{r7}
 800397c:	b087      	sub	sp, #28
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003994:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	021a      	lsls	r2, r3, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	431a      	orrs	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	609a      	str	r2, [r3, #8]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2201      	movs	r2, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e046      	b.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d009      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10c      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800

08003abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e03f      	b.n	8003b72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fb52 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	; 0x24
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fc25 	bl	8004374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b08a      	sub	sp, #40	; 0x28
 8003b7e:	af02      	add	r7, sp, #8
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d17c      	bne.n	8003c94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_UART_Transmit+0x2c>
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e075      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_UART_Transmit+0x3e>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e06e      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2221      	movs	r2, #33	; 0x21
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bce:	f7fe f87b 	bl	8001cc8 <HAL_GetTick>
 8003bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	88fa      	ldrh	r2, [r7, #6]
 8003bde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be8:	d108      	bne.n	8003bfc <HAL_UART_Transmit+0x82>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e003      	b.n	8003c04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c0c:	e02a      	b.n	8003c64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fa11 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e036      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	3302      	adds	r3, #2
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	e007      	b.n	8003c56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1cf      	bne.n	8003c0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2140      	movs	r1, #64	; 0x40
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f9e1 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e006      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x52>
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa99 	bl	8004222 <UART_Receive_IT>
      return;
 8003cf0:	e17b      	b.n	8003fea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80b1 	beq.w	8003e5c <HAL_UART_IRQHandler+0x1bc>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <HAL_UART_IRQHandler+0x70>
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80a6 	beq.w	8003e5c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_UART_IRQHandler+0x90>
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_UART_IRQHandler+0xb0>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0202 	orr.w	r2, r3, #2
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_UART_IRQHandler+0xd0>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00f      	beq.n	8003d9a <HAL_UART_IRQHandler+0xfa>
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <HAL_UART_IRQHandler+0xee>
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f043 0208 	orr.w	r2, r3, #8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 811e 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <HAL_UART_IRQHandler+0x11e>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa32 	bl	8004222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <HAL_UART_IRQHandler+0x146>
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d031      	beq.n	8003e4a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f974 	bl	80040d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d023      	beq.n	8003e42 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d013      	beq.n	8003e3a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	4a76      	ldr	r2, [pc, #472]	; (8003ff0 <HAL_UART_IRQHandler+0x350>)
 8003e18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe f8a4 	bl	8001f6c <HAL_DMA_Abort_IT>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e34:	4610      	mov	r0, r2
 8003e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e00e      	b.n	8003e58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8ec 	bl	8004018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	e00a      	b.n	8003e58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f8e8 	bl	8004018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	e006      	b.n	8003e58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f8e4 	bl	8004018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e56:	e0c3      	b.n	8003fe0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	bf00      	nop
    return;
 8003e5a:	e0c1      	b.n	8003fe0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 80a1 	bne.w	8003fa8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 809b 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8095 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d04e      	beq.n	8003f40 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003eac:	8a3b      	ldrh	r3, [r7, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8098 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eb8:	8a3a      	ldrh	r2, [r7, #16]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	f080 8092 	bcs.w	8003fe4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8a3a      	ldrh	r2, [r7, #16]
 8003ec4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d02b      	beq.n	8003f28 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ede:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0210 	bic.w	r2, r2, #16
 8003f1c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd ffe7 	bl	8001ef6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f876 	bl	800402a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f3e:	e051      	b.n	8003fe4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d047      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f58:	8a7b      	ldrh	r3, [r7, #18]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d044      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f6c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0210 	bic.w	r2, r2, #16
 8003f9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f9c:	8a7b      	ldrh	r3, [r7, #18]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f842 	bl	800402a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fa6:	e01f      	b.n	8003fe8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x324>
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8c9 	bl	8004154 <UART_Transmit_IT>
    return;
 8003fc2:	e012      	b.n	8003fea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <HAL_UART_IRQHandler+0x34a>
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f90a 	bl	80041f2 <UART_EndTransmit_IT>
    return;
 8003fde:	e004      	b.n	8003fea <HAL_UART_IRQHandler+0x34a>
    return;
 8003fe0:	bf00      	nop
 8003fe2:	e002      	b.n	8003fea <HAL_UART_IRQHandler+0x34a>
      return;
 8003fe4:	bf00      	nop
 8003fe6:	e000      	b.n	8003fea <HAL_UART_IRQHandler+0x34a>
      return;
 8003fe8:	bf00      	nop
  }
}
 8003fea:	3728      	adds	r7, #40	; 0x28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	0800412d 	.word	0x0800412d

08003ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	e02c      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d028      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x30>
 8004060:	f7fd fe32 	bl	8001cc8 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	429a      	cmp	r2, r3
 800406e:	d21d      	bcs.n	80040ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800407e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e00f      	b.n	80040cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d0c3      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0210 	bic.w	r2, r2, #16
 8004112:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7ff ff66 	bl	8004018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b21      	cmp	r3, #33	; 0x21
 8004166:	d13e      	bne.n	80041e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004170:	d114      	bne.n	800419c <UART_Transmit_IT+0x48>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d110      	bne.n	800419c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800418e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	1c9a      	adds	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]
 800419a:	e008      	b.n	80041ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	1c59      	adds	r1, r3, #1
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6211      	str	r1, [r2, #32]
 80041a6:	781a      	ldrb	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4619      	mov	r1, r3
 80041bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e000      	b.n	80041e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff feee 	bl	8003ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b22      	cmp	r3, #34	; 0x22
 8004234:	f040 8099 	bne.w	800436a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004240:	d117      	bne.n	8004272 <UART_Receive_IT+0x50>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d113      	bne.n	8004272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	b29a      	uxth	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
 8004270:	e026      	b.n	80042c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004284:	d007      	beq.n	8004296 <UART_Receive_IT+0x74>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <UART_Receive_IT+0x82>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e008      	b.n	80042b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	4619      	mov	r1, r3
 80042ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d148      	bne.n	8004366 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0220 	bic.w	r2, r2, #32
 80042e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	2b01      	cmp	r3, #1
 8004312:	d123      	bne.n	800435c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0210 	bic.w	r2, r2, #16
 8004328:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b10      	cmp	r3, #16
 8004336:	d10a      	bne.n	800434e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004352:	4619      	mov	r1, r3
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff fe68 	bl	800402a <HAL_UARTEx_RxEventCallback>
 800435a:	e002      	b.n	8004362 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff fe52 	bl	8004006 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e002      	b.n	800436c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043ae:	f023 030c 	bic.w	r3, r3, #12
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <UART_SetConfig+0x114>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d103      	bne.n	80043e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fe fbf0 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	e002      	b.n	80043ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7fe fbd8 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 80043e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009a      	lsls	r2, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	4a22      	ldr	r2, [pc, #136]	; (800448c <UART_SetConfig+0x118>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	0119      	lsls	r1, r3, #4
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <UART_SetConfig+0x118>)
 8004422:	fba3 0302 	umull	r0, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2064      	movs	r0, #100	; 0x64
 800442a:	fb00 f303 	mul.w	r3, r0, r3
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	3332      	adds	r3, #50	; 0x32
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <UART_SetConfig+0x118>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004440:	4419      	add	r1, r3
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009a      	lsls	r2, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	fbb2 f2f3 	udiv	r2, r2, r3
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <UART_SetConfig+0x118>)
 800445a:	fba3 0302 	umull	r0, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2064      	movs	r0, #100	; 0x64
 8004462:	fb00 f303 	mul.w	r3, r0, r3
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	3332      	adds	r3, #50	; 0x32
 800446c:	4a07      	ldr	r2, [pc, #28]	; (800448c <UART_SetConfig+0x118>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	f003 020f 	and.w	r2, r3, #15
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	440a      	add	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40013800 	.word	0x40013800
 800448c:	51eb851f 	.word	0x51eb851f

08004490 <__errno>:
 8004490:	4b01      	ldr	r3, [pc, #4]	; (8004498 <__errno+0x8>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000068 	.word	0x20000068

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	2600      	movs	r6, #0
 80044a0:	4d0c      	ldr	r5, [pc, #48]	; (80044d4 <__libc_init_array+0x38>)
 80044a2:	4c0d      	ldr	r4, [pc, #52]	; (80044d8 <__libc_init_array+0x3c>)
 80044a4:	1b64      	subs	r4, r4, r5
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	f000 fc5c 	bl	8004d68 <_init>
 80044b0:	2600      	movs	r6, #0
 80044b2:	4d0a      	ldr	r5, [pc, #40]	; (80044dc <__libc_init_array+0x40>)
 80044b4:	4c0a      	ldr	r4, [pc, #40]	; (80044e0 <__libc_init_array+0x44>)
 80044b6:	1b64      	subs	r4, r4, r5
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	08004de8 	.word	0x08004de8
 80044d8:	08004de8 	.word	0x08004de8
 80044dc:	08004de8 	.word	0x08004de8
 80044e0:	08004dec 	.word	0x08004dec

080044e4 <memset>:
 80044e4:	4603      	mov	r3, r0
 80044e6:	4402      	add	r2, r0
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d100      	bne.n	80044ee <memset+0xa>
 80044ec:	4770      	bx	lr
 80044ee:	f803 1b01 	strb.w	r1, [r3], #1
 80044f2:	e7f9      	b.n	80044e8 <memset+0x4>

080044f4 <siprintf>:
 80044f4:	b40e      	push	{r1, r2, r3}
 80044f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044fa:	b500      	push	{lr}
 80044fc:	b09c      	sub	sp, #112	; 0x70
 80044fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	9006      	str	r0, [sp, #24]
 8004504:	9107      	str	r1, [sp, #28]
 8004506:	9104      	str	r1, [sp, #16]
 8004508:	4808      	ldr	r0, [pc, #32]	; (800452c <siprintf+0x38>)
 800450a:	4909      	ldr	r1, [pc, #36]	; (8004530 <siprintf+0x3c>)
 800450c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004510:	9105      	str	r1, [sp, #20]
 8004512:	6800      	ldr	r0, [r0, #0]
 8004514:	a902      	add	r1, sp, #8
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	f000 f868 	bl	80045ec <_svfiprintf_r>
 800451c:	2200      	movs	r2, #0
 800451e:	9b02      	ldr	r3, [sp, #8]
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	b01c      	add	sp, #112	; 0x70
 8004524:	f85d eb04 	ldr.w	lr, [sp], #4
 8004528:	b003      	add	sp, #12
 800452a:	4770      	bx	lr
 800452c:	20000068 	.word	0x20000068
 8004530:	ffff0208 	.word	0xffff0208

08004534 <__ssputs_r>:
 8004534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	688e      	ldr	r6, [r1, #8]
 800453a:	4682      	mov	sl, r0
 800453c:	429e      	cmp	r6, r3
 800453e:	460c      	mov	r4, r1
 8004540:	4690      	mov	r8, r2
 8004542:	461f      	mov	r7, r3
 8004544:	d838      	bhi.n	80045b8 <__ssputs_r+0x84>
 8004546:	898a      	ldrh	r2, [r1, #12]
 8004548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800454c:	d032      	beq.n	80045b4 <__ssputs_r+0x80>
 800454e:	6825      	ldr	r5, [r4, #0]
 8004550:	6909      	ldr	r1, [r1, #16]
 8004552:	3301      	adds	r3, #1
 8004554:	eba5 0901 	sub.w	r9, r5, r1
 8004558:	6965      	ldr	r5, [r4, #20]
 800455a:	444b      	add	r3, r9
 800455c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004564:	106d      	asrs	r5, r5, #1
 8004566:	429d      	cmp	r5, r3
 8004568:	bf38      	it	cc
 800456a:	461d      	movcc	r5, r3
 800456c:	0553      	lsls	r3, r2, #21
 800456e:	d531      	bpl.n	80045d4 <__ssputs_r+0xa0>
 8004570:	4629      	mov	r1, r5
 8004572:	f000 fb53 	bl	8004c1c <_malloc_r>
 8004576:	4606      	mov	r6, r0
 8004578:	b950      	cbnz	r0, 8004590 <__ssputs_r+0x5c>
 800457a:	230c      	movs	r3, #12
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	f8ca 3000 	str.w	r3, [sl]
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004590:	464a      	mov	r2, r9
 8004592:	6921      	ldr	r1, [r4, #16]
 8004594:	f000 face 	bl	8004b34 <memcpy>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	6126      	str	r6, [r4, #16]
 80045a6:	444e      	add	r6, r9
 80045a8:	6026      	str	r6, [r4, #0]
 80045aa:	463e      	mov	r6, r7
 80045ac:	6165      	str	r5, [r4, #20]
 80045ae:	eba5 0509 	sub.w	r5, r5, r9
 80045b2:	60a5      	str	r5, [r4, #8]
 80045b4:	42be      	cmp	r6, r7
 80045b6:	d900      	bls.n	80045ba <__ssputs_r+0x86>
 80045b8:	463e      	mov	r6, r7
 80045ba:	4632      	mov	r2, r6
 80045bc:	4641      	mov	r1, r8
 80045be:	6820      	ldr	r0, [r4, #0]
 80045c0:	f000 fac6 	bl	8004b50 <memmove>
 80045c4:	68a3      	ldr	r3, [r4, #8]
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	1b9b      	subs	r3, r3, r6
 80045ca:	4432      	add	r2, r6
 80045cc:	2000      	movs	r0, #0
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	6022      	str	r2, [r4, #0]
 80045d2:	e7db      	b.n	800458c <__ssputs_r+0x58>
 80045d4:	462a      	mov	r2, r5
 80045d6:	f000 fb7b 	bl	8004cd0 <_realloc_r>
 80045da:	4606      	mov	r6, r0
 80045dc:	2800      	cmp	r0, #0
 80045de:	d1e1      	bne.n	80045a4 <__ssputs_r+0x70>
 80045e0:	4650      	mov	r0, sl
 80045e2:	6921      	ldr	r1, [r4, #16]
 80045e4:	f000 face 	bl	8004b84 <_free_r>
 80045e8:	e7c7      	b.n	800457a <__ssputs_r+0x46>
	...

080045ec <_svfiprintf_r>:
 80045ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f0:	4698      	mov	r8, r3
 80045f2:	898b      	ldrh	r3, [r1, #12]
 80045f4:	4607      	mov	r7, r0
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	460d      	mov	r5, r1
 80045fa:	4614      	mov	r4, r2
 80045fc:	b09d      	sub	sp, #116	; 0x74
 80045fe:	d50e      	bpl.n	800461e <_svfiprintf_r+0x32>
 8004600:	690b      	ldr	r3, [r1, #16]
 8004602:	b963      	cbnz	r3, 800461e <_svfiprintf_r+0x32>
 8004604:	2140      	movs	r1, #64	; 0x40
 8004606:	f000 fb09 	bl	8004c1c <_malloc_r>
 800460a:	6028      	str	r0, [r5, #0]
 800460c:	6128      	str	r0, [r5, #16]
 800460e:	b920      	cbnz	r0, 800461a <_svfiprintf_r+0x2e>
 8004610:	230c      	movs	r3, #12
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	e0d1      	b.n	80047be <_svfiprintf_r+0x1d2>
 800461a:	2340      	movs	r3, #64	; 0x40
 800461c:	616b      	str	r3, [r5, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	9309      	str	r3, [sp, #36]	; 0x24
 8004622:	2320      	movs	r3, #32
 8004624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004628:	2330      	movs	r3, #48	; 0x30
 800462a:	f04f 0901 	mov.w	r9, #1
 800462e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004632:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047d8 <_svfiprintf_r+0x1ec>
 8004636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800463a:	4623      	mov	r3, r4
 800463c:	469a      	mov	sl, r3
 800463e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004642:	b10a      	cbz	r2, 8004648 <_svfiprintf_r+0x5c>
 8004644:	2a25      	cmp	r2, #37	; 0x25
 8004646:	d1f9      	bne.n	800463c <_svfiprintf_r+0x50>
 8004648:	ebba 0b04 	subs.w	fp, sl, r4
 800464c:	d00b      	beq.n	8004666 <_svfiprintf_r+0x7a>
 800464e:	465b      	mov	r3, fp
 8004650:	4622      	mov	r2, r4
 8004652:	4629      	mov	r1, r5
 8004654:	4638      	mov	r0, r7
 8004656:	f7ff ff6d 	bl	8004534 <__ssputs_r>
 800465a:	3001      	adds	r0, #1
 800465c:	f000 80aa 	beq.w	80047b4 <_svfiprintf_r+0x1c8>
 8004660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004662:	445a      	add	r2, fp
 8004664:	9209      	str	r2, [sp, #36]	; 0x24
 8004666:	f89a 3000 	ldrb.w	r3, [sl]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80a2 	beq.w	80047b4 <_svfiprintf_r+0x1c8>
 8004670:	2300      	movs	r3, #0
 8004672:	f04f 32ff 	mov.w	r2, #4294967295
 8004676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800467a:	f10a 0a01 	add.w	sl, sl, #1
 800467e:	9304      	str	r3, [sp, #16]
 8004680:	9307      	str	r3, [sp, #28]
 8004682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004686:	931a      	str	r3, [sp, #104]	; 0x68
 8004688:	4654      	mov	r4, sl
 800468a:	2205      	movs	r2, #5
 800468c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004690:	4851      	ldr	r0, [pc, #324]	; (80047d8 <_svfiprintf_r+0x1ec>)
 8004692:	f000 fa41 	bl	8004b18 <memchr>
 8004696:	9a04      	ldr	r2, [sp, #16]
 8004698:	b9d8      	cbnz	r0, 80046d2 <_svfiprintf_r+0xe6>
 800469a:	06d0      	lsls	r0, r2, #27
 800469c:	bf44      	itt	mi
 800469e:	2320      	movmi	r3, #32
 80046a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046a4:	0711      	lsls	r1, r2, #28
 80046a6:	bf44      	itt	mi
 80046a8:	232b      	movmi	r3, #43	; 0x2b
 80046aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ae:	f89a 3000 	ldrb.w	r3, [sl]
 80046b2:	2b2a      	cmp	r3, #42	; 0x2a
 80046b4:	d015      	beq.n	80046e2 <_svfiprintf_r+0xf6>
 80046b6:	4654      	mov	r4, sl
 80046b8:	2000      	movs	r0, #0
 80046ba:	f04f 0c0a 	mov.w	ip, #10
 80046be:	9a07      	ldr	r2, [sp, #28]
 80046c0:	4621      	mov	r1, r4
 80046c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046c6:	3b30      	subs	r3, #48	; 0x30
 80046c8:	2b09      	cmp	r3, #9
 80046ca:	d94e      	bls.n	800476a <_svfiprintf_r+0x17e>
 80046cc:	b1b0      	cbz	r0, 80046fc <_svfiprintf_r+0x110>
 80046ce:	9207      	str	r2, [sp, #28]
 80046d0:	e014      	b.n	80046fc <_svfiprintf_r+0x110>
 80046d2:	eba0 0308 	sub.w	r3, r0, r8
 80046d6:	fa09 f303 	lsl.w	r3, r9, r3
 80046da:	4313      	orrs	r3, r2
 80046dc:	46a2      	mov	sl, r4
 80046de:	9304      	str	r3, [sp, #16]
 80046e0:	e7d2      	b.n	8004688 <_svfiprintf_r+0x9c>
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	1d19      	adds	r1, r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	9103      	str	r1, [sp, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bfbb      	ittet	lt
 80046ee:	425b      	neglt	r3, r3
 80046f0:	f042 0202 	orrlt.w	r2, r2, #2
 80046f4:	9307      	strge	r3, [sp, #28]
 80046f6:	9307      	strlt	r3, [sp, #28]
 80046f8:	bfb8      	it	lt
 80046fa:	9204      	strlt	r2, [sp, #16]
 80046fc:	7823      	ldrb	r3, [r4, #0]
 80046fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004700:	d10c      	bne.n	800471c <_svfiprintf_r+0x130>
 8004702:	7863      	ldrb	r3, [r4, #1]
 8004704:	2b2a      	cmp	r3, #42	; 0x2a
 8004706:	d135      	bne.n	8004774 <_svfiprintf_r+0x188>
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	3402      	adds	r4, #2
 800470c:	1d1a      	adds	r2, r3, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	9203      	str	r2, [sp, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	bfb8      	it	lt
 8004716:	f04f 33ff 	movlt.w	r3, #4294967295
 800471a:	9305      	str	r3, [sp, #20]
 800471c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047e8 <_svfiprintf_r+0x1fc>
 8004720:	2203      	movs	r2, #3
 8004722:	4650      	mov	r0, sl
 8004724:	7821      	ldrb	r1, [r4, #0]
 8004726:	f000 f9f7 	bl	8004b18 <memchr>
 800472a:	b140      	cbz	r0, 800473e <_svfiprintf_r+0x152>
 800472c:	2340      	movs	r3, #64	; 0x40
 800472e:	eba0 000a 	sub.w	r0, r0, sl
 8004732:	fa03 f000 	lsl.w	r0, r3, r0
 8004736:	9b04      	ldr	r3, [sp, #16]
 8004738:	3401      	adds	r4, #1
 800473a:	4303      	orrs	r3, r0
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004742:	2206      	movs	r2, #6
 8004744:	4825      	ldr	r0, [pc, #148]	; (80047dc <_svfiprintf_r+0x1f0>)
 8004746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800474a:	f000 f9e5 	bl	8004b18 <memchr>
 800474e:	2800      	cmp	r0, #0
 8004750:	d038      	beq.n	80047c4 <_svfiprintf_r+0x1d8>
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <_svfiprintf_r+0x1f4>)
 8004754:	bb1b      	cbnz	r3, 800479e <_svfiprintf_r+0x1b2>
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	3307      	adds	r3, #7
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	3308      	adds	r3, #8
 8004760:	9303      	str	r3, [sp, #12]
 8004762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004764:	4433      	add	r3, r6
 8004766:	9309      	str	r3, [sp, #36]	; 0x24
 8004768:	e767      	b.n	800463a <_svfiprintf_r+0x4e>
 800476a:	460c      	mov	r4, r1
 800476c:	2001      	movs	r0, #1
 800476e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004772:	e7a5      	b.n	80046c0 <_svfiprintf_r+0xd4>
 8004774:	2300      	movs	r3, #0
 8004776:	f04f 0c0a 	mov.w	ip, #10
 800477a:	4619      	mov	r1, r3
 800477c:	3401      	adds	r4, #1
 800477e:	9305      	str	r3, [sp, #20]
 8004780:	4620      	mov	r0, r4
 8004782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004786:	3a30      	subs	r2, #48	; 0x30
 8004788:	2a09      	cmp	r2, #9
 800478a:	d903      	bls.n	8004794 <_svfiprintf_r+0x1a8>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0c5      	beq.n	800471c <_svfiprintf_r+0x130>
 8004790:	9105      	str	r1, [sp, #20]
 8004792:	e7c3      	b.n	800471c <_svfiprintf_r+0x130>
 8004794:	4604      	mov	r4, r0
 8004796:	2301      	movs	r3, #1
 8004798:	fb0c 2101 	mla	r1, ip, r1, r2
 800479c:	e7f0      	b.n	8004780 <_svfiprintf_r+0x194>
 800479e:	ab03      	add	r3, sp, #12
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	462a      	mov	r2, r5
 80047a4:	4638      	mov	r0, r7
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <_svfiprintf_r+0x1f8>)
 80047a8:	a904      	add	r1, sp, #16
 80047aa:	f3af 8000 	nop.w
 80047ae:	1c42      	adds	r2, r0, #1
 80047b0:	4606      	mov	r6, r0
 80047b2:	d1d6      	bne.n	8004762 <_svfiprintf_r+0x176>
 80047b4:	89ab      	ldrh	r3, [r5, #12]
 80047b6:	065b      	lsls	r3, r3, #25
 80047b8:	f53f af2c 	bmi.w	8004614 <_svfiprintf_r+0x28>
 80047bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047be:	b01d      	add	sp, #116	; 0x74
 80047c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c4:	ab03      	add	r3, sp, #12
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	462a      	mov	r2, r5
 80047ca:	4638      	mov	r0, r7
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <_svfiprintf_r+0x1f8>)
 80047ce:	a904      	add	r1, sp, #16
 80047d0:	f000 f87c 	bl	80048cc <_printf_i>
 80047d4:	e7eb      	b.n	80047ae <_svfiprintf_r+0x1c2>
 80047d6:	bf00      	nop
 80047d8:	08004db4 	.word	0x08004db4
 80047dc:	08004dbe 	.word	0x08004dbe
 80047e0:	00000000 	.word	0x00000000
 80047e4:	08004535 	.word	0x08004535
 80047e8:	08004dba 	.word	0x08004dba

080047ec <_printf_common>:
 80047ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f0:	4616      	mov	r6, r2
 80047f2:	4699      	mov	r9, r3
 80047f4:	688a      	ldr	r2, [r1, #8]
 80047f6:	690b      	ldr	r3, [r1, #16]
 80047f8:	4607      	mov	r7, r0
 80047fa:	4293      	cmp	r3, r2
 80047fc:	bfb8      	it	lt
 80047fe:	4613      	movlt	r3, r2
 8004800:	6033      	str	r3, [r6, #0]
 8004802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004806:	460c      	mov	r4, r1
 8004808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800480c:	b10a      	cbz	r2, 8004812 <_printf_common+0x26>
 800480e:	3301      	adds	r3, #1
 8004810:	6033      	str	r3, [r6, #0]
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	0699      	lsls	r1, r3, #26
 8004816:	bf42      	ittt	mi
 8004818:	6833      	ldrmi	r3, [r6, #0]
 800481a:	3302      	addmi	r3, #2
 800481c:	6033      	strmi	r3, [r6, #0]
 800481e:	6825      	ldr	r5, [r4, #0]
 8004820:	f015 0506 	ands.w	r5, r5, #6
 8004824:	d106      	bne.n	8004834 <_printf_common+0x48>
 8004826:	f104 0a19 	add.w	sl, r4, #25
 800482a:	68e3      	ldr	r3, [r4, #12]
 800482c:	6832      	ldr	r2, [r6, #0]
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	42ab      	cmp	r3, r5
 8004832:	dc28      	bgt.n	8004886 <_printf_common+0x9a>
 8004834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004838:	1e13      	subs	r3, r2, #0
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	bf18      	it	ne
 800483e:	2301      	movne	r3, #1
 8004840:	0692      	lsls	r2, r2, #26
 8004842:	d42d      	bmi.n	80048a0 <_printf_common+0xb4>
 8004844:	4649      	mov	r1, r9
 8004846:	4638      	mov	r0, r7
 8004848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800484c:	47c0      	blx	r8
 800484e:	3001      	adds	r0, #1
 8004850:	d020      	beq.n	8004894 <_printf_common+0xa8>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	68e5      	ldr	r5, [r4, #12]
 8004856:	f003 0306 	and.w	r3, r3, #6
 800485a:	2b04      	cmp	r3, #4
 800485c:	bf18      	it	ne
 800485e:	2500      	movne	r5, #0
 8004860:	6832      	ldr	r2, [r6, #0]
 8004862:	f04f 0600 	mov.w	r6, #0
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	bf08      	it	eq
 800486a:	1aad      	subeq	r5, r5, r2
 800486c:	6922      	ldr	r2, [r4, #16]
 800486e:	bf08      	it	eq
 8004870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004874:	4293      	cmp	r3, r2
 8004876:	bfc4      	itt	gt
 8004878:	1a9b      	subgt	r3, r3, r2
 800487a:	18ed      	addgt	r5, r5, r3
 800487c:	341a      	adds	r4, #26
 800487e:	42b5      	cmp	r5, r6
 8004880:	d11a      	bne.n	80048b8 <_printf_common+0xcc>
 8004882:	2000      	movs	r0, #0
 8004884:	e008      	b.n	8004898 <_printf_common+0xac>
 8004886:	2301      	movs	r3, #1
 8004888:	4652      	mov	r2, sl
 800488a:	4649      	mov	r1, r9
 800488c:	4638      	mov	r0, r7
 800488e:	47c0      	blx	r8
 8004890:	3001      	adds	r0, #1
 8004892:	d103      	bne.n	800489c <_printf_common+0xb0>
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489c:	3501      	adds	r5, #1
 800489e:	e7c4      	b.n	800482a <_printf_common+0x3e>
 80048a0:	2030      	movs	r0, #48	; 0x30
 80048a2:	18e1      	adds	r1, r4, r3
 80048a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ae:	4422      	add	r2, r4
 80048b0:	3302      	adds	r3, #2
 80048b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b6:	e7c5      	b.n	8004844 <_printf_common+0x58>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4622      	mov	r2, r4
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	47c0      	blx	r8
 80048c2:	3001      	adds	r0, #1
 80048c4:	d0e6      	beq.n	8004894 <_printf_common+0xa8>
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7d9      	b.n	800487e <_printf_common+0x92>
	...

080048cc <_printf_i>:
 80048cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	460c      	mov	r4, r1
 80048d2:	7e27      	ldrb	r7, [r4, #24]
 80048d4:	4691      	mov	r9, r2
 80048d6:	2f78      	cmp	r7, #120	; 0x78
 80048d8:	4680      	mov	r8, r0
 80048da:	469a      	mov	sl, r3
 80048dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e2:	d807      	bhi.n	80048f4 <_printf_i+0x28>
 80048e4:	2f62      	cmp	r7, #98	; 0x62
 80048e6:	d80a      	bhi.n	80048fe <_printf_i+0x32>
 80048e8:	2f00      	cmp	r7, #0
 80048ea:	f000 80d9 	beq.w	8004aa0 <_printf_i+0x1d4>
 80048ee:	2f58      	cmp	r7, #88	; 0x58
 80048f0:	f000 80a4 	beq.w	8004a3c <_printf_i+0x170>
 80048f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048fc:	e03a      	b.n	8004974 <_printf_i+0xa8>
 80048fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004902:	2b15      	cmp	r3, #21
 8004904:	d8f6      	bhi.n	80048f4 <_printf_i+0x28>
 8004906:	a001      	add	r0, pc, #4	; (adr r0, 800490c <_printf_i+0x40>)
 8004908:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800490c:	08004965 	.word	0x08004965
 8004910:	08004979 	.word	0x08004979
 8004914:	080048f5 	.word	0x080048f5
 8004918:	080048f5 	.word	0x080048f5
 800491c:	080048f5 	.word	0x080048f5
 8004920:	080048f5 	.word	0x080048f5
 8004924:	08004979 	.word	0x08004979
 8004928:	080048f5 	.word	0x080048f5
 800492c:	080048f5 	.word	0x080048f5
 8004930:	080048f5 	.word	0x080048f5
 8004934:	080048f5 	.word	0x080048f5
 8004938:	08004a87 	.word	0x08004a87
 800493c:	080049a9 	.word	0x080049a9
 8004940:	08004a69 	.word	0x08004a69
 8004944:	080048f5 	.word	0x080048f5
 8004948:	080048f5 	.word	0x080048f5
 800494c:	08004aa9 	.word	0x08004aa9
 8004950:	080048f5 	.word	0x080048f5
 8004954:	080049a9 	.word	0x080049a9
 8004958:	080048f5 	.word	0x080048f5
 800495c:	080048f5 	.word	0x080048f5
 8004960:	08004a71 	.word	0x08004a71
 8004964:	680b      	ldr	r3, [r1, #0]
 8004966:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	600a      	str	r2, [r1, #0]
 8004970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004974:	2301      	movs	r3, #1
 8004976:	e0a4      	b.n	8004ac2 <_printf_i+0x1f6>
 8004978:	6825      	ldr	r5, [r4, #0]
 800497a:	6808      	ldr	r0, [r1, #0]
 800497c:	062e      	lsls	r6, r5, #24
 800497e:	f100 0304 	add.w	r3, r0, #4
 8004982:	d50a      	bpl.n	800499a <_printf_i+0xce>
 8004984:	6805      	ldr	r5, [r0, #0]
 8004986:	600b      	str	r3, [r1, #0]
 8004988:	2d00      	cmp	r5, #0
 800498a:	da03      	bge.n	8004994 <_printf_i+0xc8>
 800498c:	232d      	movs	r3, #45	; 0x2d
 800498e:	426d      	negs	r5, r5
 8004990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004994:	230a      	movs	r3, #10
 8004996:	485e      	ldr	r0, [pc, #376]	; (8004b10 <_printf_i+0x244>)
 8004998:	e019      	b.n	80049ce <_printf_i+0x102>
 800499a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800499e:	6805      	ldr	r5, [r0, #0]
 80049a0:	600b      	str	r3, [r1, #0]
 80049a2:	bf18      	it	ne
 80049a4:	b22d      	sxthne	r5, r5
 80049a6:	e7ef      	b.n	8004988 <_printf_i+0xbc>
 80049a8:	680b      	ldr	r3, [r1, #0]
 80049aa:	6825      	ldr	r5, [r4, #0]
 80049ac:	1d18      	adds	r0, r3, #4
 80049ae:	6008      	str	r0, [r1, #0]
 80049b0:	0628      	lsls	r0, r5, #24
 80049b2:	d501      	bpl.n	80049b8 <_printf_i+0xec>
 80049b4:	681d      	ldr	r5, [r3, #0]
 80049b6:	e002      	b.n	80049be <_printf_i+0xf2>
 80049b8:	0669      	lsls	r1, r5, #25
 80049ba:	d5fb      	bpl.n	80049b4 <_printf_i+0xe8>
 80049bc:	881d      	ldrh	r5, [r3, #0]
 80049be:	2f6f      	cmp	r7, #111	; 0x6f
 80049c0:	bf0c      	ite	eq
 80049c2:	2308      	moveq	r3, #8
 80049c4:	230a      	movne	r3, #10
 80049c6:	4852      	ldr	r0, [pc, #328]	; (8004b10 <_printf_i+0x244>)
 80049c8:	2100      	movs	r1, #0
 80049ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ce:	6866      	ldr	r6, [r4, #4]
 80049d0:	2e00      	cmp	r6, #0
 80049d2:	bfa8      	it	ge
 80049d4:	6821      	ldrge	r1, [r4, #0]
 80049d6:	60a6      	str	r6, [r4, #8]
 80049d8:	bfa4      	itt	ge
 80049da:	f021 0104 	bicge.w	r1, r1, #4
 80049de:	6021      	strge	r1, [r4, #0]
 80049e0:	b90d      	cbnz	r5, 80049e6 <_printf_i+0x11a>
 80049e2:	2e00      	cmp	r6, #0
 80049e4:	d04d      	beq.n	8004a82 <_printf_i+0x1b6>
 80049e6:	4616      	mov	r6, r2
 80049e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80049ec:	fb03 5711 	mls	r7, r3, r1, r5
 80049f0:	5dc7      	ldrb	r7, [r0, r7]
 80049f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049f6:	462f      	mov	r7, r5
 80049f8:	42bb      	cmp	r3, r7
 80049fa:	460d      	mov	r5, r1
 80049fc:	d9f4      	bls.n	80049e8 <_printf_i+0x11c>
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d10b      	bne.n	8004a1a <_printf_i+0x14e>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	07df      	lsls	r7, r3, #31
 8004a06:	d508      	bpl.n	8004a1a <_printf_i+0x14e>
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	6861      	ldr	r1, [r4, #4]
 8004a0c:	4299      	cmp	r1, r3
 8004a0e:	bfde      	ittt	le
 8004a10:	2330      	movle	r3, #48	; 0x30
 8004a12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a1a:	1b92      	subs	r2, r2, r6
 8004a1c:	6122      	str	r2, [r4, #16]
 8004a1e:	464b      	mov	r3, r9
 8004a20:	4621      	mov	r1, r4
 8004a22:	4640      	mov	r0, r8
 8004a24:	f8cd a000 	str.w	sl, [sp]
 8004a28:	aa03      	add	r2, sp, #12
 8004a2a:	f7ff fedf 	bl	80047ec <_printf_common>
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d14c      	bne.n	8004acc <_printf_i+0x200>
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	b004      	add	sp, #16
 8004a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3c:	4834      	ldr	r0, [pc, #208]	; (8004b10 <_printf_i+0x244>)
 8004a3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a42:	680e      	ldr	r6, [r1, #0]
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a4a:	061f      	lsls	r7, r3, #24
 8004a4c:	600e      	str	r6, [r1, #0]
 8004a4e:	d514      	bpl.n	8004a7a <_printf_i+0x1ae>
 8004a50:	07d9      	lsls	r1, r3, #31
 8004a52:	bf44      	itt	mi
 8004a54:	f043 0320 	orrmi.w	r3, r3, #32
 8004a58:	6023      	strmi	r3, [r4, #0]
 8004a5a:	b91d      	cbnz	r5, 8004a64 <_printf_i+0x198>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	f023 0320 	bic.w	r3, r3, #32
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	2310      	movs	r3, #16
 8004a66:	e7af      	b.n	80049c8 <_printf_i+0xfc>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f043 0320 	orr.w	r3, r3, #32
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	2378      	movs	r3, #120	; 0x78
 8004a72:	4828      	ldr	r0, [pc, #160]	; (8004b14 <_printf_i+0x248>)
 8004a74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a78:	e7e3      	b.n	8004a42 <_printf_i+0x176>
 8004a7a:	065e      	lsls	r6, r3, #25
 8004a7c:	bf48      	it	mi
 8004a7e:	b2ad      	uxthmi	r5, r5
 8004a80:	e7e6      	b.n	8004a50 <_printf_i+0x184>
 8004a82:	4616      	mov	r6, r2
 8004a84:	e7bb      	b.n	80049fe <_printf_i+0x132>
 8004a86:	680b      	ldr	r3, [r1, #0]
 8004a88:	6826      	ldr	r6, [r4, #0]
 8004a8a:	1d1d      	adds	r5, r3, #4
 8004a8c:	6960      	ldr	r0, [r4, #20]
 8004a8e:	600d      	str	r5, [r1, #0]
 8004a90:	0635      	lsls	r5, r6, #24
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	d501      	bpl.n	8004a9a <_printf_i+0x1ce>
 8004a96:	6018      	str	r0, [r3, #0]
 8004a98:	e002      	b.n	8004aa0 <_printf_i+0x1d4>
 8004a9a:	0671      	lsls	r1, r6, #25
 8004a9c:	d5fb      	bpl.n	8004a96 <_printf_i+0x1ca>
 8004a9e:	8018      	strh	r0, [r3, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	e7ba      	b.n	8004a1e <_printf_i+0x152>
 8004aa8:	680b      	ldr	r3, [r1, #0]
 8004aaa:	1d1a      	adds	r2, r3, #4
 8004aac:	600a      	str	r2, [r1, #0]
 8004aae:	681e      	ldr	r6, [r3, #0]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	6862      	ldr	r2, [r4, #4]
 8004ab6:	f000 f82f 	bl	8004b18 <memchr>
 8004aba:	b108      	cbz	r0, 8004ac0 <_printf_i+0x1f4>
 8004abc:	1b80      	subs	r0, r0, r6
 8004abe:	6060      	str	r0, [r4, #4]
 8004ac0:	6863      	ldr	r3, [r4, #4]
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aca:	e7a8      	b.n	8004a1e <_printf_i+0x152>
 8004acc:	4632      	mov	r2, r6
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	47d0      	blx	sl
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d0ab      	beq.n	8004a32 <_printf_i+0x166>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	079b      	lsls	r3, r3, #30
 8004ade:	d413      	bmi.n	8004b08 <_printf_i+0x23c>
 8004ae0:	68e0      	ldr	r0, [r4, #12]
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	4298      	cmp	r0, r3
 8004ae6:	bfb8      	it	lt
 8004ae8:	4618      	movlt	r0, r3
 8004aea:	e7a4      	b.n	8004a36 <_printf_i+0x16a>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4632      	mov	r2, r6
 8004af0:	4649      	mov	r1, r9
 8004af2:	4640      	mov	r0, r8
 8004af4:	47d0      	blx	sl
 8004af6:	3001      	adds	r0, #1
 8004af8:	d09b      	beq.n	8004a32 <_printf_i+0x166>
 8004afa:	3501      	adds	r5, #1
 8004afc:	68e3      	ldr	r3, [r4, #12]
 8004afe:	9903      	ldr	r1, [sp, #12]
 8004b00:	1a5b      	subs	r3, r3, r1
 8004b02:	42ab      	cmp	r3, r5
 8004b04:	dcf2      	bgt.n	8004aec <_printf_i+0x220>
 8004b06:	e7eb      	b.n	8004ae0 <_printf_i+0x214>
 8004b08:	2500      	movs	r5, #0
 8004b0a:	f104 0619 	add.w	r6, r4, #25
 8004b0e:	e7f5      	b.n	8004afc <_printf_i+0x230>
 8004b10:	08004dc5 	.word	0x08004dc5
 8004b14:	08004dd6 	.word	0x08004dd6

08004b18 <memchr>:
 8004b18:	4603      	mov	r3, r0
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	b2c9      	uxtb	r1, r1
 8004b1e:	4402      	add	r2, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	d101      	bne.n	8004b2a <memchr+0x12>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e003      	b.n	8004b32 <memchr+0x1a>
 8004b2a:	7804      	ldrb	r4, [r0, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	428c      	cmp	r4, r1
 8004b30:	d1f6      	bne.n	8004b20 <memchr+0x8>
 8004b32:	bd10      	pop	{r4, pc}

08004b34 <memcpy>:
 8004b34:	440a      	add	r2, r1
 8004b36:	4291      	cmp	r1, r2
 8004b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b3c:	d100      	bne.n	8004b40 <memcpy+0xc>
 8004b3e:	4770      	bx	lr
 8004b40:	b510      	push	{r4, lr}
 8004b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b46:	4291      	cmp	r1, r2
 8004b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b4c:	d1f9      	bne.n	8004b42 <memcpy+0xe>
 8004b4e:	bd10      	pop	{r4, pc}

08004b50 <memmove>:
 8004b50:	4288      	cmp	r0, r1
 8004b52:	b510      	push	{r4, lr}
 8004b54:	eb01 0402 	add.w	r4, r1, r2
 8004b58:	d902      	bls.n	8004b60 <memmove+0x10>
 8004b5a:	4284      	cmp	r4, r0
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	d807      	bhi.n	8004b70 <memmove+0x20>
 8004b60:	1e43      	subs	r3, r0, #1
 8004b62:	42a1      	cmp	r1, r4
 8004b64:	d008      	beq.n	8004b78 <memmove+0x28>
 8004b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b6e:	e7f8      	b.n	8004b62 <memmove+0x12>
 8004b70:	4601      	mov	r1, r0
 8004b72:	4402      	add	r2, r0
 8004b74:	428a      	cmp	r2, r1
 8004b76:	d100      	bne.n	8004b7a <memmove+0x2a>
 8004b78:	bd10      	pop	{r4, pc}
 8004b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b82:	e7f7      	b.n	8004b74 <memmove+0x24>

08004b84 <_free_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4605      	mov	r5, r0
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	d043      	beq.n	8004c14 <_free_r+0x90>
 8004b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b90:	1f0c      	subs	r4, r1, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bfb8      	it	lt
 8004b96:	18e4      	addlt	r4, r4, r3
 8004b98:	f000 f8d0 	bl	8004d3c <__malloc_lock>
 8004b9c:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <_free_r+0x94>)
 8004b9e:	6813      	ldr	r3, [r2, #0]
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	b933      	cbnz	r3, 8004bb2 <_free_r+0x2e>
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	6014      	str	r4, [r2, #0]
 8004ba8:	4628      	mov	r0, r5
 8004baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bae:	f000 b8cb 	b.w	8004d48 <__malloc_unlock>
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	d90a      	bls.n	8004bcc <_free_r+0x48>
 8004bb6:	6821      	ldr	r1, [r4, #0]
 8004bb8:	1862      	adds	r2, r4, r1
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	bf01      	itttt	eq
 8004bbe:	681a      	ldreq	r2, [r3, #0]
 8004bc0:	685b      	ldreq	r3, [r3, #4]
 8004bc2:	1852      	addeq	r2, r2, r1
 8004bc4:	6022      	streq	r2, [r4, #0]
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	6004      	str	r4, [r0, #0]
 8004bca:	e7ed      	b.n	8004ba8 <_free_r+0x24>
 8004bcc:	461a      	mov	r2, r3
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	b10b      	cbz	r3, 8004bd6 <_free_r+0x52>
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	d9fa      	bls.n	8004bcc <_free_r+0x48>
 8004bd6:	6811      	ldr	r1, [r2, #0]
 8004bd8:	1850      	adds	r0, r2, r1
 8004bda:	42a0      	cmp	r0, r4
 8004bdc:	d10b      	bne.n	8004bf6 <_free_r+0x72>
 8004bde:	6820      	ldr	r0, [r4, #0]
 8004be0:	4401      	add	r1, r0
 8004be2:	1850      	adds	r0, r2, r1
 8004be4:	4283      	cmp	r3, r0
 8004be6:	6011      	str	r1, [r2, #0]
 8004be8:	d1de      	bne.n	8004ba8 <_free_r+0x24>
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4401      	add	r1, r0
 8004bf0:	6011      	str	r1, [r2, #0]
 8004bf2:	6053      	str	r3, [r2, #4]
 8004bf4:	e7d8      	b.n	8004ba8 <_free_r+0x24>
 8004bf6:	d902      	bls.n	8004bfe <_free_r+0x7a>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	e7d4      	b.n	8004ba8 <_free_r+0x24>
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	1821      	adds	r1, r4, r0
 8004c02:	428b      	cmp	r3, r1
 8004c04:	bf01      	itttt	eq
 8004c06:	6819      	ldreq	r1, [r3, #0]
 8004c08:	685b      	ldreq	r3, [r3, #4]
 8004c0a:	1809      	addeq	r1, r1, r0
 8004c0c:	6021      	streq	r1, [r4, #0]
 8004c0e:	6063      	str	r3, [r4, #4]
 8004c10:	6054      	str	r4, [r2, #4]
 8004c12:	e7c9      	b.n	8004ba8 <_free_r+0x24>
 8004c14:	bd38      	pop	{r3, r4, r5, pc}
 8004c16:	bf00      	nop
 8004c18:	20000150 	.word	0x20000150

08004c1c <_malloc_r>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	1ccd      	adds	r5, r1, #3
 8004c20:	f025 0503 	bic.w	r5, r5, #3
 8004c24:	3508      	adds	r5, #8
 8004c26:	2d0c      	cmp	r5, #12
 8004c28:	bf38      	it	cc
 8004c2a:	250c      	movcc	r5, #12
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	4606      	mov	r6, r0
 8004c30:	db01      	blt.n	8004c36 <_malloc_r+0x1a>
 8004c32:	42a9      	cmp	r1, r5
 8004c34:	d903      	bls.n	8004c3e <_malloc_r+0x22>
 8004c36:	230c      	movs	r3, #12
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c3e:	f000 f87d 	bl	8004d3c <__malloc_lock>
 8004c42:	4921      	ldr	r1, [pc, #132]	; (8004cc8 <_malloc_r+0xac>)
 8004c44:	680a      	ldr	r2, [r1, #0]
 8004c46:	4614      	mov	r4, r2
 8004c48:	b99c      	cbnz	r4, 8004c72 <_malloc_r+0x56>
 8004c4a:	4f20      	ldr	r7, [pc, #128]	; (8004ccc <_malloc_r+0xb0>)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	b923      	cbnz	r3, 8004c5a <_malloc_r+0x3e>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4630      	mov	r0, r6
 8004c54:	f000 f862 	bl	8004d1c <_sbrk_r>
 8004c58:	6038      	str	r0, [r7, #0]
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f000 f85d 	bl	8004d1c <_sbrk_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	d123      	bne.n	8004cae <_malloc_r+0x92>
 8004c66:	230c      	movs	r3, #12
 8004c68:	4630      	mov	r0, r6
 8004c6a:	6033      	str	r3, [r6, #0]
 8004c6c:	f000 f86c 	bl	8004d48 <__malloc_unlock>
 8004c70:	e7e3      	b.n	8004c3a <_malloc_r+0x1e>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	1b5b      	subs	r3, r3, r5
 8004c76:	d417      	bmi.n	8004ca8 <_malloc_r+0x8c>
 8004c78:	2b0b      	cmp	r3, #11
 8004c7a:	d903      	bls.n	8004c84 <_malloc_r+0x68>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	441c      	add	r4, r3
 8004c80:	6025      	str	r5, [r4, #0]
 8004c82:	e004      	b.n	8004c8e <_malloc_r+0x72>
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	42a2      	cmp	r2, r4
 8004c88:	bf0c      	ite	eq
 8004c8a:	600b      	streq	r3, [r1, #0]
 8004c8c:	6053      	strne	r3, [r2, #4]
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f000 f85a 	bl	8004d48 <__malloc_unlock>
 8004c94:	f104 000b 	add.w	r0, r4, #11
 8004c98:	1d23      	adds	r3, r4, #4
 8004c9a:	f020 0007 	bic.w	r0, r0, #7
 8004c9e:	1ac2      	subs	r2, r0, r3
 8004ca0:	d0cc      	beq.n	8004c3c <_malloc_r+0x20>
 8004ca2:	1a1b      	subs	r3, r3, r0
 8004ca4:	50a3      	str	r3, [r4, r2]
 8004ca6:	e7c9      	b.n	8004c3c <_malloc_r+0x20>
 8004ca8:	4622      	mov	r2, r4
 8004caa:	6864      	ldr	r4, [r4, #4]
 8004cac:	e7cc      	b.n	8004c48 <_malloc_r+0x2c>
 8004cae:	1cc4      	adds	r4, r0, #3
 8004cb0:	f024 0403 	bic.w	r4, r4, #3
 8004cb4:	42a0      	cmp	r0, r4
 8004cb6:	d0e3      	beq.n	8004c80 <_malloc_r+0x64>
 8004cb8:	1a21      	subs	r1, r4, r0
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f000 f82e 	bl	8004d1c <_sbrk_r>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d1dd      	bne.n	8004c80 <_malloc_r+0x64>
 8004cc4:	e7cf      	b.n	8004c66 <_malloc_r+0x4a>
 8004cc6:	bf00      	nop
 8004cc8:	20000150 	.word	0x20000150
 8004ccc:	20000154 	.word	0x20000154

08004cd0 <_realloc_r>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	4607      	mov	r7, r0
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	460e      	mov	r6, r1
 8004cd8:	b921      	cbnz	r1, 8004ce4 <_realloc_r+0x14>
 8004cda:	4611      	mov	r1, r2
 8004cdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ce0:	f7ff bf9c 	b.w	8004c1c <_malloc_r>
 8004ce4:	b922      	cbnz	r2, 8004cf0 <_realloc_r+0x20>
 8004ce6:	f7ff ff4d 	bl	8004b84 <_free_r>
 8004cea:	4625      	mov	r5, r4
 8004cec:	4628      	mov	r0, r5
 8004cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf0:	f000 f830 	bl	8004d54 <_malloc_usable_size_r>
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d20f      	bcs.n	8004d18 <_realloc_r+0x48>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f7ff ff8e 	bl	8004c1c <_malloc_r>
 8004d00:	4605      	mov	r5, r0
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d0f2      	beq.n	8004cec <_realloc_r+0x1c>
 8004d06:	4631      	mov	r1, r6
 8004d08:	4622      	mov	r2, r4
 8004d0a:	f7ff ff13 	bl	8004b34 <memcpy>
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7ff ff37 	bl	8004b84 <_free_r>
 8004d16:	e7e9      	b.n	8004cec <_realloc_r+0x1c>
 8004d18:	4635      	mov	r5, r6
 8004d1a:	e7e7      	b.n	8004cec <_realloc_r+0x1c>

08004d1c <_sbrk_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4d05      	ldr	r5, [pc, #20]	; (8004d38 <_sbrk_r+0x1c>)
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f7fc fad0 	bl	80012cc <_sbrk>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_sbrk_r+0x1a>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_sbrk_r+0x1a>
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	2000023c 	.word	0x2000023c

08004d3c <__malloc_lock>:
 8004d3c:	4801      	ldr	r0, [pc, #4]	; (8004d44 <__malloc_lock+0x8>)
 8004d3e:	f000 b811 	b.w	8004d64 <__retarget_lock_acquire_recursive>
 8004d42:	bf00      	nop
 8004d44:	20000244 	.word	0x20000244

08004d48 <__malloc_unlock>:
 8004d48:	4801      	ldr	r0, [pc, #4]	; (8004d50 <__malloc_unlock+0x8>)
 8004d4a:	f000 b80c 	b.w	8004d66 <__retarget_lock_release_recursive>
 8004d4e:	bf00      	nop
 8004d50:	20000244 	.word	0x20000244

08004d54 <_malloc_usable_size_r>:
 8004d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d58:	1f18      	subs	r0, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bfbc      	itt	lt
 8004d5e:	580b      	ldrlt	r3, [r1, r0]
 8004d60:	18c0      	addlt	r0, r0, r3
 8004d62:	4770      	bx	lr

08004d64 <__retarget_lock_acquire_recursive>:
 8004d64:	4770      	bx	lr

08004d66 <__retarget_lock_release_recursive>:
 8004d66:	4770      	bx	lr

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
