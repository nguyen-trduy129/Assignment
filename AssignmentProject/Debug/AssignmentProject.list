
AssignmentProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039bc  080039bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080039bc  080039bc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039bc  080039bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000068  08003a2c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003a2c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc45  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203c  00000000  00000000  0002bcd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f8  00000000  00000000  0002f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecdd  00000000  00000000  00046fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b1b  00000000  00000000  00055cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc7d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003404  00000000  00000000  000dc82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800397c 	.word	0x0800397c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800397c 	.word	0x0800397c

0800014c <isButton1Pressed>:

int KeyReg3[4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int timeForKeyPressed[4] = {300/TICK, 300/TICK, 300/TICK, 300/TICK};

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag ==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000084 	.word	0x20000084

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag ==1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000088 	.word	0x20000088

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag ==1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000008c 	.word	0x2000008c

080001b8 <doProcess>:
		return 1;
	}
	return 0;
}

void doProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b03      	cmp	r3, #3
 80001c4:	d81a      	bhi.n	80001fc <doProcess+0x44>
 80001c6:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <doProcess+0x14>)
 80001c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001cc:	080001dd 	.word	0x080001dd
 80001d0:	080001e5 	.word	0x080001e5
 80001d4:	080001ed 	.word	0x080001ed
 80001d8:	080001f5 	.word	0x080001f5
	switch (i){
	case 0:
		button1_flag =1;
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <doProcess+0x50>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]
		break;
 80001e2:	e00c      	b.n	80001fe <doProcess+0x46>
	case 1:
		button2_flag =1;
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <doProcess+0x54>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	601a      	str	r2, [r3, #0]
		break;
 80001ea:	e008      	b.n	80001fe <doProcess+0x46>
	case 2:
		button3_flag =1;
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <doProcess+0x58>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
		break;
 80001f2:	e004      	b.n	80001fe <doProcess+0x46>
	case 3:
		buttonPedes_flag =1;
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <doProcess+0x5c>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	601a      	str	r2, [r3, #0]
		break;
 80001fa:	e000      	b.n	80001fe <doProcess+0x46>
	default:
		break;
 80001fc:	bf00      	nop
	}
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	20000084 	.word	0x20000084
 800020c:	20000088 	.word	0x20000088
 8000210:	2000008c 	.word	0x2000008c
 8000214:	20000090 	.word	0x20000090

08000218 <readPin>:


int readPin(int i){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b03      	cmp	r3, #3
 8000224:	d822      	bhi.n	800026c <readPin+0x54>
 8000226:	a201      	add	r2, pc, #4	; (adr r2, 800022c <readPin+0x14>)
 8000228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022c:	0800023d 	.word	0x0800023d
 8000230:	08000249 	.word	0x08000249
 8000234:	08000255 	.word	0x08000255
 8000238:	08000261 	.word	0x08000261
	switch(i){
	case 0:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON1_Pin);
 800023c:	2102      	movs	r1, #2
 800023e:	480e      	ldr	r0, [pc, #56]	; (8000278 <readPin+0x60>)
 8000240:	f001 fc7a 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	e012      	b.n	800026e <readPin+0x56>
		break;
	case 1:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON2_Pin);
 8000248:	2110      	movs	r1, #16
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <readPin+0x60>)
 800024c:	f001 fc74 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	e00c      	b.n	800026e <readPin+0x56>
		break;
	case 2:
		return HAL_GPIO_ReadPin(GPIOB, BUTTON3_Pin);
 8000254:	2101      	movs	r1, #1
 8000256:	4809      	ldr	r0, [pc, #36]	; (800027c <readPin+0x64>)
 8000258:	f001 fc6e 	bl	8001b38 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	e006      	b.n	800026e <readPin+0x56>
		break;
	case 3:
		return HAL_GPIO_ReadPin(GPIOA, BUTTON_PEDES_Pin);
 8000260:	2101      	movs	r1, #1
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <readPin+0x60>)
 8000264:	f001 fc68 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	e000      	b.n	800026e <readPin+0x56>
		break;
	default:
		return GPIO_PIN_RESET;
 800026c:	2300      	movs	r3, #0
		break;
	}
}
 800026e:	4618      	mov	r0, r3
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800
 800027c:	40010c00 	.word	0x40010c00

08000280 <getKeyInput>:


void getKeyInput(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	for (int i =0; i<4; i++){
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e068      	b.n	800035e <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 800028c:	4a38      	ldr	r2, [pc, #224]	; (8000370 <getKeyInput+0xf0>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000294:	4937      	ldr	r1, [pc, #220]	; (8000374 <getKeyInput+0xf4>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800029c:	4a36      	ldr	r2, [pc, #216]	; (8000378 <getKeyInput+0xf8>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a4:	4932      	ldr	r1, [pc, #200]	; (8000370 <getKeyInput+0xf0>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = readPin(i);
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f7ff ffb3 	bl	8000218 <readPin>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4930      	ldr	r1, [pc, #192]	; (8000378 <getKeyInput+0xf8>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 80002bc:	4a2d      	ldr	r2, [pc, #180]	; (8000374 <getKeyInput+0xf4>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c4:	492a      	ldr	r1, [pc, #168]	; (8000370 <getKeyInput+0xf0>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d143      	bne.n	8000358 <getKeyInput+0xd8>
 80002d0:	4a27      	ldr	r2, [pc, #156]	; (8000370 <getKeyInput+0xf0>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d8:	4927      	ldr	r1, [pc, #156]	; (8000378 <getKeyInput+0xf8>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d139      	bne.n	8000358 <getKeyInput+0xd8>
			if (KeyReg2[i] != KeyReg3[i]){
 80002e4:	4a24      	ldr	r2, [pc, #144]	; (8000378 <getKeyInput+0xf8>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ec:	4923      	ldr	r1, [pc, #140]	; (800037c <getKeyInput+0xfc>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d016      	beq.n	8000326 <getKeyInput+0xa6>
				KeyReg3[i] = KeyReg2[i];
 80002f8:	4a1f      	ldr	r2, [pc, #124]	; (8000378 <getKeyInput+0xf8>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000300:	491e      	ldr	r1, [pc, #120]	; (800037c <getKeyInput+0xfc>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 8000308:	4a1b      	ldr	r2, [pc, #108]	; (8000378 <getKeyInput+0xf8>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d121      	bne.n	8000358 <getKeyInput+0xd8>
					timeForKeyPressed[i] = 300/TICK;
 8000314:	4a1a      	ldr	r2, [pc, #104]	; (8000380 <getKeyInput+0x100>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	211e      	movs	r1, #30
 800031a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					doProcess(i);
 800031e:	6878      	ldr	r0, [r7, #4]
 8000320:	f7ff ff4a 	bl	80001b8 <doProcess>
 8000324:	e018      	b.n	8000358 <getKeyInput+0xd8>
				}
			}else {
				timeForKeyPressed[i]--;
 8000326:	4a16      	ldr	r2, [pc, #88]	; (8000380 <getKeyInput+0x100>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032e:	1e5a      	subs	r2, r3, #1
 8000330:	4913      	ldr	r1, [pc, #76]	; (8000380 <getKeyInput+0x100>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeForKeyPressed[i] ==0){
 8000338:	4a11      	ldr	r2, [pc, #68]	; (8000380 <getKeyInput+0x100>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d109      	bne.n	8000358 <getKeyInput+0xd8>
					KeyReg3[i] =NORMAL_STATE;
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <getKeyInput+0xfc>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2101      	movs	r1, #1
 800034a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeForKeyPressed[i] = 300/TICK;
 800034e:	4a0c      	ldr	r2, [pc, #48]	; (8000380 <getKeyInput+0x100>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	211e      	movs	r1, #30
 8000354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0; i<4; i++){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3301      	adds	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b03      	cmp	r3, #3
 8000362:	dd93      	ble.n	800028c <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000010 	.word	0x20000010
 8000374:	20000000 	.word	0x20000000
 8000378:	20000020 	.word	0x20000020
 800037c:	20000030 	.word	0x20000030
 8000380:	20000040 	.word	0x20000040

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000388:	f001 f832 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038c:	f000 f814 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000390:	f000 f940 	bl	8000614 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000394:	f000 f852 	bl	800043c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000398:	f000 f912 	bl	80005c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800039c:	f000 f89a 	bl	80004d4 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <main+0x30>)
 80003a2:	f002 f87b 	bl	800249c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic_run();
 80003a6:	f000 fb73 	bl	8000a90 <fsm_automatic_run>
	  fsm_manual_run();
 80003aa:	f000 fcbd 	bl	8000d28 <fsm_manual_run>
	  fsm_tuning_run();
 80003ae:	f000 fe57 	bl	8001060 <fsm_tuning_run>
	  fsm_automatic_run();
 80003b2:	e7f8      	b.n	80003a6 <main+0x22>
 80003b4:	20000104 	.word	0x20000104

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	; 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 fad0 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003da:	2302      	movs	r3, #2
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e2:	2310      	movs	r3, #16
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e6:	2302      	movs	r3, #2
 80003e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003ea:	2300      	movs	r3, #0
 80003ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f4:	f107 0318 	add.w	r3, r7, #24
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fbe5 	bl	8001bc8 <HAL_RCC_OscConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000404:	f000 f980 	bl	8000708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	230f      	movs	r3, #15
 800040a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040c:	2302      	movs	r3, #2
 800040e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fe50 	bl	80020c8 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800042e:	f000 f96b 	bl	8000708 <Error_Handler>
  }
}
 8000432:	bf00      	nop
 8000434:	3740      	adds	r7, #64	; 0x40
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MX_TIM2_Init+0x94>)
 800045a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000462:	f242 720f 	movw	r2, #9999	; 0x270f
 8000466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MX_TIM2_Init+0x94>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000470:	223f      	movs	r2, #63	; 0x3f
 8000472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_TIM2_Init+0x94>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000482:	f001 ffbb 	bl	80023fc <HAL_TIM_Base_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800048c:	f000 f93c 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	4619      	mov	r1, r3
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <MX_TIM2_Init+0x94>)
 800049e:	f002 fa6d 	bl	800297c <HAL_TIM_ConfigClockSource>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004a8:	f000 f92e 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_TIM2_Init+0x94>)
 80004ba:	f002 fdc7 	bl	800304c <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c4:	f000 f920 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000104 	.word	0x20000104

080004d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08e      	sub	sp, #56	; 0x38
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	f107 0320 	add.w	r3, r7, #32
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]
 8000502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000504:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000506:	4a2d      	ldr	r2, [pc, #180]	; (80005bc <MX_TIM3_Init+0xe8>)
 8000508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_TIM3_Init+0xe4>)
 800050c:	223f      	movs	r2, #63	; 0x3f
 800050e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800051c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800052a:	4823      	ldr	r0, [pc, #140]	; (80005b8 <MX_TIM3_Init+0xe4>)
 800052c:	f001 ff66 	bl	80023fc <HAL_TIM_Base_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000536:	f000 f8e7 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000544:	4619      	mov	r1, r3
 8000546:	481c      	ldr	r0, [pc, #112]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000548:	f002 fa18 	bl	800297c <HAL_TIM_ConfigClockSource>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000552:	f000 f8d9 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000558:	f001 fff2 	bl	8002540 <HAL_TIM_PWM_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000562:	f000 f8d1 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	4619      	mov	r1, r3
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000576:	f002 fd69 	bl	800304c <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000580:	f000 f8c2 	bl	8000708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <MX_TIM3_Init+0xe4>)
 800059c:	f002 f930 	bl	8002800 <HAL_TIM_PWM_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80005a6:	f000 f8af 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005aa:	4803      	ldr	r0, [pc, #12]	; (80005b8 <MX_TIM3_Init+0xe4>)
 80005ac:	f000 f9aa 	bl	8000904 <HAL_TIM_MspPostInit>

}
 80005b0:	bf00      	nop
 80005b2:	3738      	adds	r7, #56	; 0x38
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000bc 	.word	0x200000bc
 80005bc:	40000400 	.word	0x40000400

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <MX_USART2_UART_Init+0x50>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f8:	f002 fd98 	bl	800312c <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000602:	f000 f881 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000014c 	.word	0x2000014c
 8000610:	40004400 	.word	0x40004400

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a2d      	ldr	r2, [pc, #180]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDES_0_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800065e:	4822      	ldr	r0, [pc, #136]	; (80006e8 <MX_GPIO_Init+0xd4>)
 8000660:	f001 fa81 	bl	8001b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDES_1_Pin|TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800066a:	4820      	ldr	r0, [pc, #128]	; (80006ec <MX_GPIO_Init+0xd8>)
 800066c:	f001 fa7b 	bl	8001b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDES_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDES_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000670:	2313      	movs	r3, #19
 8000672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	4619      	mov	r1, r3
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <MX_GPIO_Init+0xd8>)
 8000684:	f001 f8d4 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000688:	2301      	movs	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	4619      	mov	r1, r3
 800069a:	4813      	ldr	r0, [pc, #76]	; (80006e8 <MX_GPIO_Init+0xd4>)
 800069c:	f001 f8c8 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDES_0_Pin TRAFFIC1_0_Pin TRAFFIC2_0_Pin TRAFFIC2_1_Pin */
  GPIO_InitStruct.Pin = PEDES_0_Pin|TRAFFIC1_0_Pin|TRAFFIC2_0_Pin|TRAFFIC2_1_Pin;
 80006a0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2302      	movs	r3, #2
 80006b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_GPIO_Init+0xd4>)
 80006ba:	f001 f8b9 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDES_1_Pin TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = PEDES_1_Pin|TRAFFIC1_1_Pin;
 80006be:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2302      	movs	r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_GPIO_Init+0xd8>)
 80006d8:	f001 f8aa 	bl	8001830 <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010c00 	.word	0x40010c00
 80006ec:	40010800 	.word	0x40010800

080006f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	timerRun();
 80006f8:	f000 f844 	bl	8000784 <timerRun>
	getKeyInput();
 80006fc:	f7ff fdc0 	bl	8000280 <getKeyInput>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <setTimer2>:
void setTimer1(int duration){
	timer1_counter = duration/TICK;
	timer1_flag = 0;
}

void setTimer2(int duration){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <setTimer2+0x2c>)
 8000720:	fb82 1203 	smull	r1, r2, r2, r3
 8000724:	1092      	asrs	r2, r2, #2
 8000726:	17db      	asrs	r3, r3, #31
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	4a06      	ldr	r2, [pc, #24]	; (8000744 <setTimer2+0x30>)
 800072c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <setTimer2+0x34>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	66666667 	.word	0x66666667
 8000744:	200000a8 	.word	0x200000a8
 8000748:	200000a4 	.word	0x200000a4

0800074c <setTimer3>:
void setTimer3(int duration){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <setTimer3+0x2c>)
 8000758:	fb82 1203 	smull	r1, r2, r2, r3
 800075c:	1092      	asrs	r2, r2, #2
 800075e:	17db      	asrs	r3, r3, #31
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <setTimer3+0x30>)
 8000764:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <setTimer3+0x34>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	66666667 	.word	0x66666667
 800077c:	200000b0 	.word	0x200000b0
 8000780:	200000ac 	.word	0x200000ac

08000784 <timerRun>:
void setTimer4(int duration){
	timer4_counter = duration/TICK;
	timer4_flag = 0;
}

void timerRun(){
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <timerRun+0x8c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dd0b      	ble.n	80007a8 <timerRun+0x24>
		timer1_counter--;
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <timerRun+0x8c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <timerRun+0x8c>)
 8000798:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <timerRun+0x8c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dc02      	bgt.n	80007a8 <timerRun+0x24>
			timer1_flag = 1;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <timerRun+0x90>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <timerRun+0x94>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dd0b      	ble.n	80007c8 <timerRun+0x44>
		timer2_counter--;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <timerRun+0x94>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <timerRun+0x94>)
 80007b8:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <timerRun+0x94>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dc02      	bgt.n	80007c8 <timerRun+0x44>
			timer2_flag = 1;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <timerRun+0x98>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <timerRun+0x9c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dd0b      	ble.n	80007e8 <timerRun+0x64>
		timer3_counter--;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <timerRun+0x9c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <timerRun+0x9c>)
 80007d8:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <timerRun+0x9c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dc02      	bgt.n	80007e8 <timerRun+0x64>
			timer3_flag = 1;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <timerRun+0xa0>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <timerRun+0xa4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd0b      	ble.n	8000808 <timerRun+0x84>
		timer4_counter--;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <timerRun+0xa4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <timerRun+0xa4>)
 80007f8:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <timerRun+0xa4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dc02      	bgt.n	8000808 <timerRun+0x84>
			timer4_flag = 1;
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <timerRun+0xa8>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	200000a0 	.word	0x200000a0
 8000814:	2000009c 	.word	0x2000009c
 8000818:	200000a8 	.word	0x200000a8
 800081c:	200000a4 	.word	0x200000a4
 8000820:	200000b0 	.word	0x200000b0
 8000824:	200000ac 	.word	0x200000ac
 8000828:	200000b8 	.word	0x200000b8
 800082c:	200000b4 	.word	0x200000b4

08000830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_MspInit+0x5c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x5c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_MspInit+0x60>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_MspInit+0x60>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000

08000894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008a4:	d114      	bne.n	80008d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	201c      	movs	r0, #28
 80008c4:	f000 fecd 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008c8:	201c      	movs	r0, #28
 80008ca:	f000 fee6 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ce:	e010      	b.n	80008f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_TIM_Base_MspInit+0x6c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d10b      	bne.n	80008f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	40000400 	.word	0x40000400

08000904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_TIM_MspPostInit+0x58>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d117      	bne.n	8000954 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_TIM_MspPostInit+0x5c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <HAL_TIM_MspPostInit+0x5c>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_TIM_MspPostInit+0x5c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_TIM_MspPostInit+0x60>)
 8000950:	f000 ff6e 	bl	8001830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40000400 	.word	0x40000400
 8000960:	40021000 	.word	0x40021000
 8000964:	40010800 	.word	0x40010800

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <HAL_UART_MspInit+0x98>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d137      	bne.n	80009f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <HAL_UART_MspInit+0x9c>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <HAL_UART_MspInit+0x9c>)
 800098e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000992:	61d3      	str	r3, [r2, #28]
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_UART_MspInit+0x9c>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x9c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x9c>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x9c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b8:	2304      	movs	r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <HAL_UART_MspInit+0xa0>)
 80009cc:	f000 ff30 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d0:	2308      	movs	r3, #8
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <HAL_UART_MspInit+0xa0>)
 80009e4:	f000 ff24 	bl	8001830 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2026      	movs	r0, #38	; 0x26
 80009ee:	f000 fe38 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f2:	2026      	movs	r0, #38	; 0x26
 80009f4:	f000 fe51 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010800 	.word	0x40010800

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 fd13 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM2_IRQHandler+0x10>)
 8000a62:	f001 fdc5 	bl	80025f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000104 	.word	0x20000104

08000a70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <USART2_IRQHandler+0x10>)
 8000a76:	f002 fba7 	bl	80031c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000014c 	.word	0x2000014c

08000a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <fsm_automatic_run>:
 *      Author: duyvt
 */

#include "traffic_automatic.h"

void fsm_automatic_run(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	switch(state_1){
 8000a94:	4b9b      	ldr	r3, [pc, #620]	; (8000d04 <fsm_automatic_run+0x274>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	f200 8090 	bhi.w	8000bbe <fsm_automatic_run+0x12e>
 8000a9e:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <fsm_automatic_run+0x14>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000ab5 	.word	0x08000ab5
 8000aa8:	08000acf 	.word	0x08000acf
 8000aac:	08000b6f 	.word	0x08000b6f
 8000ab0:	08000b1f 	.word	0x08000b1f
	case INIT:
		state_1 = AUTO_RED;
 8000ab4:	4b93      	ldr	r3, [pc, #588]	; (8000d04 <fsm_automatic_run+0x274>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
		setTimer2(redTime*1000);
 8000aba:	4b93      	ldr	r3, [pc, #588]	; (8000d08 <fsm_automatic_run+0x278>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ac2:	fb02 f303 	mul.w	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe24 	bl	8000714 <setTimer2>
		break;
 8000acc:	e07e      	b.n	8000bcc <fsm_automatic_run+0x13c>
	case AUTO_RED:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_0_Pin , 1);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	488e      	ldr	r0, [pc, #568]	; (8000d0c <fsm_automatic_run+0x27c>)
 8000ad4:	f001 f847 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_1_Pin , 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	488c      	ldr	r0, [pc, #560]	; (8000d10 <fsm_automatic_run+0x280>)
 8000ae0:	f001 f841 	bl	8001b66 <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8000ae4:	4b8b      	ldr	r3, [pc, #556]	; (8000d14 <fsm_automatic_run+0x284>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d10b      	bne.n	8000b04 <fsm_automatic_run+0x74>
			state_1 = AUTO_GREEN;
 8000aec:	4b85      	ldr	r3, [pc, #532]	; (8000d04 <fsm_automatic_run+0x274>)
 8000aee:	2203      	movs	r2, #3
 8000af0:	601a      	str	r2, [r3, #0]
			setTimer2(greenTime*1000);
 8000af2:	4b89      	ldr	r3, [pc, #548]	; (8000d18 <fsm_automatic_run+0x288>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000afa:	fb02 f303 	mul.w	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe08 	bl	8000714 <setTimer2>
		}

		if (isButton1Pressed()){
 8000b04:	f7ff fb22 	bl	800014c <isButton1Pressed>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d059      	beq.n	8000bc2 <fsm_automatic_run+0x132>
			state_1 = MAN_RED;
 8000b0e:	4b7d      	ldr	r3, [pc, #500]	; (8000d04 <fsm_automatic_run+0x274>)
 8000b10:	220b      	movs	r2, #11
 8000b12:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8000b14:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b18:	f7ff fdfc 	bl	8000714 <setTimer2>
		}


		break;
 8000b1c:	e051      	b.n	8000bc2 <fsm_automatic_run+0x132>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_0_Pin , 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2108      	movs	r1, #8
 8000b22:	487a      	ldr	r0, [pc, #488]	; (8000d0c <fsm_automatic_run+0x27c>)
 8000b24:	f001 f81f 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_1_Pin , 1);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2e:	4878      	ldr	r0, [pc, #480]	; (8000d10 <fsm_automatic_run+0x280>)
 8000b30:	f001 f819 	bl	8001b66 <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8000b34:	4b77      	ldr	r3, [pc, #476]	; (8000d14 <fsm_automatic_run+0x284>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d10b      	bne.n	8000b54 <fsm_automatic_run+0xc4>
			state_1 = AUTO_AMBER;
 8000b3c:	4b71      	ldr	r3, [pc, #452]	; (8000d04 <fsm_automatic_run+0x274>)
 8000b3e:	2202      	movs	r2, #2
 8000b40:	601a      	str	r2, [r3, #0]
			setTimer2(amberTime*1000);
 8000b42:	4b76      	ldr	r3, [pc, #472]	; (8000d1c <fsm_automatic_run+0x28c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b4a:	fb02 f303 	mul.w	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fde0 	bl	8000714 <setTimer2>
		}

		if (isButton1Pressed()){
 8000b54:	f7ff fafa 	bl	800014c <isButton1Pressed>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d033      	beq.n	8000bc6 <fsm_automatic_run+0x136>
			state_1 = MAN_RED;
 8000b5e:	4b69      	ldr	r3, [pc, #420]	; (8000d04 <fsm_automatic_run+0x274>)
 8000b60:	220b      	movs	r2, #11
 8000b62:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8000b64:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b68:	f7ff fdd4 	bl	8000714 <setTimer2>
		}
		break;
 8000b6c:	e02b      	b.n	8000bc6 <fsm_automatic_run+0x136>
	case AUTO_AMBER:
		HAL_GPIO_WritePin(GPIOA,TRAFFIC1_0_Pin , 1);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2108      	movs	r1, #8
 8000b72:	4866      	ldr	r0, [pc, #408]	; (8000d0c <fsm_automatic_run+0x27c>)
 8000b74:	f000 fff7 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,TRAFFIC1_1_Pin , 1);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	4864      	ldr	r0, [pc, #400]	; (8000d10 <fsm_automatic_run+0x280>)
 8000b80:	f000 fff1 	bl	8001b66 <HAL_GPIO_WritePin>

		if(timer2_flag ==1){
 8000b84:	4b63      	ldr	r3, [pc, #396]	; (8000d14 <fsm_automatic_run+0x284>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d10b      	bne.n	8000ba4 <fsm_automatic_run+0x114>
			state_1 = AUTO_RED;
 8000b8c:	4b5d      	ldr	r3, [pc, #372]	; (8000d04 <fsm_automatic_run+0x274>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8000b92:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <fsm_automatic_run+0x278>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fdb8 	bl	8000714 <setTimer2>
		}

		if (isButton1Pressed()){
 8000ba4:	f7ff fad2 	bl	800014c <isButton1Pressed>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00d      	beq.n	8000bca <fsm_automatic_run+0x13a>
			state_1 = MAN_RED;
 8000bae:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <fsm_automatic_run+0x274>)
 8000bb0:	220b      	movs	r2, #11
 8000bb2:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8000bb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bb8:	f7ff fdac 	bl	8000714 <setTimer2>
		}
		break;
 8000bbc:	e005      	b.n	8000bca <fsm_automatic_run+0x13a>
	default:
		break;
 8000bbe:	bf00      	nop
 8000bc0:	e004      	b.n	8000bcc <fsm_automatic_run+0x13c>
		break;
 8000bc2:	bf00      	nop
 8000bc4:	e002      	b.n	8000bcc <fsm_automatic_run+0x13c>
		break;
 8000bc6:	bf00      	nop
 8000bc8:	e000      	b.n	8000bcc <fsm_automatic_run+0x13c>
		break;
 8000bca:	bf00      	nop
	}

	switch(state_2){
 8000bcc:	4b54      	ldr	r3, [pc, #336]	; (8000d20 <fsm_automatic_run+0x290>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	f200 808d 	bhi.w	8000cf0 <fsm_automatic_run+0x260>
 8000bd6:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <fsm_automatic_run+0x14c>)
 8000bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000ca3 	.word	0x08000ca3
 8000be4:	08000c55 	.word	0x08000c55
 8000be8:	08000c07 	.word	0x08000c07
		case INIT:
			state_2 = AUTO_GREEN;
 8000bec:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <fsm_automatic_run+0x290>)
 8000bee:	2203      	movs	r2, #3
 8000bf0:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <fsm_automatic_run+0x288>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fda4 	bl	800074c <setTimer3>
			break;
 8000c04:	e07b      	b.n	8000cfe <fsm_automatic_run+0x26e>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4841      	ldr	r0, [pc, #260]	; (8000d10 <fsm_automatic_run+0x280>)
 8000c0c:	f000 ffab 	bl	8001b66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2120      	movs	r1, #32
 8000c14:	483e      	ldr	r0, [pc, #248]	; (8000d10 <fsm_automatic_run+0x280>)
 8000c16:	f000 ffa6 	bl	8001b66 <HAL_GPIO_WritePin>

			if(timer3_flag ==1){
 8000c1a:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <fsm_automatic_run+0x294>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d10b      	bne.n	8000c3a <fsm_automatic_run+0x1aa>
				state_2 = AUTO_AMBER;
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <fsm_automatic_run+0x290>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	601a      	str	r2, [r3, #0]
				setTimer3(amberTime*1000);
 8000c28:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <fsm_automatic_run+0x28c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c30:	fb02 f303 	mul.w	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fd89 	bl	800074c <setTimer3>
			}

			if (isButton1Pressed()){
 8000c3a:	f7ff fa87 	bl	800014c <isButton1Pressed>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d057      	beq.n	8000cf4 <fsm_automatic_run+0x264>
				state_2 = MAN_GREEN;
 8000c44:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <fsm_automatic_run+0x290>)
 8000c46:	220d      	movs	r2, #13
 8000c48:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000c4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c4e:	f7ff fd7d 	bl	800074c <setTimer3>
			}
			break;
 8000c52:	e04f      	b.n	8000cf4 <fsm_automatic_run+0x264>
		case AUTO_AMBER:
			HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2110      	movs	r1, #16
 8000c58:	482d      	ldr	r0, [pc, #180]	; (8000d10 <fsm_automatic_run+0x280>)
 8000c5a:	f000 ff84 	bl	8001b66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2120      	movs	r1, #32
 8000c62:	482b      	ldr	r0, [pc, #172]	; (8000d10 <fsm_automatic_run+0x280>)
 8000c64:	f000 ff7f 	bl	8001b66 <HAL_GPIO_WritePin>
			if(timer3_flag ==1){
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <fsm_automatic_run+0x294>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d10b      	bne.n	8000c88 <fsm_automatic_run+0x1f8>
				state_2 = AUTO_RED;
 8000c70:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <fsm_automatic_run+0x290>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
				setTimer3(redTime*1000);
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <fsm_automatic_run+0x278>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c7e:	fb02 f303 	mul.w	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd62 	bl	800074c <setTimer3>
			}

			if (isButton1Pressed()){
 8000c88:	f7ff fa60 	bl	800014c <isButton1Pressed>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d032      	beq.n	8000cf8 <fsm_automatic_run+0x268>
				state_2 = MAN_GREEN;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <fsm_automatic_run+0x290>)
 8000c94:	220d      	movs	r2, #13
 8000c96:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000c98:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c9c:	f7ff fd56 	bl	800074c <setTimer3>
			}
			break;
 8000ca0:	e02a      	b.n	8000cf8 <fsm_automatic_run+0x268>
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOB,TRAFFIC2_0_Pin , 1);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	481a      	ldr	r0, [pc, #104]	; (8000d10 <fsm_automatic_run+0x280>)
 8000ca8:	f000 ff5d 	bl	8001b66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,TRAFFIC2_1_Pin , 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4817      	ldr	r0, [pc, #92]	; (8000d10 <fsm_automatic_run+0x280>)
 8000cb2:	f000 ff58 	bl	8001b66 <HAL_GPIO_WritePin>

			if(timer3_flag ==1){
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <fsm_automatic_run+0x294>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d10b      	bne.n	8000cd6 <fsm_automatic_run+0x246>
				state_2 = AUTO_GREEN;
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <fsm_automatic_run+0x290>)
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	601a      	str	r2, [r3, #0]
				setTimer3(greenTime*1000);
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <fsm_automatic_run+0x288>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ccc:	fb02 f303 	mul.w	r3, r2, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fd3b 	bl	800074c <setTimer3>
			}

			if (isButton1Pressed()){
 8000cd6:	f7ff fa39 	bl	800014c <isButton1Pressed>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00d      	beq.n	8000cfc <fsm_automatic_run+0x26c>
				state_2 = MAN_GREEN;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <fsm_automatic_run+0x290>)
 8000ce2:	220d      	movs	r2, #13
 8000ce4:	601a      	str	r2, [r3, #0]
				setTimer3(WAITING_TIME);
 8000ce6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cea:	f7ff fd2f 	bl	800074c <setTimer3>
			}
			break;
 8000cee:	e005      	b.n	8000cfc <fsm_automatic_run+0x26c>
		default:
			break;
 8000cf0:	bf00      	nop
 8000cf2:	e004      	b.n	8000cfe <fsm_automatic_run+0x26e>
			break;
 8000cf4:	bf00      	nop
 8000cf6:	e002      	b.n	8000cfe <fsm_automatic_run+0x26e>
			break;
 8000cf8:	bf00      	nop
 8000cfa:	e000      	b.n	8000cfe <fsm_automatic_run+0x26e>
			break;
 8000cfc:	bf00      	nop
		}
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000094 	.word	0x20000094
 8000d08:	20000050 	.word	0x20000050
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	200000a4 	.word	0x200000a4
 8000d18:	20000058 	.word	0x20000058
 8000d1c:	20000054 	.word	0x20000054
 8000d20:	20000098 	.word	0x20000098
 8000d24:	200000ac 	.word	0x200000ac

08000d28 <fsm_manual_run>:
 */


#include "traffic_manual.h"

void fsm_manual_run(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	switch (state_1){
 8000d2c:	4bc2      	ldr	r3, [pc, #776]	; (8001038 <fsm_manual_run+0x310>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b0d      	cmp	r3, #13
 8000d32:	d04d      	beq.n	8000dd0 <fsm_manual_run+0xa8>
 8000d34:	2b0d      	cmp	r3, #13
 8000d36:	f300 809c 	bgt.w	8000e72 <fsm_manual_run+0x14a>
 8000d3a:	2b0b      	cmp	r3, #11
 8000d3c:	d003      	beq.n	8000d46 <fsm_manual_run+0x1e>
 8000d3e:	2b0c      	cmp	r3, #12
 8000d40:	f000 808b 	beq.w	8000e5a <fsm_manual_run+0x132>
		if (timer2_flag ==1){
			state_1=AUTO_RED;
			setTimer2(redTime*1000);
		}
	default:
		break;
 8000d44:	e095      	b.n	8000e72 <fsm_manual_run+0x14a>
		HAL_GPIO_WritePin(GPIOA, TRAFFIC1_0_Pin, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2108      	movs	r1, #8
 8000d4a:	48bc      	ldr	r0, [pc, #752]	; (800103c <fsm_manual_run+0x314>)
 8000d4c:	f000 ff0b 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC1_1_Pin, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d56:	48ba      	ldr	r0, [pc, #744]	; (8001040 <fsm_manual_run+0x318>)
 8000d58:	f000 ff05 	bl	8001b66 <HAL_GPIO_WritePin>
		if (isButton1Pressed()){
 8000d5c:	f7ff f9f6 	bl	800014c <isButton1Pressed>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00b      	beq.n	8000d7e <fsm_manual_run+0x56>
			state_1= TUN_GREEN;
 8000d66:	4bb4      	ldr	r3, [pc, #720]	; (8001038 <fsm_manual_run+0x310>)
 8000d68:	2217      	movs	r2, #23
 8000d6a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC1_1_Pin, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d72:	48b3      	ldr	r0, [pc, #716]	; (8001040 <fsm_manual_run+0x318>)
 8000d74:	f000 fef7 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer2(250);
 8000d78:	20fa      	movs	r0, #250	; 0xfa
 8000d7a:	f7ff fccb 	bl	8000714 <setTimer2>
		if (isButton2Pressed()){
 8000d7e:	f7ff f9f7 	bl	8000170 <isButton2Pressed>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <fsm_manual_run+0x6e>
			state_1= MAN_GREEN;
 8000d88:	4bab      	ldr	r3, [pc, #684]	; (8001038 <fsm_manual_run+0x310>)
 8000d8a:	220d      	movs	r2, #13
 8000d8c:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8000d8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d92:	f7ff fcbf 	bl	8000714 <setTimer2>
		if (isButton3Pressed()){
 8000d96:	f7ff f9fd 	bl	8000194 <isButton3Pressed>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <fsm_manual_run+0x86>
			state_1=MAN_AMBER;
 8000da0:	4ba5      	ldr	r3, [pc, #660]	; (8001038 <fsm_manual_run+0x310>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8000da6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000daa:	f7ff fcb3 	bl	8000714 <setTimer2>
		if (timer2_flag ==1){
 8000dae:	4ba5      	ldr	r3, [pc, #660]	; (8001044 <fsm_manual_run+0x31c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d15f      	bne.n	8000e76 <fsm_manual_run+0x14e>
			state_1=AUTO_RED;
 8000db6:	4ba0      	ldr	r3, [pc, #640]	; (8001038 <fsm_manual_run+0x310>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8000dbc:	4ba2      	ldr	r3, [pc, #648]	; (8001048 <fsm_manual_run+0x320>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fca3 	bl	8000714 <setTimer2>
		break;
 8000dce:	e052      	b.n	8000e76 <fsm_manual_run+0x14e>
		HAL_GPIO_WritePin(GPIOA, TRAFFIC1_0_Pin, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	4899      	ldr	r0, [pc, #612]	; (800103c <fsm_manual_run+0x314>)
 8000dd6:	f000 fec6 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC1_1_Pin, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de0:	4897      	ldr	r0, [pc, #604]	; (8001040 <fsm_manual_run+0x318>)
 8000de2:	f000 fec0 	bl	8001b66 <HAL_GPIO_WritePin>
		if (isButton1Pressed()){
 8000de6:	f7ff f9b1 	bl	800014c <isButton1Pressed>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00b      	beq.n	8000e08 <fsm_manual_run+0xe0>
			state_1= TUN_GREEN;
 8000df0:	4b91      	ldr	r3, [pc, #580]	; (8001038 <fsm_manual_run+0x310>)
 8000df2:	2217      	movs	r2, #23
 8000df4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC1_1_Pin, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfc:	4890      	ldr	r0, [pc, #576]	; (8001040 <fsm_manual_run+0x318>)
 8000dfe:	f000 feb2 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer2(250);
 8000e02:	20fa      	movs	r0, #250	; 0xfa
 8000e04:	f7ff fc86 	bl	8000714 <setTimer2>
		if (isButton2Pressed()){
 8000e08:	f7ff f9b2 	bl	8000170 <isButton2Pressed>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d006      	beq.n	8000e20 <fsm_manual_run+0xf8>
			state_1= MAN_AMBER;
 8000e12:	4b89      	ldr	r3, [pc, #548]	; (8001038 <fsm_manual_run+0x310>)
 8000e14:	220c      	movs	r2, #12
 8000e16:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8000e18:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e1c:	f7ff fc7a 	bl	8000714 <setTimer2>
		if (isButton3Pressed()){
 8000e20:	f7ff f9b8 	bl	8000194 <isButton3Pressed>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <fsm_manual_run+0x110>
			state_1=MAN_RED;
 8000e2a:	4b83      	ldr	r3, [pc, #524]	; (8001038 <fsm_manual_run+0x310>)
 8000e2c:	220b      	movs	r2, #11
 8000e2e:	601a      	str	r2, [r3, #0]
			setTimer2(WAITING_TIME);
 8000e30:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e34:	f7ff fc6e 	bl	8000714 <setTimer2>
		if (timer2_flag ==1){
 8000e38:	4b82      	ldr	r3, [pc, #520]	; (8001044 <fsm_manual_run+0x31c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d11c      	bne.n	8000e7a <fsm_manual_run+0x152>
			state_1=AUTO_RED;
 8000e40:	4b7d      	ldr	r3, [pc, #500]	; (8001038 <fsm_manual_run+0x310>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 8000e46:	4b80      	ldr	r3, [pc, #512]	; (8001048 <fsm_manual_run+0x320>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e4e:	fb02 f303 	mul.w	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fc5e 	bl	8000714 <setTimer2>
		break;
 8000e58:	e00f      	b.n	8000e7a <fsm_manual_run+0x152>
		HAL_GPIO_WritePin(GPIOA, TRAFFIC1_0_Pin, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	4877      	ldr	r0, [pc, #476]	; (800103c <fsm_manual_run+0x314>)
 8000e60:	f000 fe81 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC1_1_Pin, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6a:	4875      	ldr	r0, [pc, #468]	; (8001040 <fsm_manual_run+0x318>)
 8000e6c:	f000 fe7b 	bl	8001b66 <HAL_GPIO_WritePin>
		break;
 8000e70:	e004      	b.n	8000e7c <fsm_manual_run+0x154>
		break;
 8000e72:	bf00      	nop
 8000e74:	e002      	b.n	8000e7c <fsm_manual_run+0x154>
		break;
 8000e76:	bf00      	nop
 8000e78:	e000      	b.n	8000e7c <fsm_manual_run+0x154>
		break;
 8000e7a:	bf00      	nop
	}


	switch (state_2){
 8000e7c:	4b73      	ldr	r3, [pc, #460]	; (800104c <fsm_manual_run+0x324>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b0d      	cmp	r3, #13
 8000e82:	d008      	beq.n	8000e96 <fsm_manual_run+0x16e>
 8000e84:	2b0d      	cmp	r3, #13
 8000e86:	f300 80d0 	bgt.w	800102a <fsm_manual_run+0x302>
 8000e8a:	2b0b      	cmp	r3, #11
 8000e8c:	f000 808a 	beq.w	8000fa4 <fsm_manual_run+0x27c>
 8000e90:	2b0c      	cmp	r3, #12
 8000e92:	d044      	beq.n	8000f1e <fsm_manual_run+0x1f6>
			state_2=AUTO_GREEN;
			setTimer3(greenTime*1000);
		}
		break;
	default:
		break;
 8000e94:	e0c9      	b.n	800102a <fsm_manual_run+0x302>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2110      	movs	r1, #16
 8000e9a:	4869      	ldr	r0, [pc, #420]	; (8001040 <fsm_manual_run+0x318>)
 8000e9c:	f000 fe63 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	4866      	ldr	r0, [pc, #408]	; (8001040 <fsm_manual_run+0x318>)
 8000ea6:	f000 fe5e 	bl	8001b66 <HAL_GPIO_WritePin>
		if (isButton1Pressed()){
 8000eaa:	f7ff f94f 	bl	800014c <isButton1Pressed>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00a      	beq.n	8000eca <fsm_manual_run+0x1a2>
			state_2= TUN_GREEN;
 8000eb4:	4b65      	ldr	r3, [pc, #404]	; (800104c <fsm_manual_run+0x324>)
 8000eb6:	2217      	movs	r2, #23
 8000eb8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4860      	ldr	r0, [pc, #384]	; (8001040 <fsm_manual_run+0x318>)
 8000ec0:	f000 fe51 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer3(250);
 8000ec4:	20fa      	movs	r0, #250	; 0xfa
 8000ec6:	f7ff fc41 	bl	800074c <setTimer3>
		if (isButton2Pressed()){
 8000eca:	f7ff f951 	bl	8000170 <isButton2Pressed>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <fsm_manual_run+0x1ba>
			state_2= MAN_AMBER;
 8000ed4:	4b5d      	ldr	r3, [pc, #372]	; (800104c <fsm_manual_run+0x324>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8000eda:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ede:	f7ff fc35 	bl	800074c <setTimer3>
		if (isButton3Pressed()){
 8000ee2:	f7ff f957 	bl	8000194 <isButton3Pressed>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <fsm_manual_run+0x1d2>
			state_2=MAN_RED;
 8000eec:	4b57      	ldr	r3, [pc, #348]	; (800104c <fsm_manual_run+0x324>)
 8000eee:	220b      	movs	r2, #11
 8000ef0:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8000ef2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ef6:	f7ff fc29 	bl	800074c <setTimer3>
		if (timer3_flag ==1){
 8000efa:	4b55      	ldr	r3, [pc, #340]	; (8001050 <fsm_manual_run+0x328>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	f040 8095 	bne.w	800102e <fsm_manual_run+0x306>
			state_2=AUTO_GREEN;
 8000f04:	4b51      	ldr	r3, [pc, #324]	; (800104c <fsm_manual_run+0x324>)
 8000f06:	2203      	movs	r2, #3
 8000f08:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8000f0a:	4b52      	ldr	r3, [pc, #328]	; (8001054 <fsm_manual_run+0x32c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fc18 	bl	800074c <setTimer3>
		break;
 8000f1c:	e087      	b.n	800102e <fsm_manual_run+0x306>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2110      	movs	r1, #16
 8000f22:	4847      	ldr	r0, [pc, #284]	; (8001040 <fsm_manual_run+0x318>)
 8000f24:	f000 fe1f 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	4844      	ldr	r0, [pc, #272]	; (8001040 <fsm_manual_run+0x318>)
 8000f2e:	f000 fe1a 	bl	8001b66 <HAL_GPIO_WritePin>
		if (isButton1Pressed()){
 8000f32:	f7ff f90b 	bl	800014c <isButton1Pressed>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00a      	beq.n	8000f52 <fsm_manual_run+0x22a>
			state_2= TUN_GREEN;
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <fsm_manual_run+0x324>)
 8000f3e:	2217      	movs	r2, #23
 8000f40:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2120      	movs	r1, #32
 8000f46:	483e      	ldr	r0, [pc, #248]	; (8001040 <fsm_manual_run+0x318>)
 8000f48:	f000 fe0d 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer3(250);
 8000f4c:	20fa      	movs	r0, #250	; 0xfa
 8000f4e:	f7ff fbfd 	bl	800074c <setTimer3>
		if (isButton2Pressed()){
 8000f52:	f7ff f90d 	bl	8000170 <isButton2Pressed>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <fsm_manual_run+0x242>
			state_2= MAN_RED;
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <fsm_manual_run+0x324>)
 8000f5e:	220b      	movs	r2, #11
 8000f60:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8000f62:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f66:	f7ff fbf1 	bl	800074c <setTimer3>
		if (isButton3Pressed()){
 8000f6a:	f7ff f913 	bl	8000194 <isButton3Pressed>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <fsm_manual_run+0x25a>
			state_2=MAN_GREEN;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <fsm_manual_run+0x324>)
 8000f76:	220d      	movs	r2, #13
 8000f78:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8000f7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f7e:	f7ff fbe5 	bl	800074c <setTimer3>
		if (timer3_flag ==1){
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <fsm_manual_run+0x328>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d153      	bne.n	8001032 <fsm_manual_run+0x30a>
			state_2=AUTO_GREEN;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <fsm_manual_run+0x324>)
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8000f90:	4b30      	ldr	r3, [pc, #192]	; (8001054 <fsm_manual_run+0x32c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fbd5 	bl	800074c <setTimer3>
		break;
 8000fa2:	e046      	b.n	8001032 <fsm_manual_run+0x30a>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	4825      	ldr	r0, [pc, #148]	; (8001040 <fsm_manual_run+0x318>)
 8000faa:	f000 fddc 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4823      	ldr	r0, [pc, #140]	; (8001040 <fsm_manual_run+0x318>)
 8000fb4:	f000 fdd7 	bl	8001b66 <HAL_GPIO_WritePin>
		if (isButton1Pressed()){
 8000fb8:	f7ff f8c8 	bl	800014c <isButton1Pressed>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00a      	beq.n	8000fd8 <fsm_manual_run+0x2b0>
			state_2= TUN_GREEN;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <fsm_manual_run+0x324>)
 8000fc4:	2217      	movs	r2, #23
 8000fc6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2120      	movs	r1, #32
 8000fcc:	481c      	ldr	r0, [pc, #112]	; (8001040 <fsm_manual_run+0x318>)
 8000fce:	f000 fdca 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer3(250);
 8000fd2:	20fa      	movs	r0, #250	; 0xfa
 8000fd4:	f7ff fbba 	bl	800074c <setTimer3>
		if (isButton2Pressed()){
 8000fd8:	f7ff f8ca 	bl	8000170 <isButton2Pressed>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <fsm_manual_run+0x2c8>
			state_2= MAN_GREEN;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <fsm_manual_run+0x324>)
 8000fe4:	220d      	movs	r2, #13
 8000fe6:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8000fe8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fec:	f7ff fbae 	bl	800074c <setTimer3>
		if (isButton3Pressed()){
 8000ff0:	f7ff f8d0 	bl	8000194 <isButton3Pressed>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d006      	beq.n	8001008 <fsm_manual_run+0x2e0>
			state_2=MAN_AMBER;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <fsm_manual_run+0x324>)
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	601a      	str	r2, [r3, #0]
			setTimer3(WAITING_TIME);
 8001000:	f242 7010 	movw	r0, #10000	; 0x2710
 8001004:	f7ff fba2 	bl	800074c <setTimer3>
		if (timer3_flag ==1){
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <fsm_manual_run+0x328>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d123      	bne.n	8001058 <fsm_manual_run+0x330>
			state_2=AUTO_GREEN;
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <fsm_manual_run+0x324>)
 8001012:	2203      	movs	r2, #3
 8001014:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <fsm_manual_run+0x32c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800101e:	fb02 f303 	mul.w	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fb92 	bl	800074c <setTimer3>
		break;
 8001028:	e016      	b.n	8001058 <fsm_manual_run+0x330>
		break;
 800102a:	bf00      	nop
 800102c:	e015      	b.n	800105a <fsm_manual_run+0x332>
		break;
 800102e:	bf00      	nop
 8001030:	e013      	b.n	800105a <fsm_manual_run+0x332>
		break;
 8001032:	bf00      	nop
 8001034:	e011      	b.n	800105a <fsm_manual_run+0x332>
 8001036:	bf00      	nop
 8001038:	20000094 	.word	0x20000094
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00
 8001044:	200000a4 	.word	0x200000a4
 8001048:	20000050 	.word	0x20000050
 800104c:	20000098 	.word	0x20000098
 8001050:	200000ac 	.word	0x200000ac
 8001054:	20000058 	.word	0x20000058
		break;
 8001058:	bf00      	nop
	}
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop

08001060 <fsm_tuning_run>:
 *      Author: duyvt
 */

#include "traffic_tuning.h"

void fsm_tuning_run(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	switch(state_1){
 8001064:	4ba7      	ldr	r3, [pc, #668]	; (8001304 <fsm_tuning_run+0x2a4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b17      	cmp	r3, #23
 800106a:	d008      	beq.n	800107e <fsm_tuning_run+0x1e>
 800106c:	2b17      	cmp	r3, #23
 800106e:	f300 80d1 	bgt.w	8001214 <fsm_tuning_run+0x1b4>
 8001072:	2b15      	cmp	r3, #21
 8001074:	f000 808d 	beq.w	8001192 <fsm_tuning_run+0x132>
 8001078:	2b16      	cmp	r3, #22
 800107a:	d046      	beq.n	800110a <fsm_tuning_run+0xaa>
			if (redTime <99) redTime++;
			else redTime =1;
		}
		break;
	default:
		break;
 800107c:	e0ca      	b.n	8001214 <fsm_tuning_run+0x1b4>
		if (timer2_flag ==1){
 800107e:	4ba2      	ldr	r3, [pc, #648]	; (8001308 <fsm_tuning_run+0x2a8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d106      	bne.n	8001094 <fsm_tuning_run+0x34>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_0_Pin);
 8001086:	2108      	movs	r1, #8
 8001088:	48a0      	ldr	r0, [pc, #640]	; (800130c <fsm_tuning_run+0x2ac>)
 800108a:	f000 fd84 	bl	8001b96 <HAL_GPIO_TogglePin>
			setTimer2(250);
 800108e:	20fa      	movs	r0, #250	; 0xfa
 8001090:	f7ff fb40 	bl	8000714 <setTimer2>
		if(isButton1Pressed()){
 8001094:	f7ff f85a 	bl	800014c <isButton1Pressed>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <fsm_tuning_run+0x56>
			state_1 = AUTO_RED;
 800109e:	4b99      	ldr	r3, [pc, #612]	; (8001304 <fsm_tuning_run+0x2a4>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80010a4:	4b9a      	ldr	r3, [pc, #616]	; (8001310 <fsm_tuning_run+0x2b0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fb2f 	bl	8000714 <setTimer2>
		if (isButton2Pressed()){
 80010b6:	f7ff f85b 	bl	8000170 <isButton2Pressed>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d010      	beq.n	80010e2 <fsm_tuning_run+0x82>
			state_1 =TUN_AMBER;
 80010c0:	4b90      	ldr	r3, [pc, #576]	; (8001304 <fsm_tuning_run+0x2a4>)
 80010c2:	2216      	movs	r2, #22
 80010c4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_0_Pin, 1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2108      	movs	r1, #8
 80010ca:	4890      	ldr	r0, [pc, #576]	; (800130c <fsm_tuning_run+0x2ac>)
 80010cc:	f000 fd4b 	bl	8001b66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TRAFFIC1_1_Pin, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d6:	488f      	ldr	r0, [pc, #572]	; (8001314 <fsm_tuning_run+0x2b4>)
 80010d8:	f000 fd45 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer2(250);
 80010dc:	20fa      	movs	r0, #250	; 0xfa
 80010de:	f7ff fb19 	bl	8000714 <setTimer2>
		if (isButton3Pressed()){
 80010e2:	f7ff f857 	bl	8000194 <isButton3Pressed>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 8095 	beq.w	8001218 <fsm_tuning_run+0x1b8>
			if (greenTime <99) greenTime++;
 80010ee:	4b8a      	ldr	r3, [pc, #552]	; (8001318 <fsm_tuning_run+0x2b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b62      	cmp	r3, #98	; 0x62
 80010f4:	dc05      	bgt.n	8001102 <fsm_tuning_run+0xa2>
 80010f6:	4b88      	ldr	r3, [pc, #544]	; (8001318 <fsm_tuning_run+0x2b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a86      	ldr	r2, [pc, #536]	; (8001318 <fsm_tuning_run+0x2b8>)
 80010fe:	6013      	str	r3, [r2, #0]
		break;
 8001100:	e08a      	b.n	8001218 <fsm_tuning_run+0x1b8>
			else greenTime =1;
 8001102:	4b85      	ldr	r3, [pc, #532]	; (8001318 <fsm_tuning_run+0x2b8>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
		break;
 8001108:	e086      	b.n	8001218 <fsm_tuning_run+0x1b8>
		if (timer2_flag ==1){
 800110a:	4b7f      	ldr	r3, [pc, #508]	; (8001308 <fsm_tuning_run+0x2a8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d10b      	bne.n	800112a <fsm_tuning_run+0xca>
			HAL_GPIO_TogglePin(GPIOA, TRAFFIC1_0_Pin);
 8001112:	2108      	movs	r1, #8
 8001114:	487d      	ldr	r0, [pc, #500]	; (800130c <fsm_tuning_run+0x2ac>)
 8001116:	f000 fd3e 	bl	8001b96 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_1_Pin);
 800111a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111e:	487d      	ldr	r0, [pc, #500]	; (8001314 <fsm_tuning_run+0x2b4>)
 8001120:	f000 fd39 	bl	8001b96 <HAL_GPIO_TogglePin>
			setTimer2(250);
 8001124:	20fa      	movs	r0, #250	; 0xfa
 8001126:	f7ff faf5 	bl	8000714 <setTimer2>
		if(isButton1Pressed()){
 800112a:	f7ff f80f 	bl	800014c <isButton1Pressed>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00b      	beq.n	800114c <fsm_tuning_run+0xec>
			state_1 = AUTO_RED;
 8001134:	4b73      	ldr	r3, [pc, #460]	; (8001304 <fsm_tuning_run+0x2a4>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 800113a:	4b75      	ldr	r3, [pc, #468]	; (8001310 <fsm_tuning_run+0x2b0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fae4 	bl	8000714 <setTimer2>
		if (isButton2Pressed()){
 800114c:	f7ff f810 	bl	8000170 <isButton2Pressed>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00a      	beq.n	800116c <fsm_tuning_run+0x10c>
			state_1 =TUN_RED;
 8001156:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <fsm_tuning_run+0x2a4>)
 8001158:	2215      	movs	r2, #21
 800115a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, TRAFFIC1_0_Pin, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2108      	movs	r1, #8
 8001160:	486a      	ldr	r0, [pc, #424]	; (800130c <fsm_tuning_run+0x2ac>)
 8001162:	f000 fd00 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer2(250);
 8001166:	20fa      	movs	r0, #250	; 0xfa
 8001168:	f7ff fad4 	bl	8000714 <setTimer2>
		if (isButton3Pressed()){
 800116c:	f7ff f812 	bl	8000194 <isButton3Pressed>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d052      	beq.n	800121c <fsm_tuning_run+0x1bc>
			if (amberTime <99) amberTime++;
 8001176:	4b69      	ldr	r3, [pc, #420]	; (800131c <fsm_tuning_run+0x2bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b62      	cmp	r3, #98	; 0x62
 800117c:	dc05      	bgt.n	800118a <fsm_tuning_run+0x12a>
 800117e:	4b67      	ldr	r3, [pc, #412]	; (800131c <fsm_tuning_run+0x2bc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a65      	ldr	r2, [pc, #404]	; (800131c <fsm_tuning_run+0x2bc>)
 8001186:	6013      	str	r3, [r2, #0]
		break;
 8001188:	e048      	b.n	800121c <fsm_tuning_run+0x1bc>
			else amberTime =1;
 800118a:	4b64      	ldr	r3, [pc, #400]	; (800131c <fsm_tuning_run+0x2bc>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
		break;
 8001190:	e044      	b.n	800121c <fsm_tuning_run+0x1bc>
		if (timer2_flag ==1){
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <fsm_tuning_run+0x2a8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d107      	bne.n	80011aa <fsm_tuning_run+0x14a>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC1_1_Pin);
 800119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119e:	485d      	ldr	r0, [pc, #372]	; (8001314 <fsm_tuning_run+0x2b4>)
 80011a0:	f000 fcf9 	bl	8001b96 <HAL_GPIO_TogglePin>
			setTimer2(250);
 80011a4:	20fa      	movs	r0, #250	; 0xfa
 80011a6:	f7ff fab5 	bl	8000714 <setTimer2>
		if(isButton1Pressed()){
 80011aa:	f7fe ffcf 	bl	800014c <isButton1Pressed>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <fsm_tuning_run+0x16c>
			state_1 = AUTO_RED;
 80011b4:	4b53      	ldr	r3, [pc, #332]	; (8001304 <fsm_tuning_run+0x2a4>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
			setTimer2(redTime*1000);
 80011ba:	4b55      	ldr	r3, [pc, #340]	; (8001310 <fsm_tuning_run+0x2b0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff faa4 	bl	8000714 <setTimer2>
		if (isButton2Pressed()){
 80011cc:	f7fe ffd0 	bl	8000170 <isButton2Pressed>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <fsm_tuning_run+0x18e>
			state_1 =TUN_GREEN;
 80011d6:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <fsm_tuning_run+0x2a4>)
 80011d8:	2217      	movs	r2, #23
 80011da:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC1_1_Pin, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e2:	484c      	ldr	r0, [pc, #304]	; (8001314 <fsm_tuning_run+0x2b4>)
 80011e4:	f000 fcbf 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer2(250);
 80011e8:	20fa      	movs	r0, #250	; 0xfa
 80011ea:	f7ff fa93 	bl	8000714 <setTimer2>
		if (isButton3Pressed()){
 80011ee:	f7fe ffd1 	bl	8000194 <isButton3Pressed>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <fsm_tuning_run+0x1c0>
			if (redTime <99) redTime++;
 80011f8:	4b45      	ldr	r3, [pc, #276]	; (8001310 <fsm_tuning_run+0x2b0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b62      	cmp	r3, #98	; 0x62
 80011fe:	dc05      	bgt.n	800120c <fsm_tuning_run+0x1ac>
 8001200:	4b43      	ldr	r3, [pc, #268]	; (8001310 <fsm_tuning_run+0x2b0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a42      	ldr	r2, [pc, #264]	; (8001310 <fsm_tuning_run+0x2b0>)
 8001208:	6013      	str	r3, [r2, #0]
		break;
 800120a:	e009      	b.n	8001220 <fsm_tuning_run+0x1c0>
			else redTime =1;
 800120c:	4b40      	ldr	r3, [pc, #256]	; (8001310 <fsm_tuning_run+0x2b0>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]
		break;
 8001212:	e005      	b.n	8001220 <fsm_tuning_run+0x1c0>
		break;
 8001214:	bf00      	nop
 8001216:	e004      	b.n	8001222 <fsm_tuning_run+0x1c2>
		break;
 8001218:	bf00      	nop
 800121a:	e002      	b.n	8001222 <fsm_tuning_run+0x1c2>
		break;
 800121c:	bf00      	nop
 800121e:	e000      	b.n	8001222 <fsm_tuning_run+0x1c2>
		break;
 8001220:	bf00      	nop
	}



	switch(state_2){
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <fsm_tuning_run+0x2c0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b17      	cmp	r3, #23
 8001228:	d007      	beq.n	800123a <fsm_tuning_run+0x1da>
 800122a:	2b17      	cmp	r3, #23
 800122c:	f300 80a9 	bgt.w	8001382 <fsm_tuning_run+0x322>
 8001230:	2b15      	cmp	r3, #21
 8001232:	d079      	beq.n	8001328 <fsm_tuning_run+0x2c8>
 8001234:	2b16      	cmp	r3, #22
 8001236:	d033      	beq.n	80012a0 <fsm_tuning_run+0x240>
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
			setTimer3(250);
		}
		break;
	default:
		break;
 8001238:	e0a3      	b.n	8001382 <fsm_tuning_run+0x322>
		if (timer3_flag ==1){
 800123a:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <fsm_tuning_run+0x2c4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d106      	bne.n	8001250 <fsm_tuning_run+0x1f0>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 8001242:	2110      	movs	r1, #16
 8001244:	4833      	ldr	r0, [pc, #204]	; (8001314 <fsm_tuning_run+0x2b4>)
 8001246:	f000 fca6 	bl	8001b96 <HAL_GPIO_TogglePin>
			setTimer3(250);
 800124a:	20fa      	movs	r0, #250	; 0xfa
 800124c:	f7ff fa7e 	bl	800074c <setTimer3>
		if(isButton1Pressed()){
 8001250:	f7fe ff7c 	bl	800014c <isButton1Pressed>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <fsm_tuning_run+0x212>
			state_2 = AUTO_GREEN;
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <fsm_tuning_run+0x2c0>)
 800125c:	2203      	movs	r2, #3
 800125e:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <fsm_tuning_run+0x2b8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fa6d 	bl	800074c <setTimer3>
		if (isButton2Pressed()){
 8001272:	f7fe ff7d 	bl	8000170 <isButton2Pressed>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 8084 	beq.w	8001386 <fsm_tuning_run+0x326>
			state_2 =TUN_AMBER;
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <fsm_tuning_run+0x2c0>)
 8001280:	2216      	movs	r2, #22
 8001282:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	2110      	movs	r1, #16
 8001288:	4822      	ldr	r0, [pc, #136]	; (8001314 <fsm_tuning_run+0x2b4>)
 800128a:	f000 fc6c 	bl	8001b66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	2120      	movs	r1, #32
 8001292:	4820      	ldr	r0, [pc, #128]	; (8001314 <fsm_tuning_run+0x2b4>)
 8001294:	f000 fc67 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer3(250);
 8001298:	20fa      	movs	r0, #250	; 0xfa
 800129a:	f7ff fa57 	bl	800074c <setTimer3>
		break;
 800129e:	e072      	b.n	8001386 <fsm_tuning_run+0x326>
		if (timer3_flag ==1){
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <fsm_tuning_run+0x2c4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10a      	bne.n	80012be <fsm_tuning_run+0x25e>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_0_Pin);
 80012a8:	2110      	movs	r1, #16
 80012aa:	481a      	ldr	r0, [pc, #104]	; (8001314 <fsm_tuning_run+0x2b4>)
 80012ac:	f000 fc73 	bl	8001b96 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 80012b0:	2120      	movs	r1, #32
 80012b2:	4818      	ldr	r0, [pc, #96]	; (8001314 <fsm_tuning_run+0x2b4>)
 80012b4:	f000 fc6f 	bl	8001b96 <HAL_GPIO_TogglePin>
			setTimer3(250);
 80012b8:	20fa      	movs	r0, #250	; 0xfa
 80012ba:	f7ff fa47 	bl	800074c <setTimer3>
		if(isButton1Pressed()){
 80012be:	f7fe ff45 	bl	800014c <isButton1Pressed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <fsm_tuning_run+0x280>
			state_2 = AUTO_GREEN;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <fsm_tuning_run+0x2c0>)
 80012ca:	2203      	movs	r2, #3
 80012cc:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <fsm_tuning_run+0x2b8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fa36 	bl	800074c <setTimer3>
		if (isButton2Pressed()){
 80012e0:	f7fe ff46 	bl	8000170 <isButton2Pressed>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d04f      	beq.n	800138a <fsm_tuning_run+0x32a>
			state_2 =TUN_RED;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <fsm_tuning_run+0x2c0>)
 80012ec:	2215      	movs	r2, #21
 80012ee:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_0_Pin, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2110      	movs	r1, #16
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <fsm_tuning_run+0x2b4>)
 80012f6:	f000 fc36 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer3(250);
 80012fa:	20fa      	movs	r0, #250	; 0xfa
 80012fc:	f7ff fa26 	bl	800074c <setTimer3>
		break;
 8001300:	e043      	b.n	800138a <fsm_tuning_run+0x32a>
 8001302:	bf00      	nop
 8001304:	20000094 	.word	0x20000094
 8001308:	200000a4 	.word	0x200000a4
 800130c:	40010800 	.word	0x40010800
 8001310:	20000050 	.word	0x20000050
 8001314:	40010c00 	.word	0x40010c00
 8001318:	20000058 	.word	0x20000058
 800131c:	20000054 	.word	0x20000054
 8001320:	20000098 	.word	0x20000098
 8001324:	200000ac 	.word	0x200000ac
		if (timer3_flag ==1){
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <fsm_tuning_run+0x334>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d106      	bne.n	800133e <fsm_tuning_run+0x2de>
			HAL_GPIO_TogglePin(GPIOB, TRAFFIC2_1_Pin);
 8001330:	2120      	movs	r1, #32
 8001332:	4819      	ldr	r0, [pc, #100]	; (8001398 <fsm_tuning_run+0x338>)
 8001334:	f000 fc2f 	bl	8001b96 <HAL_GPIO_TogglePin>
			setTimer3(250);
 8001338:	20fa      	movs	r0, #250	; 0xfa
 800133a:	f7ff fa07 	bl	800074c <setTimer3>
		if(isButton1Pressed()){
 800133e:	f7fe ff05 	bl	800014c <isButton1Pressed>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <fsm_tuning_run+0x300>
			state_2 = AUTO_GREEN;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <fsm_tuning_run+0x33c>)
 800134a:	2203      	movs	r2, #3
 800134c:	601a      	str	r2, [r3, #0]
			setTimer3(greenTime*1000);
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <fsm_tuning_run+0x340>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f9f6 	bl	800074c <setTimer3>
		if (isButton2Pressed()){
 8001360:	f7fe ff06 	bl	8000170 <isButton2Pressed>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d011      	beq.n	800138e <fsm_tuning_run+0x32e>
			state_2 =TUN_GREEN;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <fsm_tuning_run+0x33c>)
 800136c:	2217      	movs	r2, #23
 800136e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, TRAFFIC2_1_Pin, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2120      	movs	r1, #32
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <fsm_tuning_run+0x338>)
 8001376:	f000 fbf6 	bl	8001b66 <HAL_GPIO_WritePin>
			setTimer3(250);
 800137a:	20fa      	movs	r0, #250	; 0xfa
 800137c:	f7ff f9e6 	bl	800074c <setTimer3>
		break;
 8001380:	e005      	b.n	800138e <fsm_tuning_run+0x32e>
		break;
 8001382:	bf00      	nop
 8001384:	e004      	b.n	8001390 <fsm_tuning_run+0x330>
		break;
 8001386:	bf00      	nop
 8001388:	e002      	b.n	8001390 <fsm_tuning_run+0x330>
		break;
 800138a:	bf00      	nop
 800138c:	e000      	b.n	8001390 <fsm_tuning_run+0x330>
		break;
 800138e:	bf00      	nop
	}
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200000ac 	.word	0x200000ac
 8001398:	40010c00 	.word	0x40010c00
 800139c:	20000098 	.word	0x20000098
 80013a0:	20000058 	.word	0x20000058

080013a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	; (80013dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	; (80013e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ca:	f7ff fb5b 	bl	8000a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f002 faa9 	bl	8003924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d2:	f7fe ffd7 	bl	8000384 <main>
  bx lr
 80013d6:	4770      	bx	lr
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013e0:	080039c4 	.word	0x080039c4
  ldr r2, =_sbss
 80013e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013e8:	20000194 	.word	0x20000194

080013ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x28>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x28>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f923 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	200f      	movs	r0, #15
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fa10 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f93b 	bl	80016b6 <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f903 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000005c 	.word	0x2000005c
 8001474:	20000064 	.word	0x20000064
 8001478:	20000060 	.word	0x20000060

0800147c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_IncTick+0x1c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x20>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_IncTick+0x20>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000064 	.word	0x20000064
 800149c:	20000190 	.word	0x20000190

080014a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <HAL_GetTick+0x10>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	20000190 	.word	0x20000190

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4906      	ldr	r1, [pc, #24]	; (800154c <__NVIC_EnableIRQ+0x34>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff90 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff2d 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff42 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff35 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d008      	beq.n	80016f6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2204      	movs	r2, #4
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e020      	b.n	8001738 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 020e 	bic.w	r2, r2, #14
 8001704:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001756:	2b02      	cmp	r3, #2
 8001758:	d005      	beq.n	8001766 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2204      	movs	r2, #4
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e051      	b.n	800180a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 020e 	bic.w	r2, r2, #14
 8001774:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_DMA_Abort_IT+0xd0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d029      	beq.n	80017e4 <HAL_DMA_Abort_IT+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_DMA_Abort_IT+0xd4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d022      	beq.n	80017e0 <HAL_DMA_Abort_IT+0x9c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <HAL_DMA_Abort_IT+0xd8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d01a      	beq.n	80017da <HAL_DMA_Abort_IT+0x96>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_DMA_Abort_IT+0xdc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d012      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x90>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_DMA_Abort_IT+0xe0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00a      	beq.n	80017ce <HAL_DMA_Abort_IT+0x8a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <HAL_DMA_Abort_IT+0xe4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d102      	bne.n	80017c8 <HAL_DMA_Abort_IT+0x84>
 80017c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017c6:	e00e      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017cc:	e00b      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d2:	e008      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	e005      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017de:	e002      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017e0:	2310      	movs	r3, #16
 80017e2:	e000      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017e4:	2301      	movs	r3, #1
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_DMA_Abort_IT+0xe8>)
 80017e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
    } 
  }
  return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020008 	.word	0x40020008
 8001818:	4002001c 	.word	0x4002001c
 800181c:	40020030 	.word	0x40020030
 8001820:	40020044 	.word	0x40020044
 8001824:	40020058 	.word	0x40020058
 8001828:	4002006c 	.word	0x4002006c
 800182c:	40020000 	.word	0x40020000

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b08b      	sub	sp, #44	; 0x2c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001842:	e169      	b.n	8001b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001844:	2201      	movs	r2, #1
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 8158 	bne.w	8001b12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a9a      	ldr	r2, [pc, #616]	; (8001ad0 <HAL_GPIO_Init+0x2a0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d05e      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 800186c:	4a98      	ldr	r2, [pc, #608]	; (8001ad0 <HAL_GPIO_Init+0x2a0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d875      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 8001872:	4a98      	ldr	r2, [pc, #608]	; (8001ad4 <HAL_GPIO_Init+0x2a4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d058      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001878:	4a96      	ldr	r2, [pc, #600]	; (8001ad4 <HAL_GPIO_Init+0x2a4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d86f      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 800187e:	4a96      	ldr	r2, [pc, #600]	; (8001ad8 <HAL_GPIO_Init+0x2a8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d052      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001884:	4a94      	ldr	r2, [pc, #592]	; (8001ad8 <HAL_GPIO_Init+0x2a8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d869      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 800188a:	4a94      	ldr	r2, [pc, #592]	; (8001adc <HAL_GPIO_Init+0x2ac>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d04c      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 8001890:	4a92      	ldr	r2, [pc, #584]	; (8001adc <HAL_GPIO_Init+0x2ac>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d863      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 8001896:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <HAL_GPIO_Init+0x2b0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d046      	beq.n	800192a <HAL_GPIO_Init+0xfa>
 800189c:	4a90      	ldr	r2, [pc, #576]	; (8001ae0 <HAL_GPIO_Init+0x2b0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d85d      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	d82a      	bhi.n	80018fc <HAL_GPIO_Init+0xcc>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d859      	bhi.n	800195e <HAL_GPIO_Init+0x12e>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <HAL_GPIO_Init+0x80>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	0800192b 	.word	0x0800192b
 80018b4:	08001905 	.word	0x08001905
 80018b8:	08001917 	.word	0x08001917
 80018bc:	08001959 	.word	0x08001959
 80018c0:	0800195f 	.word	0x0800195f
 80018c4:	0800195f 	.word	0x0800195f
 80018c8:	0800195f 	.word	0x0800195f
 80018cc:	0800195f 	.word	0x0800195f
 80018d0:	0800195f 	.word	0x0800195f
 80018d4:	0800195f 	.word	0x0800195f
 80018d8:	0800195f 	.word	0x0800195f
 80018dc:	0800195f 	.word	0x0800195f
 80018e0:	0800195f 	.word	0x0800195f
 80018e4:	0800195f 	.word	0x0800195f
 80018e8:	0800195f 	.word	0x0800195f
 80018ec:	0800195f 	.word	0x0800195f
 80018f0:	0800195f 	.word	0x0800195f
 80018f4:	0800190d 	.word	0x0800190d
 80018f8:	08001921 	.word	0x08001921
 80018fc:	4a79      	ldr	r2, [pc, #484]	; (8001ae4 <HAL_GPIO_Init+0x2b4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001902:	e02c      	b.n	800195e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e029      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	3304      	adds	r3, #4
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	e024      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	3308      	adds	r3, #8
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e01f      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	330c      	adds	r3, #12
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e01a      	b.n	8001960 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001932:	2304      	movs	r3, #4
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e013      	b.n	8001960 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001940:	2308      	movs	r3, #8
 8001942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	611a      	str	r2, [r3, #16]
          break;
 800194a:	e009      	b.n	8001960 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	615a      	str	r2, [r3, #20]
          break;
 8001956:	e003      	b.n	8001960 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x130>
          break;
 800195e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d801      	bhi.n	800196a <HAL_GPIO_Init+0x13a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	e001      	b.n	800196e <HAL_GPIO_Init+0x13e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3304      	adds	r3, #4
 800196e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d802      	bhi.n	800197c <HAL_GPIO_Init+0x14c>
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	e002      	b.n	8001982 <HAL_GPIO_Init+0x152>
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	3b08      	subs	r3, #8
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	210f      	movs	r1, #15
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	6a39      	ldr	r1, [r7, #32]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80b1 	beq.w	8001b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b0:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <HAL_GPIO_Init+0x2b8>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a4c      	ldr	r2, [pc, #304]	; (8001ae8 <HAL_GPIO_Init+0x2b8>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <HAL_GPIO_Init+0x2b8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c8:	4a48      	ldr	r2, [pc, #288]	; (8001aec <HAL_GPIO_Init+0x2bc>)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a40      	ldr	r2, [pc, #256]	; (8001af0 <HAL_GPIO_Init+0x2c0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d013      	beq.n	8001a1c <HAL_GPIO_Init+0x1ec>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3f      	ldr	r2, [pc, #252]	; (8001af4 <HAL_GPIO_Init+0x2c4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00d      	beq.n	8001a18 <HAL_GPIO_Init+0x1e8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3e      	ldr	r2, [pc, #248]	; (8001af8 <HAL_GPIO_Init+0x2c8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d007      	beq.n	8001a14 <HAL_GPIO_Init+0x1e4>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3d      	ldr	r2, [pc, #244]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_GPIO_Init+0x1e0>
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e006      	b.n	8001a1e <HAL_GPIO_Init+0x1ee>
 8001a10:	2304      	movs	r3, #4
 8001a12:	e004      	b.n	8001a1e <HAL_GPIO_Init+0x1ee>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x1ee>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_GPIO_Init+0x1ee>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	f002 0203 	and.w	r2, r2, #3
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	4093      	lsls	r3, r2
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a2e:	492f      	ldr	r1, [pc, #188]	; (8001aec <HAL_GPIO_Init+0x2bc>)
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	492c      	ldr	r1, [pc, #176]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a56:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4928      	ldr	r1, [pc, #160]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4922      	ldr	r1, [pc, #136]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	491e      	ldr	r1, [pc, #120]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4918      	ldr	r1, [pc, #96]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4914      	ldr	r1, [pc, #80]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d021      	beq.n	8001b04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
 8001acc:	e021      	b.n	8001b12 <HAL_GPIO_Init+0x2e2>
 8001ace:	bf00      	nop
 8001ad0:	10320000 	.word	0x10320000
 8001ad4:	10310000 	.word	0x10310000
 8001ad8:	10220000 	.word	0x10220000
 8001adc:	10210000 	.word	0x10210000
 8001ae0:	10120000 	.word	0x10120000
 8001ae4:	10110000 	.word	0x10110000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010000 	.word	0x40010000
 8001af0:	40010800 	.word	0x40010800
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	40011000 	.word	0x40011000
 8001afc:	40011400 	.word	0x40011400
 8001b00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4909      	ldr	r1, [pc, #36]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	3301      	adds	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f47f ae8e 	bne.w	8001844 <HAL_GPIO_Init+0x14>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	372c      	adds	r7, #44	; 0x2c
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]
 8001b72:	4613      	mov	r3, r2
 8001b74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b76:	787b      	ldrb	r3, [r7, #1]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7c:	887a      	ldrh	r2, [r7, #2]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b82:	e003      	b.n	8001b8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	041a      	lsls	r2, r3, #16
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	611a      	str	r2, [r3, #16]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba8:	887a      	ldrh	r2, [r7, #2]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	041a      	lsls	r2, r3, #16
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e26c      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8087 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be8:	4b92      	ldr	r3, [pc, #584]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d00c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf4:	4b8f      	ldr	r3, [pc, #572]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d112      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5e>
 8001c00:	4b8c      	ldr	r3, [pc, #560]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d10b      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0e:	4b89      	ldr	r3, [pc, #548]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d06c      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x12c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d168      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e246      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x76>
 8001c30:	4b80      	ldr	r3, [pc, #512]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a7f      	ldr	r2, [pc, #508]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e02e      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x98>
 8001c46:	4b7b      	ldr	r3, [pc, #492]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7a      	ldr	r2, [pc, #488]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a77      	ldr	r2, [pc, #476]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e01d      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0xbc>
 8001c6a:	4b72      	ldr	r3, [pc, #456]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a71      	ldr	r2, [pc, #452]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6e      	ldr	r2, [pc, #440]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c84:	4b6b      	ldr	r3, [pc, #428]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6a      	ldr	r2, [pc, #424]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b68      	ldr	r3, [pc, #416]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a67      	ldr	r2, [pc, #412]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fbfc 	bl	80014a0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fbf8 	bl	80014a0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1fa      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0xe4>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fbe8 	bl	80014a0 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fbe4 	bl	80014a0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1e6      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x10c>
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d063      	beq.n	8001dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d02:	4b4c      	ldr	r3, [pc, #304]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00b      	beq.n	8001d26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d0e:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d11c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x18c>
 8001d1a:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d116      	bne.n	8001d54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_RCC_OscConfig+0x176>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e1ba      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4939      	ldr	r1, [pc, #228]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	e03a      	b.n	8001dca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d020      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d5c:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fb9d 	bl	80014a0 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fb99 	bl	80014a0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e19b      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4927      	ldr	r1, [pc, #156]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
 8001d9c:	e015      	b.n	8001dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_RCC_OscConfig+0x270>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fb7c 	bl	80014a0 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff fb78 	bl	80014a0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e17a      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d03a      	beq.n	8001e4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d019      	beq.n	8001e12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7ff fb5c 	bl	80014a0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7ff fb58 	bl	80014a0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e15a      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f000 fad8 	bl	80023c0 <RCC_Delay>
 8001e10:	e01c      	b.n	8001e4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff fb42 	bl	80014a0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1e:	e00f      	b.n	8001e40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff fb3e 	bl	80014a0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d908      	bls.n	8001e40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e140      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	42420000 	.word	0x42420000
 8001e3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b9e      	ldr	r3, [pc, #632]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e9      	bne.n	8001e20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a6 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b97      	ldr	r3, [pc, #604]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b94      	ldr	r3, [pc, #592]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a93      	ldr	r2, [pc, #588]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]
 8001e76:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b8e      	ldr	r3, [pc, #568]	; (80020c0 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b8b      	ldr	r3, [pc, #556]	; (80020c0 <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a8a      	ldr	r2, [pc, #552]	; (80020c0 <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff faff 	bl	80014a0 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7ff fafb 	bl	80014a0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b64      	cmp	r3, #100	; 0x64
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0fd      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b81      	ldr	r3, [pc, #516]	; (80020c0 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x312>
 8001ecc:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	e02d      	b.n	8001f36 <HAL_RCC_OscConfig+0x36e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x334>
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a72      	ldr	r2, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f023 0304 	bic.w	r3, r3, #4
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	e01c      	b.n	8001f36 <HAL_RCC_OscConfig+0x36e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d10c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x356>
 8001f04:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a6c      	ldr	r2, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a69      	ldr	r2, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCC_OscConfig+0x36e>
 8001f1e:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a66      	ldr	r2, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b64      	ldr	r3, [pc, #400]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a63      	ldr	r2, [pc, #396]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d015      	beq.n	8001f6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff faaf 	bl	80014a0 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff faab 	bl	80014a0 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0ab      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ee      	beq.n	8001f46 <HAL_RCC_OscConfig+0x37e>
 8001f68:	e014      	b.n	8001f94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fa99 	bl	80014a0 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7ff fa95 	bl	80014a0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e095      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ee      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d105      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a47      	ldr	r2, [pc, #284]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8081 	beq.w	80020b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d061      	beq.n	8002080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d146      	bne.n	8002052 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_OscConfig+0x4fc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff fa69 	bl	80014a0 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff fa65 	bl	80014a0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e067      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d108      	bne.n	800200c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	492d      	ldr	r1, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a19      	ldr	r1, [r3, #32]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	430b      	orrs	r3, r1
 800201e:	4927      	ldr	r1, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x4fc>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fa39 	bl	80014a0 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fa35 	bl	80014a0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e037      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x46a>
 8002050:	e02f      	b.n	80020b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <HAL_RCC_OscConfig+0x4fc>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fa22 	bl	80014a0 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff fa1e 	bl	80014a0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e020      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x498>
 800207e:	e018      	b.n	80020b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e013      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	429a      	cmp	r2, r3
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
 80020c4:	42420060 	.word	0x42420060

080020c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0d0      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d910      	bls.n	800210c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	4965      	ldr	r1, [pc, #404]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b63      	ldr	r3, [pc, #396]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0b8      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800212e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4a52      	ldr	r2, [pc, #328]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002148:	4b50      	ldr	r3, [pc, #320]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	494d      	ldr	r1, [pc, #308]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d040      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d115      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e07f      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e073      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e06b      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4936      	ldr	r1, [pc, #216]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b8:	f7ff f972 	bl	80014a0 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7ff f96e 	bl	80014a0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e053      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 020c 	and.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1eb      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d210      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4922      	ldr	r1, [pc, #136]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e032      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4916      	ldr	r1, [pc, #88]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	490e      	ldr	r1, [pc, #56]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002256:	f000 f821 	bl	800229c <HAL_RCC_GetSysClockFreq>
 800225a:	4602      	mov	r2, r0
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	490a      	ldr	r1, [pc, #40]	; (8002290 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	5ccb      	ldrb	r3, [r1, r3]
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	4a09      	ldr	r2, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1cc>)
 8002270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1d0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f8d0 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000
 800228c:	40021000 	.word	0x40021000
 8002290:	080039a4 	.word	0x080039a4
 8002294:	2000005c 	.word	0x2000005c
 8002298:	20000060 	.word	0x20000060

0800229c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	b490      	push	{r4, r7}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a4:	1d3c      	adds	r4, r7, #4
 80022a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ac:	f240 2301 	movw	r3, #513	; 0x201
 80022b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x40>
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x46>
 80022da:	e02d      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022de:	623b      	str	r3, [r7, #32]
      break;
 80022e0:	e02d      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ee:	4413      	add	r3, r2
 80022f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800230e:	4413      	add	r3, r2
 8002310:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002314:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231a:	fb02 f203 	mul.w	r2, r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	e004      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	623b      	str	r3, [r7, #32]
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233a:	623b      	str	r3, [r7, #32]
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	6a3b      	ldr	r3, [r7, #32]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc90      	pop	{r4, r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	08003994 	.word	0x08003994
 8002350:	40021000 	.word	0x40021000
 8002354:	007a1200 	.word	0x007a1200
 8002358:	003d0900 	.word	0x003d0900

0800235c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002360:	4b02      	ldr	r3, [pc, #8]	; (800236c <HAL_RCC_GetHCLKFreq+0x10>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	2000005c 	.word	0x2000005c

08002370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002374:	f7ff fff2 	bl	800235c <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	080039b4 	.word	0x080039b4

08002398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800239c:	f7ff ffde 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0adb      	lsrs	r3, r3, #11
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	080039b4 	.word	0x080039b4

080023c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <RCC_Delay+0x34>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <RCC_Delay+0x38>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0a5b      	lsrs	r3, r3, #9
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023dc:	bf00      	nop
  }
  while (Delay --);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e5a      	subs	r2, r3, #1
 80023e2:	60fa      	str	r2, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <RCC_Delay+0x1c>
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	2000005c 	.word	0x2000005c
 80023f8:	10624dd3 	.word	0x10624dd3

080023fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e041      	b.n	8002492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fa36 	bl	8000894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f000 fb86 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d001      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e03a      	b.n	800252a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_TIM_Base_Start_IT+0x98>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00e      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x58>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024de:	d009      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x58>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <HAL_TIM_Base_Start_IT+0x9c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x58>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <HAL_TIM_Base_Start_IT+0xa0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d111      	bne.n	8002518 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b06      	cmp	r3, #6
 8002504:	d010      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	e007      	b.n	8002528 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40000400 	.word	0x40000400
 800253c:	40000800 	.word	0x40000800

08002540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e041      	b.n	80025d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f839 	bl	80025de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f000 fae4 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b02      	cmp	r3, #2
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0202 	mvn.w	r2, #2
 800261c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa6f 	bl	8002b16 <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fa62 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fa71 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b04      	cmp	r3, #4
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0204 	mvn.w	r2, #4
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa45 	bl	8002b16 <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa38 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fa47 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0208 	mvn.w	r2, #8
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2204      	movs	r2, #4
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa1b 	bl	8002b16 <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fa0e 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fa1d 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b10      	cmp	r3, #16
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0210 	mvn.w	r2, #16
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2208      	movs	r2, #8
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f9f1 	bl	8002b16 <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f9e4 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f9f3 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d107      	bne.n	8002774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0201 	mvn.w	r2, #1
 800276c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fd ffbe 	bl	80006f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b80      	cmp	r3, #128	; 0x80
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278c:	2b80      	cmp	r3, #128	; 0x80
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fcbd 	bl	800311a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b8:	2b40      	cmp	r3, #64	; 0x40
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f9b7 	bl	8002b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0220 	mvn.w	r2, #32
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fc88 	bl	8003108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002816:	2302      	movs	r3, #2
 8002818:	e0ac      	b.n	8002974 <HAL_TIM_PWM_ConfigChannel+0x174>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	f200 809f 	bhi.w	8002968 <HAL_TIM_PWM_ConfigChannel+0x168>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002865 	.word	0x08002865
 8002834:	08002969 	.word	0x08002969
 8002838:	08002969 	.word	0x08002969
 800283c:	08002969 	.word	0x08002969
 8002840:	080028a5 	.word	0x080028a5
 8002844:	08002969 	.word	0x08002969
 8002848:	08002969 	.word	0x08002969
 800284c:	08002969 	.word	0x08002969
 8002850:	080028e7 	.word	0x080028e7
 8002854:	08002969 	.word	0x08002969
 8002858:	08002969 	.word	0x08002969
 800285c:	08002969 	.word	0x08002969
 8002860:	08002927 	.word	0x08002927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f9d0 	bl	8002c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0208 	orr.w	r2, r2, #8
 800287e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0204 	bic.w	r2, r2, #4
 800288e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6999      	ldr	r1, [r3, #24]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	619a      	str	r2, [r3, #24]
      break;
 80028a2:	e062      	b.n	800296a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fa16 	bl	8002cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6999      	ldr	r1, [r3, #24]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	021a      	lsls	r2, r3, #8
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	619a      	str	r2, [r3, #24]
      break;
 80028e4:	e041      	b.n	800296a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fa5f 	bl	8002db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0208 	orr.w	r2, r2, #8
 8002900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0204 	bic.w	r2, r2, #4
 8002910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69d9      	ldr	r1, [r3, #28]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	61da      	str	r2, [r3, #28]
      break;
 8002924:	e021      	b.n	800296a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 faa9 	bl	8002e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69d9      	ldr	r1, [r3, #28]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	61da      	str	r2, [r3, #28]
      break;
 8002966:	e000      	b.n	800296a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_TIM_ConfigClockSource+0x18>
 8002990:	2302      	movs	r3, #2
 8002992:	e0b3      	b.n	8002afc <HAL_TIM_ConfigClockSource+0x180>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029cc:	d03e      	beq.n	8002a4c <HAL_TIM_ConfigClockSource+0xd0>
 80029ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d2:	f200 8087 	bhi.w	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	f000 8085 	beq.w	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80029de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e2:	d87f      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
 80029e4:	2b70      	cmp	r3, #112	; 0x70
 80029e6:	d01a      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0xa2>
 80029e8:	2b70      	cmp	r3, #112	; 0x70
 80029ea:	d87b      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d050      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x116>
 80029f0:	2b60      	cmp	r3, #96	; 0x60
 80029f2:	d877      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
 80029f4:	2b50      	cmp	r3, #80	; 0x50
 80029f6:	d03c      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0xf6>
 80029f8:	2b50      	cmp	r3, #80	; 0x50
 80029fa:	d873      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	d058      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x136>
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	d86f      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	d064      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x156>
 8002a08:	2b30      	cmp	r3, #48	; 0x30
 8002a0a:	d86b      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d060      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x156>
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d867      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05c      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x156>
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d05a      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a1c:	e062      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6899      	ldr	r1, [r3, #8]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f000 faee 	bl	800300e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
      break;
 8002a4a:	e04e      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6899      	ldr	r1, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f000 fad7 	bl	800300e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6e:	609a      	str	r2, [r3, #8]
      break;
 8002a70:	e03b      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f000 fa4e 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2150      	movs	r1, #80	; 0x50
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 faa5 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002a90:	e02b      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f000 fa6c 	bl	8002f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2160      	movs	r1, #96	; 0x60
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fa95 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002ab0:	e01b      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f000 fa2e 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2140      	movs	r1, #64	; 0x40
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fa85 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002ad0:	e00b      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f000 fa7c 	bl	8002fda <TIM_ITRx_SetConfig>
        break;
 8002ae2:	e002      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ae4:	bf00      	nop
 8002ae6:	e000      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ae8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <TIM_Base_SetConfig+0xb8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <TIM_Base_SetConfig+0x30>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d007      	beq.n	8002b7c <TIM_Base_SetConfig+0x30>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <TIM_Base_SetConfig+0xbc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <TIM_Base_SetConfig+0x30>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <TIM_Base_SetConfig+0xc0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <TIM_Base_SetConfig+0xb8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <TIM_Base_SetConfig+0x62>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d007      	beq.n	8002bae <TIM_Base_SetConfig+0x62>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <TIM_Base_SetConfig+0xbc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0x62>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <TIM_Base_SetConfig+0xc0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <TIM_Base_SetConfig+0xb8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d103      	bne.n	8002bf4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800

08002c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0201 	bic.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f023 0302 	bic.w	r3, r3, #2
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <TIM_OC1_SetConfig+0xc8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10c      	bne.n	8002c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0308 	bic.w	r3, r3, #8
 8002c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <TIM_OC1_SetConfig+0xc8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d111      	bne.n	8002cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	621a      	str	r2, [r3, #32]
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40012c00 	.word	0x40012c00

08002cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f023 0210 	bic.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0320 	bic.w	r3, r3, #32
 8002d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <TIM_OC2_SetConfig+0xd0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10d      	bne.n	8002d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <TIM_OC2_SetConfig+0xd0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d113      	bne.n	8002d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	40012c00 	.word	0x40012c00

08002db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <TIM_OC3_SetConfig+0xd0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10d      	bne.n	8002e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <TIM_OC3_SetConfig+0xd0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d113      	bne.n	8002e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012c00 	.word	0x40012c00

08002e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	031b      	lsls	r3, r3, #12
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a0f      	ldr	r2, [pc, #60]	; (8002f1c <TIM_OC4_SetConfig+0x98>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d109      	bne.n	8002ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00

08002f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0201 	bic.w	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 030a 	bic.w	r3, r3, #10
 8002f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f023 0210 	bic.w	r2, r3, #16
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	031b      	lsls	r3, r3, #12
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f043 0307 	orr.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	609a      	str	r2, [r3, #8]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003060:	2302      	movs	r3, #2
 8003062:	e046      	b.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00e      	beq.n	80030c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d009      	beq.n	80030c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a10      	ldr	r2, [pc, #64]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800

08003108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e03f      	b.n	80031be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fc08 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fb49 	bl	8003808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_UART_IRQHandler+0x52>
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa4f 	bl	80036b6 <UART_Receive_IT>
      return;
 8003218:	e17b      	b.n	8003512 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80b1 	beq.w	8003384 <HAL_UART_IRQHandler+0x1bc>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_UART_IRQHandler+0x70>
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80a6 	beq.w	8003384 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_UART_IRQHandler+0x90>
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_UART_IRQHandler+0xb0>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f043 0202 	orr.w	r2, r3, #2
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_UART_IRQHandler+0xd0>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f043 0204 	orr.w	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00f      	beq.n	80032c2 <HAL_UART_IRQHandler+0xfa>
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_UART_IRQHandler+0xee>
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0208 	orr.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 811e 	beq.w	8003508 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_UART_IRQHandler+0x11e>
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f9e8 	bl	80036b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_UART_IRQHandler+0x146>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d031      	beq.n	8003372 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f92a 	bl	8003568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d023      	beq.n	800336a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003330:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	2b00      	cmp	r3, #0
 8003338:	d013      	beq.n	8003362 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	4a76      	ldr	r2, [pc, #472]	; (8003518 <HAL_UART_IRQHandler+0x350>)
 8003340:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe f9fc 	bl	8001744 <HAL_DMA_Abort_IT>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800335c:	4610      	mov	r0, r2
 800335e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	e00e      	b.n	8003380 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8ec 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	e00a      	b.n	8003380 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8e8 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	e006      	b.n	8003380 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8e4 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800337e:	e0c3      	b.n	8003508 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	bf00      	nop
    return;
 8003382:	e0c1      	b.n	8003508 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 80a1 	bne.w	80034d0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 809b 	beq.w	80034d0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8095 	beq.w	80034d0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d04e      	beq.n	8003468 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80033d4:	8a3b      	ldrh	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8098 	beq.w	800350c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033e0:	8a3a      	ldrh	r2, [r7, #16]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	f080 8092 	bcs.w	800350c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8a3a      	ldrh	r2, [r7, #16]
 80033ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d02b      	beq.n	8003450 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003406:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003426:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0210 	bic.w	r2, r2, #16
 8003444:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe f93f 	bl	80016ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003458:	b29b      	uxth	r3, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	b29b      	uxth	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f876 	bl	8003552 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003466:	e051      	b.n	800350c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003470:	b29b      	uxth	r3, r3
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d047      	beq.n	8003510 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003480:	8a7b      	ldrh	r3, [r7, #18]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d044      	beq.n	8003510 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003494:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0210 	bic.w	r2, r2, #16
 80034c2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034c4:	8a7b      	ldrh	r3, [r7, #18]
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f842 	bl	8003552 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ce:	e01f      	b.n	8003510 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_UART_IRQHandler+0x324>
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f87f 	bl	80035e8 <UART_Transmit_IT>
    return;
 80034ea:	e012      	b.n	8003512 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <HAL_UART_IRQHandler+0x34a>
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8c0 	bl	8003686 <UART_EndTransmit_IT>
    return;
 8003506:	e004      	b.n	8003512 <HAL_UART_IRQHandler+0x34a>
    return;
 8003508:	bf00      	nop
 800350a:	e002      	b.n	8003512 <HAL_UART_IRQHandler+0x34a>
      return;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <HAL_UART_IRQHandler+0x34a>
      return;
 8003510:	bf00      	nop
  }
}
 8003512:	3728      	adds	r7, #40	; 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	080035c1 	.word	0x080035c1

0800351c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800357e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0210 	bic.w	r2, r2, #16
 80035a6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff ffb0 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b21      	cmp	r3, #33	; 0x21
 80035fa:	d13e      	bne.n	800367a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003604:	d114      	bne.n	8003630 <UART_Transmit_IT+0x48>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d110      	bne.n	8003630 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003622:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	621a      	str	r2, [r3, #32]
 800362e:	e008      	b.n	8003642 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	1c59      	adds	r1, r3, #1
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6211      	str	r1, [r2, #32]
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4619      	mov	r1, r3
 8003650:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003664:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003674:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff38 	bl	800351c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b22      	cmp	r3, #34	; 0x22
 80036c8:	f040 8099 	bne.w	80037fe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	d117      	bne.n	8003706 <UART_Receive_IT+0x50>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d113      	bne.n	8003706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	1c9a      	adds	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
 8003704:	e026      	b.n	8003754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003718:	d007      	beq.n	800372a <UART_Receive_IT+0x74>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <UART_Receive_IT+0x82>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e008      	b.n	800374a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003744:	b2da      	uxtb	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29b      	uxth	r3, r3
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4619      	mov	r1, r3
 8003762:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003764:	2b00      	cmp	r3, #0
 8003766:	d148      	bne.n	80037fa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0220 	bic.w	r2, r2, #32
 8003776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d123      	bne.n	80037f0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0210 	bic.w	r2, r2, #16
 80037bc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d10a      	bne.n	80037e2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff feb2 	bl	8003552 <HAL_UARTEx_RxEventCallback>
 80037ee:	e002      	b.n	80037f6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fe9c 	bl	800352e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e002      	b.n	8003800 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003842:	f023 030c 	bic.w	r3, r3, #12
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	430b      	orrs	r3, r1
 800384e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2c      	ldr	r2, [pc, #176]	; (800391c <UART_SetConfig+0x114>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d103      	bne.n	8003878 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003870:	f7fe fd92 	bl	8002398 <HAL_RCC_GetPCLK2Freq>
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	e002      	b.n	800387e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7fe fd7a 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 800387c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	4a22      	ldr	r2, [pc, #136]	; (8003920 <UART_SetConfig+0x118>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	0119      	lsls	r1, r3, #4
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <UART_SetConfig+0x118>)
 80038b6:	fba3 0302 	umull	r0, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2064      	movs	r0, #100	; 0x64
 80038be:	fb00 f303 	mul.w	r3, r0, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <UART_SetConfig+0x118>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d4:	4419      	add	r1, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <UART_SetConfig+0x118>)
 80038ee:	fba3 0302 	umull	r0, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2064      	movs	r0, #100	; 0x64
 80038f6:	fb00 f303 	mul.w	r3, r0, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	3332      	adds	r3, #50	; 0x32
 8003900:	4a07      	ldr	r2, [pc, #28]	; (8003920 <UART_SetConfig+0x118>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 020f 	and.w	r2, r3, #15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	440a      	add	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40013800 	.word	0x40013800
 8003920:	51eb851f 	.word	0x51eb851f

08003924 <__libc_init_array>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	2600      	movs	r6, #0
 8003928:	4d0c      	ldr	r5, [pc, #48]	; (800395c <__libc_init_array+0x38>)
 800392a:	4c0d      	ldr	r4, [pc, #52]	; (8003960 <__libc_init_array+0x3c>)
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	42a6      	cmp	r6, r4
 8003932:	d109      	bne.n	8003948 <__libc_init_array+0x24>
 8003934:	f000 f822 	bl	800397c <_init>
 8003938:	2600      	movs	r6, #0
 800393a:	4d0a      	ldr	r5, [pc, #40]	; (8003964 <__libc_init_array+0x40>)
 800393c:	4c0a      	ldr	r4, [pc, #40]	; (8003968 <__libc_init_array+0x44>)
 800393e:	1b64      	subs	r4, r4, r5
 8003940:	10a4      	asrs	r4, r4, #2
 8003942:	42a6      	cmp	r6, r4
 8003944:	d105      	bne.n	8003952 <__libc_init_array+0x2e>
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	f855 3b04 	ldr.w	r3, [r5], #4
 800394c:	4798      	blx	r3
 800394e:	3601      	adds	r6, #1
 8003950:	e7ee      	b.n	8003930 <__libc_init_array+0xc>
 8003952:	f855 3b04 	ldr.w	r3, [r5], #4
 8003956:	4798      	blx	r3
 8003958:	3601      	adds	r6, #1
 800395a:	e7f2      	b.n	8003942 <__libc_init_array+0x1e>
 800395c:	080039bc 	.word	0x080039bc
 8003960:	080039bc 	.word	0x080039bc
 8003964:	080039bc 	.word	0x080039bc
 8003968:	080039c0 	.word	0x080039c0

0800396c <memset>:
 800396c:	4603      	mov	r3, r0
 800396e:	4402      	add	r2, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <_init>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	bf00      	nop
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr

08003988 <_fini>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr
